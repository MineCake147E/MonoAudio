<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoAudio.Core</name>
    </assembly>
    <members>
        <member name="T:MonoAudio.AudioEncoding">
            <summary>
            Defines known encoding types.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Unknown">
            <summary>
            Unknown format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Pcm">
            <summary>
            Microsoft PCM Format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MsAdpcm">
            <summary>
            Microsoft ADPCM Format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IeeeFloat">
            <summary>
            IEEE 754 Single Precision Floating-Point Number
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vselp">
            <summary>
            Vector sum excited linear prediction Compaq Computer Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IbmCvsd">
            <summary>
            IBM Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Alaw">
            <summary>
            A-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Mulaw">
            <summary>
            Î¼-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.OkiAdpcm">
            <summary>
            OKI ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ImaAdpcm">
            <summary>
            Intel Corporation ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MediaspaceAdpcm">
            <summary>
            Videologic ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.SierraAdpcm">
            <summary>
            Sierra Semiconductor Corp
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G723Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Digistd">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Digifix">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DialogicOkiAdpcm">
            <summary>
            Dialogic Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MediavisionAdpcm">
            <summary>
            Media Vision, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CuCodec">
            <summary>
            Hewlett-Packard Company
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.YamahaAdpcm">
            <summary>
            Yamaha Corporation of America
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Sonarc">
            <summary>
            Speech Compression
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DspgroupTruespeech">
            <summary>
            DSP Group, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Echosc1">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AudiofileAf36">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Aptx">
            <summary>
            Audio Processing Technology
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AudiofileAf10">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Prosody1612">
            <summary>
            Aculab plc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Lrc">
            <summary>
            Merging Technologies S.A.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DolbyAc2">
            <summary>
            Dolby Laboratories
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Gsm610">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Msnaudio">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AntexAdpcme">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ControlResVqlpc">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Digireal">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Digiadpcm">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ControlResCr10">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.NmsVbxadpcm">
            <summary>
            Natural MicroSystems
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RolandRdac">
            <summary>
            Roland
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Echosc3">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RockwellAdpcm">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RockwellDigitalk">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Xebec">
            <summary>
            Xebec Multimedia Solutions Limited
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G721Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G728Celp">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Msg723">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Mpeg">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Rt24">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Pac">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Mpeglayer3">
            <summary>
            MPEG 3 Layer 1
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.LucentG723">
            <summary>
            Lucent Technologies
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Cirrus">
            <summary>
            Cirrus Logic
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Espcm">
            <summary>
            ESS Technology
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Voxware">
            <summary>
            Voxware Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CanopusAtrac">
            <summary>
            Canopus, Co., Ltd.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G726Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G722Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Dsat">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DsatDisplay">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareByteAligned">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareAc8">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareAc10">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareAc16">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareAc20">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareRt24">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareRt29">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareRt29hw">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareVr12">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareVr18">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareTq40">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Softsound">
            <summary>
            Softsound, Ltd.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxareTq60">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Msrt24">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.G729a" -->
        <member name="F:MonoAudio.AudioEncoding.MviMv12">
            <summary>
            Motion Pixels
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DfG726">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DfGsm610">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Onlive">
            <summary>
            OnLive! Technologies, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Sbc24">
            <summary>
            Siemens Business Communications Systems
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DolbyAc3Spdif">
            <summary>
            Sonic Foundry
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ZyxelAdpcm">
            <summary>
            ZyXEL Communications, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.PhilipsLpcbb">
            <summary>
            Philips Speech Processing
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Packed">
            <summary>
            Studer Professional Audio AG
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RhetorexAdpcm">
            <summary>
            Rhetorex, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IbmMulaw">
            <summary>
            IBM mu-law format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IbmAlaw">
            <summary>
            IBM a-law format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Adpcm">
            <summary>
            IBM AVC Adaptive Differential PCM format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VivoG723">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VivoSiren">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DigitalG723">
            <summary>
            Digital Equipment Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CreativeAdpcm">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CreativeFastspeech8">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CreativeFastspeech10">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Quarterdeck">
            <summary>
            Quarterdeck Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.FmTownsSnd">
            <summary>
            Fujitsu Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.BzvDigital">
            <summary>
            Brooktree Corporation
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.VmeVmpcm" -->
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.Oligsm" -->
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.Oliadpcm" -->
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.Olicelp" -->
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.Olisbc" -->
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.Oliopr" -->
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.LhCodec" -->
        <member name="F:MonoAudio.AudioEncoding.Norris">
            <summary>
            Norris Communications, Inc.
            </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "F:MonoAudio.AudioEncoding.SoundspaceMusicompress" -->
        <member name="F:MonoAudio.AudioEncoding.Dvm">
            <summary>
            FAST Multimedia AG
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.InterwavVsc112">
            <summary>
            ?????
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Extensible">
            <summary>
            
            </summary>
        </member>
        <member name="T:MonoAudio.AudioEncodingAttribute">
            <summary>
            Specifies the properties of audio encoding format.
            </summary>
        </member>
        <member name="T:MonoAudio.BitDepthAttribute">
            <summary>
            Specifies the Bit Depth of an audio encoding format.
            </summary>
        </member>
        <member name="T:MonoAudio.FixedBitDepthAttribute">
            <summary>
            Specifies the audio encoding format supports only fixed bit depth.
            </summary>
        </member>
        <member name="M:MonoAudio.FixedBitDepthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.FixedBitDepthAttribute"/> class.
            </summary>
        </member>
        <member name="T:MonoAudio.Conversion.IAudioConverter`4">
            <summary>
            The base definition of some audio converters.
            </summary>
            <typeparam name="TFrom">The type to convert from.</typeparam>
            <typeparam name="TFromFormat"></typeparam>
            <typeparam name="TTo">The type to convert data to.</typeparam>
            <typeparam name="TToFormat"></typeparam>
        </member>
        <member name="P:MonoAudio.Conversion.IAudioConverter`4.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="T:MonoAudio.Conversion.Resampling.Sample.ResamplerBase">
            <summary>
            The base of resampler.
            </summary>
            <seealso cref="T:MonoAudio.Filters.IAudioFilter`2" />
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.Resampling.Sample.ResamplerBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destinationSampleRate">The destination sample rate.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">destinationSampleRate</exception>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value>
              <c>true</c> if this instance can seek; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateMul">
            <summary>
            Gets the rate destination sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateDiv">
            <summary>
            Gets the rate source sample rate.
            </summary>
            <value>
            The number to divide with.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateMulInverse">
            <summary>
            Gets the divisor destination sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateDivInverse">
            <summary>
            Gets the divisor source sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Channels">
            <summary>
            Gets the channels of output.
            </summary>
            <value>
            The channels of output.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Int32)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Int32)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Int64)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Int64)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Single)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Single)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetConversionGradient(System.Int32)">
            <summary>
            Calculates the conversion gradient a little precisely.
            </summary>
            <param name="outputPosition">The output position. Must not be multiplied by <see cref="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Channels"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetCeiledInputPosition(System.Int32)">
            <summary>
            Gets the ceilinged input position.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.ActualDispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose">
            <summary>
            Releases all resource used by the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> object.
            </summary>
            <remarks>Call <see cref="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose"/> when you are finished using the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/>. The <see cref="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose"/>
            method leaves the <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> in an
            unusable state. After calling <see cref="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose"/>, you must release all references to the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> so the garbage collector can
            reclaim the memory that the <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/>
            was occupying.</remarks>
        </member>
        <member name="T:MonoAudio.Conversion.Resampling.Sample.SplineResampler">
             <summary>
             Performs up-sampling using Catmull-Rom Spline interpolation.
            
             </summary>
             <seealso cref="T:MonoAudio.Conversion.Resampling.Sample.ResamplerBase" />
             <summary>
             Performs up-sampling using Catmull-Rom Spline interpolation.
            
             </summary>
             <seealso cref="T:MonoAudio.Conversion.Resampling.Sample.ResamplerBase" />
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.SplineResampler.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.Resampling.Sample.SplineResampler"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destinationSampleRate">The destination sample rate.</param>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.SplineResampler.ActualDispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.SplineResampler.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter">
            <summary>
            Converts Sample to 32-bit IeeeFloat PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter">
            <summary>
            Converts samples to 16-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> does the 16-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter">
            <summary>
            Converts samples to 24-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter"/> does the 24-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter">
            <summary>
            Converts samples to 32-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter"/> does the 32-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter">
            <summary>
            Converts samples to 8-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.AccuracyMode"/> when <c>true</c>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter"/> does the 8-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase">
            <summary>
            Converts samples to wave data.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2" /> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2" /> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2" /> lasts in samples.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="F:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},MonoAudio.Formats.IWaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter">
            <summary>
            Converts 32-bit IeeeFloat PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter">
            <summary>
            Converts 16-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter">
            <summary>
            Converts 24-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter">
            <summary>
            Converts 32-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter">
            <summary>
            Converts 8-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase">
            <summary>
            Converts wave data to samples.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2" /> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2" /> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2" /> lasts in samples.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="F:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat},MonoAudio.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Endianness">
            <summary>
            Represents an endianness.
            </summary>
        </member>
        <member name="F:MonoAudio.Endianness.Little">
            <summary>
            The little endian
            </summary>
        </member>
        <member name="F:MonoAudio.Endianness.Big">
            <summary>
            The big endian
            </summary>
        </member>
        <member name="T:MonoAudio.Extensions.EndiannessExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="F:MonoAudio.Extensions.EndiannessExtensions.EnvironmentEndianness">
            <summary>
            Gets the environment's endianness.
            </summary>
            <value>
            The environment endianness.
            </value>
        </member>
        <member name="T:MonoAudio.Filters.Attenuator">
            <summary>
            Modifies the velocity of <see cref="P:MonoAudio.Filters.Attenuator.Source"/>
            </summary>
            <seealso cref="T:MonoAudio.Filters.IAudioFilter`2" />
        </member>
        <member name="M:MonoAudio.Filters.Attenuator.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.Attenuator"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value>
              <c>true</c> if this instance can seek; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.Attenuator.Read(System.Span{System.Single})">
            <summary>
            Reads the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.Attenuator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.Attenuator.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.BiQuadFilter">
            <summary>
            Provides a function of filtering with Digital BiQuad Filter.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},MonoAudio.Filters.BiQuadParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.BiQuadFilter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Parameter">
            <summary>
            Gets the parameter.
            </summary>
            <value>
            The parameter.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value>
              <c>true</c> if this instance can seek; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Filters.BiQuadFilter"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.BiQuadParameter">
            <summary>
            Represents a BiQuad filter parameters.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.BiQuadParameter"/> struct.
            </summary>
            <param name="b0">The b0.</param>
            <param name="b1">The b1.</param>
            <param name="b2">The b2.</param>
            <param name="a0">The a0.</param>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
        </member>
        <member name="F:MonoAudio.Filters.BiQuadParameter.B">
            <summary>
            The normalized B parameters.
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.BiQuadParameter.A">
            <summary>
            The normalized A parameters.
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.BiQuadParameter.HalfLn2">
            <summary>
            The half Math.Log10(2)/Math.Log10(Math.E) with Bit-Exact representation.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateLPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the LPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateHPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the HPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateAPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the APF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateBPFParameterFromQuality(System.Double,System.Double,System.Double,MonoAudio.Filters.BpfGainKind)">
            <summary>
            Creates the BPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="gainKind">Kind of the gain.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The kind of gain is invalid! - gainKind</exception>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateBPFParameterFromBandWidth(System.Double,System.Double,System.Double,MonoAudio.Filters.BpfGainKind)">
            <summary>
            Creates the BPF parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth.</param>
            <param name="gainKind">Kind of the gain.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The kind of gain is invalid! - gainKind</exception>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateNotchFilterParameterFromQuality(System.Double,System.Double,System.Double)">
            <summary>
            Creates the notch filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateNotchFilterParameterFromBandWidth(System.Double,System.Double,System.Double)">
            <summary>
            Creates the notch filter parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreatePeakingEqualizerParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the peaking equalizer parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreatePeakingEqualizerParameterFromBandWidth(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the peaking equalizer parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateLowShelfFilterParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the low shelf filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateLowShelfFilterParameterFromBandWidth(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the low shelf filter parameter from specified slope.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="slope">The slope in dB/Oct.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateHighShelfFilterParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the High shelf filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateHighShelfFilterParameterFromBandWidth(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the High shelf filter parameter from specified slope.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="slope">The slope in dB/Oct.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Filters.BpfGainKind">
            <summary>
            Represents a BPF gain kind.
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.BpfGainKind.ConstSkirt">
            <summary>
            Constant skirt gain.
            Peak gain = Q
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.BpfGainKind.ZeroDBPeakGain">
            <summary>
            Constant 0 dB peak gain.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.IAudioFilter`2">
            <summary>
            Defines a base infrastructure of an audio filter.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The format of the sample.</typeparam>
            <seealso cref="T:MonoAudio.Conversion.IAudioConverter`4" />
        </member>
        <member name="T:MonoAudio.Filters.SimpleMixer">
            <summary>
            Mixes the sound simply from some input nodes.
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.SimpleMixer.bufferWrapper">
            <summary>
            The buffer wrapper
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.SimpleMixer.#ctor(MonoAudio.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.SimpleMixer"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:MonoAudio.Filters.SimpleMixer.CanSeek">
            <summary>
            Gets a value indicating whether this instance supports seeking.
            </summary>
            <value>
              <c>true</c> if this instance can seek; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.SimpleMixer.Format">
            <summary>
            Gets the output format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.SimpleMixer.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="P:MonoAudio.Filters.SimpleMixer.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.SimpleMixer.AddSource(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Single,System.Boolean)">
            <summary>
            Adds the source.
            </summary>
            <param name="source">The source.</param>
            <param name="volume">The volume.</param>
            <param name="disposeSourceOnRemove">if set to <c>true</c> it disposes source on removal.</param>
        </member>
        <member name="M:MonoAudio.Filters.SimpleMixer.RemoveSource(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat})">
            <summary>
            Removes the source.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentException">The Mixer doesn't contain the specified <paramref name="source"/>! - source</exception>
        </member>
        <member name="M:MonoAudio.Filters.SimpleMixer.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Filters.SimpleMixer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.SimpleMixer.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Filters.SimpleMixer"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.SimpleMixer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.MixerEntry">
            <summary>
            Represents a <see cref="T:MonoAudio.Filters.SimpleMixer"/>'s entry.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.MixerEntry.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Single,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.MixerEntry"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="volume">The volume.</param>
            <param name="disposeSource">if set to <c>true</c> [dispose source].</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:MonoAudio.Filters.MixerEntry.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.MixerEntry.Volume">
            <summary>
            Gets or sets the volume.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.MixerEntry.DisposeSource">
            <summary>
            Gets a value indicating whether to dispose source in <see cref="M:MonoAudio.Filters.MixerEntry.Dispose"/>.
            </summary>
            <value>
              <c>true</c> to dispose source in <see cref="M:MonoAudio.Filters.MixerEntry.Dispose"/>; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.MixerEntry.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.MixerEntry.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Filters.MixerEntry"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.MixerEntry.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.StreamBuffer`2">
            <summary>
            Buffers the samples like YouTube does.<br/>
            It reads a little more than required, and prevents waiting for IOs / decoding.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.#ctor(MonoAudio.IReadableAudioSource{`0,`1},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.StreamBuffer`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="initialBlockSize">
            The 1/9 size of initial buffer in Frames(independent on the number of channel and the type of sample).<br/>
            The buffer is automatically extended if the internal buffer is smaller than the size of 3 reading buffers.
            </param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> should not be <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialBlockSize"/> should be larger than or equals to 0.</exception>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Filters.StreamBuffer`2"/> class.
            </summary>
        </member>
        <member name="T:MonoAudio.IAudioFormat`1">
            <summary>
            Defines a base structure of audio formats.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
        </member>
        <member name="P:MonoAudio.IAudioFormat`1.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.IAudioFormat`1.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.IAudioFormat`1.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="T:MonoAudio.Formats.IWaveFormat">
            <summary>
            Defines a base infrastructure of an wave format.
            </summary>
        </member>
        <member name="P:MonoAudio.Formats.IWaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.IWaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.IWaveFormat.ExtraSize">
            <summary>
            Gets the size of the extra information.
            </summary>
            <value>
            The size of the extra information.
            </value>
        </member>
        <member name="T:MonoAudio.SampleFormat">
            <summary>
            Represents a format of an sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.SampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.SampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.SampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.SampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.SampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.SampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="M:MonoAudio.SampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.Equals(MonoAudio.SampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.Equals(MonoAudio.IAudioFormat{System.Single})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.op_Equality(MonoAudio.SampleFormat,MonoAudio.SampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.SampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.SampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.SampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.op_Inequality(MonoAudio.SampleFormat,MonoAudio.SampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.SampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.SampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.SampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.WaveFormat">
            <summary>
            Represents a wave format.
            </summary>
            <seealso cref="T:MonoAudio.IAudioFormat`1" />
        </member>
        <member name="M:MonoAudio.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,MonoAudio.AudioEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.WaveFormat"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="channels">The channels.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:MonoAudio.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,MonoAudio.AudioEncoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.WaveFormat"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="channels">The channels.</param>
            <param name="encoding">The encoding.</param>
            <param name="extraSize">Size of the extra.</param>
        </member>
        <member name="P:MonoAudio.WaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.ExtraSize">
            <summary>
            Gets the size of the extra information.
            </summary>
            <value>
            The size of the extra information.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.WaveFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="M:MonoAudio.WaveFormat.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.Equals(MonoAudio.WaveFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.Equals(MonoAudio.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.op_Equality(MonoAudio.WaveFormat,MonoAudio.WaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.WaveFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.WaveFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.WaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.op_Inequality(MonoAudio.WaveFormat,MonoAudio.WaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.WaveFormat"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.WaveFormat"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.WaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.IAggregator`3">
            <summary>
            Defines a base infrastructure of a filter.
            </summary>
            <typeparam name="TSample"></typeparam>
            <typeparam name="TSource">The type of the aggregator.</typeparam>
            <typeparam name="TDestinationFormat">The format of output audio.</typeparam>
        </member>
        <member name="P:MonoAudio.IAggregator`3.BaseSource">
            <summary>
            Gets the base source.
            </summary>
            <value>
            The base source.
            </value>
        </member>
        <member name="T:MonoAudio.IAudioSource`2">
            <summary>
            Defines a base infrastructure for all audio sources.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.Capabilities.CapabilityInformation`1">
            <summary>
            Represents an information of the capability.
            </summary>
            <typeparam name="T">The type of containing information.</typeparam>
        </member>
        <member name="P:MonoAudio.IO.Capabilities.CapabilityInformation`1.Available">
            <summary>
            Gets a value indicating whether this <see cref="T:MonoAudio.IO.Capabilities.CapabilityInformation`1"/> is available.
            </summary>
            <value>
              <c>true</c> if available; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.IO.Capabilities.CapabilityInformation`1.NeedsTrialAndError">
            <summary>
            Gets a value indicating whether [needs trial and error].
            </summary>
            <value>
              <c>true</c> if [needs trial and error]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MonoAudio.IO.DataAvailableEventHandler">
            <summary>
            Represents an event handler that holds recorded audio data.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:MonoAudio.IO.DataAvailableEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:MonoAudio.IO.DataAvailableEventArgs">
            <summary>
            Represents an event arguments that holds recorded audio data.<br/>
            It is a <c>struct</c> which has <c>ref</c> and <c>readonly</c> modifier because the event occurs frequently and has a <see cref="T:System.Span`1"/> to deliver a raw buffer.<br/>
            <b>CAUTION! REF STRUCT! IT CANNOT BE STORED ON HEAPS!</b>
            </summary>
        </member>
        <member name="M:MonoAudio.IO.DataAvailableEventArgs.#ctor(System.Span{System.Byte},MonoAudio.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.IO.DataAvailableEventArgs" /> struct.
            </summary>
            <param name="data">The data.</param>
            <param name="format">The format.</param>
        </member>
        <member name="P:MonoAudio.IO.DataAvailableEventArgs.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:MonoAudio.IO.DataAvailableEventArgs.Format">
            <summary>
            Gets the format of the available <see cref="P:MonoAudio.IO.DataAvailableEventArgs.Data"/>.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="T:MonoAudio.IO.IAudioDevice">
            <summary>
            Defines a base structure of an audio device.
            </summary>
        </member>
        <member name="P:MonoAudio.IO.IAudioDevice.Name">
            <summary>
            Gets the name of this audio device.
            </summary>
            <value>
            The name of this audio device.
            </value>
        </member>
        <member name="T:MonoAudio.IO.ISoundIn">
            <summary>
            Defines a base infrastructure of a sound input.<br/>
            CAUTION! IT HAS SOME EVENT HANDLERS! IMPLEMENTERS MUST NOT FORGET TO RELEASE THEM!
            </summary>
        </member>
        <member name="E:MonoAudio.IO.ISoundIn.DataAvailable">
            <summary>
            Occurs when some data are available.
            </summary>
        </member>
        <member name="E:MonoAudio.IO.ISoundIn.Stopped">
            <summary>
            Occurs when the recording stopped.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundIn.Start">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundIn.Stop">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundIn.Initialize">
            <summary>
            Initializes the recorder.
            </summary>
        </member>
        <member name="P:MonoAudio.IO.ISoundIn.RecordingState">
            <summary>
            Gets the state of the recording.
            </summary>
            <value>
            The state of the recording.
            </value>
        </member>
        <member name="T:MonoAudio.IO.ISoundOut">
            <summary>
            Defines a base infrastructure of a sound output.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Play">
            <summary>
            Starts the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Pause">
            <summary>
            Pauses the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Resume">
            <summary>
            Resumes the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Stop">
            <summary>
            Stops the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Initialize(MonoAudio.IWaveSource)">
            <summary>
            Initializes the <see cref="T:MonoAudio.IO.ISoundOut"/> for playing a <paramref name="source"/>.
            </summary>
            <param name="source">The source to play.</param>
        </member>
        <member name="P:MonoAudio.IO.ISoundOut.PlaybackState">
            <summary>
            Gets the state of the playback.
            </summary>
            <value>
            The state of the playback.
            </value>
        </member>
        <member name="T:MonoAudio.IO.ISoundOutputDevice">
            <summary>
            Defines a base structure of an audio output device.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.PlaybackState">
            <summary>
            Represents a state of playback.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.PlaybackState.Stopped">
            <summary>
            The playback is stopped.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.PlaybackState.Playing">
            <summary>
            The playback is running.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.PlaybackState.Paused">
            <summary>
            The playback is paused.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.RecordingState">
            <summary>
            Represents a state of recording.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.RecordingState.Stopped">
            <summary>
            The recording is stopped.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.RecordingState.Recording">
            <summary>
            The recording is in progress.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.RecordingStoppedEventArgs">
            <summary>
            Represents an event arguments that tells you that the recording has (been) stopped and holds why.<br/>
            </summary>
            <seealso cref="T:MonoAudio.StoppedEventArgs" />
        </member>
        <member name="M:MonoAudio.IO.RecordingStoppedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.IO.RecordingStoppedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.RecordingStoppedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.IO.RecordingStoppedEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:MonoAudio.IReadableAudioSource`2">
            <summary>
            Defines a base infrastructure of a readable audio source.
            </summary>
            <typeparam name="TSample">The type of audio data.</typeparam>
            <typeparam name="TFormat">The format of audio data.</typeparam>
            <seealso cref="T:MonoAudio.IAudioSource`2" />
        </member>
        <member name="M:MonoAudio.IReadableAudioSource`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:MonoAudio.ISampleSource">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio source.
            </summary>
            <seealso cref="T:MonoAudio.IReadableAudioSource`2" />
        </member>
        <member name="T:MonoAudio.ISampleAggregator">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio filter.
            </summary>
            <seealso cref="T:MonoAudio.IAggregator`3" />
        </member>
        <member name="T:MonoAudio.IWaveSource">
            <summary>
            Defines a base infrastructure of a raw audio data source.
            </summary>
            <seealso cref="T:MonoAudio.IReadableAudioSource`2" />
        </member>
        <member name="T:MonoAudio.IWaveAggregator">
            <summary>
            Defines a base infrastructure of a raw audio data filter.
            </summary>
            <seealso cref="T:MonoAudio.IAggregator`3" />
        </member>
        <member name="T:MonoAudio.MathUtils.Fraction32">
            <summary>
            Represents a 32bit/32bit fractions.
            Supports high-precision arithmetics over fractions.
            Its total size is 64bit.
            </summary>
        </member>
        <member name="F:MonoAudio.MathUtils.Fraction32.Numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="F:MonoAudio.MathUtils.Fraction32.Denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="T:MonoAudio.MathUtils.MathHelper">
            <summary>
            Helps some calculations.
            </summary>
        </member>
        <member name="F:MonoAudio.MathUtils.MathHelper.DoublePI">
            <summary>
            The double pi.
            </summary>
        </member>
        <member name="M:MonoAudio.MathUtils.MathHelper.MinimizeDivisor(System.Int32,System.Int32)">
            <summary>
            Minimizes the divisor.
            </summary>
            <param name="mul">The multiplier.</param>
            <param name="div">The divisor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">div</exception>
        </member>
        <member name="M:MonoAudio.MathUtils.MathHelper.Gcd(System.Int32,System.Int32)">
            <summary>
            Calculates a greatest common divisor for <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Int24">
            <summary>
            An simple representation of 24bit signed integer.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:MonoAudio.Int24.MaxValue">
            <summary>
            Represents the largest possible value of an System.Int24. This field is constant.
            </summary>
        </member>
        <member name="F:MonoAudio.Int24.MinValue">
            <summary>
            Represents the smallest possible value of System.Int24. This field is constant.
            </summary>
        </member>
        <member name="M:MonoAudio.Int24.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Int24"/> struct.
            </summary>
            <param name="value">The source <see cref="T:System.Int32"/> value. Mask:0x807fffff</param>
        </member>
        <member name="M:MonoAudio.Int24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Int24"/> struct.
            </summary>
            <param name="head">The head.</param>
            <param name="middle">The middle.</param>
            <param name="tail">The tail.</param>
        </member>
        <member name="M:MonoAudio.Int24.op_Implicit(MonoAudio.Int24)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.Int24"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_Explicit(System.Int32)~MonoAudio.Int24">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:MonoAudio.Int24"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_Equality(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int24"/> objects are equal.
            </summary>
            <param name="int1">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_UnaryNegation(MonoAudio.Int24)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_Inequality(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int24"/> objects are not equal.
            </summary>
            <param name="int1">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if int1 and int2 are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_LessThan(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Determines whether one specified <see cref="T:MonoAudio.Int24"/> is less than another specified <see cref="T:MonoAudio.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_GreaterThan(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Determines whether one specified <see cref="T:MonoAudio.Int24"/> is greater than another specified <see cref="T:MonoAudio.Int24"/> value.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is greater than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_LessThanOrEqual(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:MonoAudio.Int24"/> is less than or equal to another specified <see cref="T:MonoAudio.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than or equal to right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_GreaterThanOrEqual(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Determines whether one specified <see cref="T:MonoAudio.Int24"/> is greater than or equal to another specified <see cref="T:MonoAudio.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if <see cref="T:MonoAudio.Int24"/> is greater than or equal to <see cref="T:MonoAudio.Int24"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.ReverseEndianness(MonoAudio.Int24)">
            <summary>
            Reverses endianness of the given <see cref="T:MonoAudio.Int24"/> value.
            </summary>
            <param name="value">The value to reverse endianness.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Int24.CompareTo(MonoAudio.Int24)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:MonoAudio.Int24"/> value and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified <see cref="T:MonoAudio.Int24"/> value.
            </summary>
            <param name="other">The <see cref="T:MonoAudio.Int24"/> to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the other parameter.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.Equals(MonoAudio.Int24)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:MonoAudio.OffsetSByte">
            <summary>
            Represents a value that is offset 128 inside 8-bit PCM.
            </summary>
        </member>
        <member name="M:MonoAudio.OffsetSByte.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.OffsetSByte"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_Implicit(MonoAudio.OffsetSByte)~System.SByte">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.OffsetSByte"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:MonoAudio.StoppedEventArgs">
            <summary>
            Represents an event arguments that tells you that something has (been) stopped and holds why.<br/>
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:MonoAudio.StoppedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.StoppedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.StoppedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.StoppedEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:MonoAudio.StoppedEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:MonoAudio.StoppedEventArgs.HasError">
            <summary>
            Gets a value indicating whether this instance has error.
            </summary>
            <value>
              <c>true</c> if this instance has error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MonoAudio.Synthesis.SinusoidSource">
            <summary>
            Generates a sinusoid wave with specified frequency.
            </summary>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.#ctor(MonoAudio.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Synthesis.SinusoidSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.Read(System.Span{System.Single})">
            <summary>
            Reads the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Utils.ResizableBufferWrapper`1">
            <summary>
            Provides a Buffer wrapper.
            </summary>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Utils.ResizableBufferWrapper`1"/> class.
            </summary>
        </member>
        <member name="P:MonoAudio.Utils.ResizableBufferWrapper`1.CurrentSizeInBytes">
            <summary>
            Gets the current size in bytes.
            </summary>
            <value>
            The current size in bytes.
            </value>
        </member>
        <member name="P:MonoAudio.Utils.ResizableBufferWrapper`1.ActualBuffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="P:MonoAudio.Utils.ResizableBufferWrapper`1.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.Resize(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in <typeparamref name="T"/>.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.ResizeInternal(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in bytes.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.DisposeInternal(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Utils.ResizableBufferWrapper`1"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Utils.ResizablePooledBufferWrapper`1">
            <summary>
            Provides a Buffer wrapper.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:MonoAudio.Utils.ResizableBufferWrapper`1" />
        </member>
        <member name="M:MonoAudio.Utils.ResizablePooledBufferWrapper`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Utils.ResizablePooledBufferWrapper`1"/> class.
            </summary>
            <param name="initialSize">The initial size in <typeparamref name="T"/>.</param>
        </member>
        <member name="P:MonoAudio.Utils.ResizablePooledBufferWrapper`1.ActualBuffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="M:MonoAudio.Utils.ResizablePooledBufferWrapper`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizablePooledBufferWrapper`1.ResizeInternal(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in bytes.</param>
        </member>
        <member name="T:System.ThrowHelper">
            <summary>
            Helps throwing exceptions while in-lining aggressively.
            </summary>
        </member>
        <member name="M:System.ThrowHelper.Throw``1(``0)">
            <summary>
            Throws the specified exception.
            </summary>
            <typeparam name="T">The type of exception.</typeparam>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:System.MathI">
            <summary>
            Provides constants and static methods for bitwise, arithmetic, and other common mathematical functions.
            </summary>
            <summary>
            Provides constants and static methods for bitwise, arithmetic, and other common mathematical functions.
            </summary>
        </member>
        <member name="M:System.MathI.FloorStep(System.Int32,System.Int32)">
            <summary>
            Aligns the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathI.FloorStepRem(System.Int32,System.Int32)">
            <summary>
            Aligns the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="T:System.SpanExtensions">
            <summary>
            Provides some extension functions.
            </summary>
            <summary>
            Provides some extension functions.
            </summary>
        </member>
        <member name="M:System.SpanExtensions.FastAdd(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            Adds the <paramref name="samplesToAdd"/> to <paramref name="buffer"/>.
            </summary>
            <param name="samplesToAdd">The samples to add.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentException">samplesToAdd</exception>
        </member>
        <member name="M:System.SpanExtensions.FastScalarMultiply(System.Span{System.Single},System.Single)">
            <summary>
            Multiplies the specified samples faster, with the given <paramref name="scale"/>.
            </summary>
            <param name="span">The span to multiply.</param>
            <param name="scale">The value to be multiplied.</param>
        </member>
        <member name="M:System.SpanExtensions.FastMix(System.ReadOnlySpan{System.Single},System.Span{System.Single},System.Single)">
            <summary>
            Mixes the <paramref name="samplesToMix"/> to <paramref name="buffer"/>.
            </summary>
            <param name="samplesToMix">The samples to add.</param>
            <param name="buffer">The buffer.</param>
            <param name="scale">The scale to scale <paramref name="samplesToMix"/>.</param>
            <exception cref="T:System.ArgumentException">samplesToMix</exception>
        </member>
        <member name="M:System.SpanExtensions.FastMix(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Single,System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Mixes the <paramref name="samplesA"/> and <paramref name="samplesB"/> to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="samplesA">The samples a.</param>
            <param name="volumeA">The volume of <paramref name="samplesA"/>.</param>
            <param name="samplesB">The samples b.</param>
            <param name="volumeB">The volume of <paramref name="samplesB"/>.</param>
            <exception cref="T:System.ArgumentException">
            buffer must not be shorter than samplesA or samplesB! - buffer
            or
            samplesA must be as long as samplesB! - samplesA
            </exception>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Single},System.Single)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Double},System.Double)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Byte},System.Byte)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.UInt16},System.UInt16)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.UInt32},System.UInt32)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.UInt64},System.UInt64)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.SByte},System.SByte)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Int16},System.Int16)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Int32},System.Int32)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Int64},System.Int64)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the <paramref name="span"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhile``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the <paramref name="span"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Span{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Span{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.Memory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="memory"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhile``1(System.Memory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="memory"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Memory{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Memory{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Memory{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlySpan"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhile``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.ReadOnlyMemory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhile``1(System.ReadOnlyMemory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.CopyTo``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.Memory`1"/> into a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.Memory`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.CopyTo``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.ReadOnlyMemory`1"/> into a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlyMemory`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.CopyTo``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.Span`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.CopyTo``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.ReadOnlySpan`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.TryCopyTo``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Attempts to copy the current <see cref="T:System.Memory`1"/> to a destination <see cref="T:System.Span`1"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.Memory`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns><c>true</c> if the copy operation succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.SpanExtensions.TryCopyTo``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Attempts to copy the current <see cref="T:System.ReadOnlyMemory`1"/> to a destination <see cref="T:System.Span`1"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlyMemory`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns><c>true</c> if the copy operation succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.SpanExtensions.TryCopyTo``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Copies the contents of current <see cref="T:System.Span`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.TryCopyTo``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Copies the contents of current <see cref="T:System.ReadOnlySpan`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns></returns>
        </member>
        <member name="T:System.Numerics.Vector5">
            <summary>
            Represents a vector that has 5 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector5.Front">
            <summary>
            The front 2 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector5.Back">
            <summary>
            The back 3 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Numerics.Vector2,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="two">The front two values.</param>
            <param name="three">The back three values.</param>
        </member>
        <member name="M:System.Numerics.Vector5.op_UnaryNegation(System.Numerics.Vector5)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Addition(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Subtraction(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Division(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Numerics.Vector5,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Single,System.Numerics.Vector5)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Division(System.Numerics.Vector5,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Equality(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Inequality(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.Equals(System.Numerics.Vector5)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector6">
            <summary>
            Represents a vector that has 6 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector6.Front">
            <summary>
            The front 3 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector6.Back">
            <summary>
            The back 3 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Numerics.Vector3,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="front">The front three values.</param>
            <param name="back">The back three values.</param>
        </member>
        <member name="M:System.Numerics.Vector6.op_UnaryNegation(System.Numerics.Vector6)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Addition(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Subtraction(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Division(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Numerics.Vector6,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Single,System.Numerics.Vector6)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Division(System.Numerics.Vector6,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Equality(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Inequality(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.Equals(System.Numerics.Vector6)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector7">
            <summary>
            Represents a vector that has 7 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value7">
            <summary>
            The seventh value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector7.Front">
            <summary>
            The front 3 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector7.Back">
            <summary>
            The back 4 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Numerics.Vector3,System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="front">The front three values.</param>
            <param name="back">The back four values.</param>
        </member>
        <member name="M:System.Numerics.Vector7.op_UnaryNegation(System.Numerics.Vector7)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Addition(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Subtraction(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Division(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Numerics.Vector7,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Single,System.Numerics.Vector7)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Division(System.Numerics.Vector7,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Equality(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Inequality(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.Equals(System.Numerics.Vector7)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector8">
            <summary>
            Represents a vector that has 8 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value7">
            <summary>
            The seventh value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value8">
            <summary>
            The eighth value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector8.Front">
            <summary>
            The front 4 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector8.Back">
            <summary>
            The back 4 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="front">The front four values.</param>
            <param name="back">The back four values.</param>
        </member>
        <member name="M:System.Numerics.Vector8.op_UnaryNegation(System.Numerics.Vector8)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Addition(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Subtraction(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Division(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Numerics.Vector8,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Single,System.Numerics.Vector8)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Division(System.Numerics.Vector8,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Equality(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Inequality(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.Equals(System.Numerics.Vector8)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
    </members>
</doc>

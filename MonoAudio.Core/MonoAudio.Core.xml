<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoAudio.Core</name>
    </assembly>
    <members>
        <member name="T:MonoAudio.AudioEncoding">
            <summary>
                Defines all known encoding types. Primary used in the <see cref="T:MonoAudio.Formats.WaveFormat" /> class. See
                <see cref="P:MonoAudio.Formats.WaveFormat.Encoding" />.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Unknown">
            <summary>WAVE_FORMAT_UNKNOWN,	Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Pcm">
            <summary>WAVE_FORMAT_PCM		Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Adpcm">
            <summary>WAVE_FORMAT_ADPCM		Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IeeeFloat">
            <summary>WAVE_FORMAT_IEEE_FLOAT Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vselp">
            <summary>WAVE_FORMAT_VSELP		Compaq Computer Corp.</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IbmCvsd">
            <summary>WAVE_FORMAT_IBM_CVSD	IBM Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ALaw">
            <summary>WAVE_FORMAT_ALAW		Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MuLaw">
            <summary>WAVE_FORMAT_MULAW		Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Dts">
            <summary>WAVE_FORMAT_DTS		Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Drm">
            <summary>WAVE_FORMAT_DRM		Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WmaVoice9">
            <summary>WAVE_FORMAT_WMAVOICE9 </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.OkiAdpcm">
            <summary>WAVE_FORMAT_OKI_ADPCM	OKI</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DviAdpcm">
            <summary>WAVE_FORMAT_DVI_ADPCM	Intel Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ImaAdpcm">
            <summary>WAVE_FORMAT_IMA_ADPCM  Intel Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MediaspaceAdpcm">
            <summary>WAVE_FORMAT_MEDIASPACE_ADPCM Videologic</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.SierraAdpcm">
            <summary>WAVE_FORMAT_SIERRA_ADPCM Sierra Semiconductor Corp </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G723Adpcm">
            <summary>WAVE_FORMAT_G723_ADPCM Antex Electronics Corporation </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DigiStd">
            <summary>WAVE_FORMAT_DIGISTD DSP Solutions, Inc.</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DigiFix">
            <summary>WAVE_FORMAT_DIGIFIX DSP Solutions, Inc.</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DialogicOkiAdpcm">
            <summary>WAVE_FORMAT_DIALOGIC_OKI_ADPCM Dialogic Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MediaVisionAdpcm">
            <summary>WAVE_FORMAT_MEDIAVISION_ADPCM Media Vision, Inc.</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CUCodec">
            <summary>WAVE_FORMAT_CU_CODEC Hewlett-Packard Company </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.YamahaAdpcm">
            <summary>WAVE_FORMAT_YAMAHA_ADPCM Yamaha Corporation of America</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.SonarC">
            <summary>WAVE_FORMAT_SONARC Speech Compression</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DspGroupTrueSpeech">
            <summary>WAVE_FORMAT_DSPGROUP_TRUESPEECH DSP Group, Inc </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.EchoSpeechCorporation1">
            <summary>WAVE_FORMAT_ECHOSC1 Echo Speech Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AudioFileAf36">
            <summary>WAVE_FORMAT_AUDIOFILE_AF36, Virtual Music, Inc.</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Aptx">
            <summary>WAVE_FORMAT_APTX Audio Processing Technology</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AudioFileAf10">
            <summary>WAVE_FORMAT_AUDIOFILE_AF10, Virtual Music, Inc.</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Prosody1612">
            <summary>WAVE_FORMAT_PROSODY_1612, Aculab plc</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Lrc">
            <summary>WAVE_FORMAT_LRC, Merging Technologies S.A. </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DolbyAc2">
            <summary>WAVE_FORMAT_DOLBY_AC2, Dolby Laboratories</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Gsm610">
            <summary>WAVE_FORMAT_GSM610, Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MsnAudio">
            <summary>WAVE_FORMAT_MSNAUDIO, Microsoft Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AntexAdpcme">
            <summary>WAVE_FORMAT_ANTEX_ADPCME, Antex Electronics Corporation</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ControlResVqlpc">
            <summary>WAVE_FORMAT_CONTROL_RES_VQLPC, Control Resources Limited </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DigiReal">
            <summary>WAVE_FORMAT_DIGIREAL, DSP Solutions, Inc. </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DigiAdpcm">
            <summary>WAVE_FORMAT_DIGIADPCM, DSP Solutions, Inc.</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ControlResCr10">
            <summary>WAVE_FORMAT_CONTROL_RES_CR10, Control Resources Limited</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_NMS_VBXADPCM">
            <summary>WAVE_FORMAT_NMS_VBXADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_CS_IMAADPCM">
            <summary>WAVE_FORMAT_CS_IMAADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ECHOSC3">
            <summary>WAVE_FORMAT_ECHOSC3</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ROCKWELL_ADPCM">
            <summary>WAVE_FORMAT_ROCKWELL_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ROCKWELL_DIGITALK">
            <summary>WAVE_FORMAT_ROCKWELL_DIGITALK</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_XEBEC">
            <summary>WAVE_FORMAT_XEBEC</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_G721_ADPCM">
            <summary>WAVE_FORMAT_G721_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_G728_CELP">
            <summary>WAVE_FORMAT_G728_CELP</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_MSG723">
            <summary>WAVE_FORMAT_MSG723</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Mpeg">
            <summary>WAVE_FORMAT_MPEG, Microsoft Corporation </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_RT24">
            <summary>WAVE_FORMAT_RT24</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_PAC">
            <summary>WAVE_FORMAT_PAC</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MpegLayer3">
            <summary>WAVE_FORMAT_MPEGLAYER3, ISO/MPEG Layer3 Format Tag </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_LUCENT_G723">
            <summary>WAVE_FORMAT_LUCENT_G723</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_CIRRUS">
            <summary>WAVE_FORMAT_CIRRUS</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ESPCM">
            <summary>WAVE_FORMAT_ESPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE">
            <summary>WAVE_FORMAT_VOXWARE</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_CANOPUS_ATRAC">
            <summary>WAVE_FORMAT_CANOPUS_ATRAC</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_G726_ADPCM">
            <summary>WAVE_FORMAT_G726_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_G722_ADPCM">
            <summary>WAVE_FORMAT_G722_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_DSAT_DISPLAY">
            <summary>WAVE_FORMAT_DSAT_DISPLAY</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_BYTE_ALIGNED">
            <summary>WAVE_FORMAT_VOXWARE_BYTE_ALIGNED</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_AC8">
            <summary>WAVE_FORMAT_VOXWARE_AC8</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_AC10">
            <summary>WAVE_FORMAT_VOXWARE_AC10</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_AC16">
            <summary>WAVE_FORMAT_VOXWARE_AC16</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_AC20">
            <summary>WAVE_FORMAT_VOXWARE_AC20</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_RT24">
            <summary>WAVE_FORMAT_VOXWARE_RT24</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_RT29">
            <summary>WAVE_FORMAT_VOXWARE_RT29</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_RT29HW">
            <summary>WAVE_FORMAT_VOXWARE_RT29HW</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_VR12">
            <summary>WAVE_FORMAT_VOXWARE_VR12</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_VR18">
            <summary>WAVE_FORMAT_VOXWARE_VR18</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_TQ40">
            <summary>WAVE_FORMAT_VOXWARE_TQ40</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SOFTSOUND">
            <summary>WAVE_FORMAT_SOFTSOUND</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VOXWARE_TQ60">
            <summary>WAVE_FORMAT_VOXWARE_TQ60</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_MSRT24">
            <summary>WAVE_FORMAT_MSRT24</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_G729A">
            <summary>WAVE_FORMAT_G729A</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_MVI_MVI2">
            <summary>WAVE_FORMAT_MVI_MVI2</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_DF_G726">
            <summary>WAVE_FORMAT_DF_G726</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_DF_GSM610">
            <summary>WAVE_FORMAT_DF_GSM610</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ISIAUDIO">
            <summary>WAVE_FORMAT_ISIAUDIO</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ONLIVE">
            <summary>WAVE_FORMAT_ONLIVE</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SBC24">
            <summary>WAVE_FORMAT_SBC24</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_DOLBY_AC3_SPDIF">
            <summary>WAVE_FORMAT_DOLBY_AC3_SPDIF</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_MEDIASONIC_G723">
            <summary>WAVE_FORMAT_MEDIASONIC_G723</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_PROSODY_8KBPS">
            <summary>WAVE_FORMAT_PROSODY_8KBPS</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ZYXEL_ADPCM">
            <summary>WAVE_FORMAT_ZYXEL_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_PHILIPS_LPCBB">
            <summary>WAVE_FORMAT_PHILIPS_LPCBB</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_PACKED">
            <summary>WAVE_FORMAT_PACKED</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_MALDEN_PHONYTALK">
            <summary>WAVE_FORMAT_MALDEN_PHONYTALK</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Gsm">
            <summary>WAVE_FORMAT_GSM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G729">
            <summary>WAVE_FORMAT_G729</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G723">
            <summary>WAVE_FORMAT_G723</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Acelp">
            <summary>WAVE_FORMAT_ACELP</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RawAac">
            <summary>
                WAVE_FORMAT_RAW_AAC1
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_RHETOREX_ADPCM">
            <summary>WAVE_FORMAT_RHETOREX_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_IRAT">
            <summary>WAVE_FORMAT_IRAT</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VIVO_G723">
            <summary>WAVE_FORMAT_VIVO_G723</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VIVO_SIREN">
            <summary>WAVE_FORMAT_VIVO_SIREN</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_DIGITAL_G723">
            <summary>WAVE_FORMAT_DIGITAL_G723</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SANYO_LD_ADPCM">
            <summary>WAVE_FORMAT_SANYO_LD_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SIPROLAB_ACEPLNET">
            <summary>WAVE_FORMAT_SIPROLAB_ACEPLNET</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SIPROLAB_ACELP4800">
            <summary>WAVE_FORMAT_SIPROLAB_ACELP4800</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SIPROLAB_ACELP8V3">
            <summary>WAVE_FORMAT_SIPROLAB_ACELP8V3</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SIPROLAB_G729">
            <summary>WAVE_FORMAT_SIPROLAB_G729</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SIPROLAB_G729A">
            <summary>WAVE_FORMAT_SIPROLAB_G729A</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SIPROLAB_KELVIN">
            <summary>WAVE_FORMAT_SIPROLAB_KELVIN</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_G726ADPCM">
            <summary>WAVE_FORMAT_G726ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_QUALCOMM_PUREVOICE">
            <summary>WAVE_FORMAT_QUALCOMM_PUREVOICE</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_QUALCOMM_HALFRATE">
            <summary>WAVE_FORMAT_QUALCOMM_HALFRATE</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_TUBGSM">
            <summary>WAVE_FORMAT_TUBGSM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_MSAUDIO1">
            <summary>WAVE_FORMAT_MSAUDIO1</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WindowsMediaAudio">
            <summary>
                Windows Media Audio, WAVE_FORMAT_WMAUDIO2, Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WindowsMediaAudioProfessional">
            <summary>
                Windows Media Audio Professional WAVE_FORMAT_WMAUDIO3, Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WindowsMediaAudioLosseless">
            <summary>
                Windows Media Audio Lossless, WAVE_FORMAT_WMAUDIO_LOSSLESS
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WindowsMediaAudioSpdif">
            <summary>
                Windows Media Audio Professional over SPDIF WAVE_FORMAT_WMASPDIF (0x0164)
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_UNISYS_NAP_ADPCM">
            <summary>WAVE_FORMAT_UNISYS_NAP_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_UNISYS_NAP_ULAW">
            <summary>WAVE_FORMAT_UNISYS_NAP_ULAW</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_UNISYS_NAP_ALAW">
            <summary>WAVE_FORMAT_UNISYS_NAP_ALAW</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_UNISYS_NAP_16K">
            <summary>WAVE_FORMAT_UNISYS_NAP_16K</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_CREATIVE_ADPCM">
            <summary>WAVE_FORMAT_CREATIVE_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH8">
            <summary>WAVE_FORMAT_CREATIVE_FASTSPEECH8</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_CREATIVE_FASTSPEECH10">
            <summary>WAVE_FORMAT_CREATIVE_FASTSPEECH10</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_UHER_ADPCM">
            <summary>WAVE_FORMAT_UHER_ADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_QUARTERDECK">
            <summary>WAVE_FORMAT_QUARTERDECK</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ILINK_VC">
            <summary>WAVE_FORMAT_ILINK_VC</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_RAW_SPORT">
            <summary>WAVE_FORMAT_RAW_SPORT</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_ESST_AC3">
            <summary>WAVE_FORMAT_ESST_AC3</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_IPI_HSX">
            <summary>WAVE_FORMAT_IPI_HSX</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_IPI_RPELP">
            <summary>WAVE_FORMAT_IPI_RPELP</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_CS2">
            <summary>WAVE_FORMAT_CS2</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SONY_SCX">
            <summary>WAVE_FORMAT_SONY_SCX</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_FM_TOWNS_SND">
            <summary>WAVE_FORMAT_FM_TOWNS_SND</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_BTV_DIGITAL">
            <summary>WAVE_FORMAT_BTV_DIGITAL</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_QDESIGN_MUSIC">
            <summary>WAVE_FORMAT_QDESIGN_MUSIC</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_VME_VMPCM">
            <summary>WAVE_FORMAT_VME_VMPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_TPC">
            <summary>WAVE_FORMAT_TPC</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_OLIGSM">
            <summary>WAVE_FORMAT_OLIGSM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_OLIADPCM">
            <summary>WAVE_FORMAT_OLIADPCM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_OLICELP">
            <summary>WAVE_FORMAT_OLICELP</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_OLISBC">
            <summary>WAVE_FORMAT_OLISBC</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_OLIOPR">
            <summary>WAVE_FORMAT_OLIOPR</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_LH_CODEC">
            <summary>WAVE_FORMAT_LH_CODEC</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_NORRIS">
            <summary>WAVE_FORMAT_NORRIS</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS">
            <summary>WAVE_FORMAT_SOUNDSPACE_MUSICOMPRESS</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MPEG_ADTS_AAC">
            <summary>
                Advanced Audio Coding (AAC) audio in Audio Data Transport Stream (ADTS) format.
                The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_ADTS_AAC.
            </summary>
            <remarks>
                The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels,
                prior to applying spectral band replication (SBR) or parametric stereo (PS) tools, if present.
                No additional data is required after the WAVEFORMATEX structure.
            </remarks>
            <see>http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx</see>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MPEG_RAW_AAC">
            <summary>MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MPEG_LOAS">
            <summary>
                MPEG-4 audio transport stream with a synchronization layer (LOAS) and a multiplex layer (LATM).
                The format block is a WAVEFORMATEX structure with wFormatTag equal to WAVE_FORMAT_MPEG_LOAS.
                See <see href="http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx"/>.
            </summary>
            <remarks>
                The WAVEFORMATEX structure specifies the core AAC-LC sample rate and number of channels,
                prior to applying spectral SBR or PS tools, if present.
                No additional data is required after the WAVEFORMATEX structure.
            </remarks>
        </member>
        <member name="F:MonoAudio.AudioEncoding.NOKIA_MPEG_ADTS_AAC">
            <summary>NOKIA_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:MonoAudio.AudioEncoding.NOKIA_MPEG_RAW_AAC">
            <summary>NOKIA_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VODAFONE_MPEG_ADTS_AAC">
            <summary>VODAFONE_MPEG_ADTS_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VODAFONE_MPEG_RAW_AAC">
            <summary>VODAFONE_MPEG_RAW_AAC</summary>
            <remarks>Source wmCodec.h</remarks>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MPEG_HEAAC">
            <summary>
                High-Efficiency Advanced Audio Coding (HE-AAC) stream.
                The format block is an HEAACWAVEFORMAT structure. See <see href="http://msdn.microsoft.com/en-us/library/dd317599%28VS.85%29.aspx"/>.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_DVM">
            <summary>WAVE_FORMAT_DVM</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vorbis1">
            <summary>WAVE_FORMAT_VORBIS1 "Og" Original stream compatible</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vorbis2">
            <summary>WAVE_FORMAT_VORBIS2 "Pg" Have independent header</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vorbis3">
            <summary>WAVE_FORMAT_VORBIS3 "Qg" Have no codebook header</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vorbis1P">
            <summary>WAVE_FORMAT_VORBIS1P "og" Original stream compatible</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vorbis2P">
            <summary>WAVE_FORMAT_VORBIS2P "pg" Have independent headere</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vorbis3P">
            <summary>WAVE_FORMAT_VORBIS3P "qg" Have no codebook header</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_RAW_AAC1">
            <summary>
                Raw AAC1
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_WMAVOICE9">
            <summary>
                Windows Media Audio Voice (WMA Voice)
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Extensible">
            <summary>Extensible</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_DEVELOPMENT">
            <summary>WAVE_FORMAT_DEVELOPMENT</summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.WAVE_FORMAT_FLAC">
            <summary>
            FLAC
            </summary>
        </member>
        <member name="T:MonoAudio.Conversion.IAudioConverter`4">
            <summary>
            The base definition of some audio converters.
            </summary>
            <typeparam name="TFrom">The type to convert from.</typeparam>
            <typeparam name="TFromFormat"></typeparam>
            <typeparam name="TTo">The type to convert data to.</typeparam>
            <typeparam name="TToFormat"></typeparam>
        </member>
        <member name="P:MonoAudio.Conversion.IAudioConverter`4.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="T:MonoAudio.Conversion.Resampling.IResampler`2">
            <summary>
            Defines a base infrastructure of an resampler.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The format of the sample.</typeparam>
            <seealso cref="T:MonoAudio.Conversion.IAudioConverter`4" />
        </member>
        <member name="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase">
            <summary>
            The base of resampler.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.Resampling.IResampler`2" />
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.Formats.SampleFormat},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destinationSampleRate">The destination sample rate.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">destinationSampleRate</exception>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value>
              <c>true</c> if this instance can seek; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Read(System.Span{System.Single})">
            <summary>
            Reads the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.ActualDispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Dispose">
            <summary>
            Releases all resource used by the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> object.
            </summary>
            <remarks>Call <see cref="M:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Dispose"/> when you are finished using the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/>. The <see cref="M:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Dispose"/>
            method leaves the <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> in an
            unusable state. After calling <see cref="M:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase.Dispose"/>, you must release all references to the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> so the garbage collector can
            reclaim the memory that the <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/>
            was occupying.</remarks>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter">
            <summary>
            Converts Sample to 32-bit IeeeFloat PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.Formats.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter">
            <summary>
            Converts samples to 16-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.Formats.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> does the 16-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter">
            <summary>
            Converts samples to 24-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.Formats.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter"/> does the 24-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter">
            <summary>
            Converts samples to 32-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.Formats.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter"/> does the 32-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter">
            <summary>
            Converts samples to 8-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.Formats.SampleFormat},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.AccuracyMode"/> when <c>true</c>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter"/> does the 8-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase">
            <summary>
            Converts samples to wave data.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2" /> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2" /> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2" /> lasts in samples.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="F:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.Formats.SampleFormat},MonoAudio.Formats.IWaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter">
            <summary>
            Converts 32-bit IeeeFloat PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter">
            <summary>
            Converts 16-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter">
            <summary>
            Converts 24-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter">
            <summary>
            Converts 32-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter">
            <summary>
            Converts 8-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase">
            <summary>
            Converts wave data to samples.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2" /> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2" /> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2" /> lasts in samples.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="F:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.Formats.IWaveFormat},MonoAudio.Formats.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Endianness">
            <summary>
            Represents an endianness.
            </summary>
        </member>
        <member name="F:MonoAudio.Endianness.Little">
            <summary>
            The little endian
            </summary>
        </member>
        <member name="F:MonoAudio.Endianness.Big">
            <summary>
            The big endian
            </summary>
        </member>
        <member name="T:MonoAudio.Extensions.EndiannessExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="F:MonoAudio.Extensions.EndiannessExtensions.EnvironmentEndianness">
            <summary>
            Gets the environment's endianness.
            </summary>
            <value>
            The environment endianness.
            </value>
        </member>
        <member name="T:MonoAudio.Formats.IAudioFormat`1">
            <summary>
            Defines a base structure of audio formats.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
        </member>
        <member name="P:MonoAudio.Formats.IAudioFormat`1.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.IAudioFormat`1.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.IAudioFormat`1.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Formats.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="T:MonoAudio.Formats.IWaveFormat">
            <summary>
            Defines a base infrastructure of an wave format.
            </summary>
        </member>
        <member name="P:MonoAudio.Formats.IWaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:MonoAudio.Formats.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.IWaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.IWaveFormat.ExtraSize">
            <summary>
            Gets the size of the extra information.
            </summary>
            <value>
            The size of the extra information.
            </value>
        </member>
        <member name="T:MonoAudio.Formats.SampleFormat">
            <summary>
            Represents a format of an sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.Formats.SampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Formats.SampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.Formats.SampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.SampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.SampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Formats.SampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="M:MonoAudio.Formats.SampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Formats.SampleFormat.Equals(MonoAudio.Formats.SampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Formats.SampleFormat.Equals(MonoAudio.Formats.IAudioFormat{System.Single})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Formats.SampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.Formats.SampleFormat.op_Equality(MonoAudio.Formats.SampleFormat,MonoAudio.Formats.SampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Formats.SampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Formats.SampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Formats.SampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Formats.SampleFormat.op_Inequality(MonoAudio.Formats.SampleFormat,MonoAudio.Formats.SampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Formats.SampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Formats.SampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Formats.SampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Formats.WaveFormat">
            <summary>
            Represents a wave format.
            </summary>
            <seealso cref="T:MonoAudio.Formats.IAudioFormat`1" />
        </member>
        <member name="M:MonoAudio.Formats.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,MonoAudio.AudioEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Formats.WaveFormat"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="channels">The channels.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:MonoAudio.Formats.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,MonoAudio.AudioEncoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Formats.WaveFormat"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="channels">The channels.</param>
            <param name="encoding">The encoding.</param>
            <param name="extraSize">Size of the extra.</param>
        </member>
        <member name="P:MonoAudio.Formats.WaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:MonoAudio.Formats.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.WaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.WaveFormat.ExtraSize">
            <summary>
            Gets the size of the extra information.
            </summary>
            <value>
            The size of the extra information.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.WaveFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.WaveFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.WaveFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Formats.WaveFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="M:MonoAudio.Formats.WaveFormat.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Formats.WaveFormat.Equals(MonoAudio.Formats.WaveFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Formats.WaveFormat.Equals(MonoAudio.Formats.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Formats.WaveFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.Formats.WaveFormat.op_Equality(MonoAudio.Formats.WaveFormat,MonoAudio.Formats.WaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Formats.WaveFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Formats.WaveFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Formats.WaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Formats.WaveFormat.op_Inequality(MonoAudio.Formats.WaveFormat,MonoAudio.Formats.WaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Formats.WaveFormat"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Formats.WaveFormat"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Formats.WaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.IAggregator`3">
            <summary>
            Defines a base infrastructure of a filter.
            </summary>
            <typeparam name="TSample"></typeparam>
            <typeparam name="TSource">The type of the aggregator.</typeparam>
            <typeparam name="TDestinationFormat">The format of output audio.</typeparam>
        </member>
        <member name="P:MonoAudio.IAggregator`3.BaseSource">
            <summary>
            Gets the base source.
            </summary>
            <value>
            The base source.
            </value>
        </member>
        <member name="T:MonoAudio.IAudioSource`2">
            <summary>
            Defines a base infrastructure for all audio sources.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="T:MonoAudio.IReadableAudioSource`2">
            <summary>
            Defines a base infrastructure of a readable audio source.
            </summary>
            <typeparam name="TSample">The type of audio data.</typeparam>
            <typeparam name="TFormat">The format of audio data.</typeparam>
            <seealso cref="T:MonoAudio.IAudioSource`2" />
        </member>
        <member name="M:MonoAudio.IReadableAudioSource`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:MonoAudio.ISampleSource">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio source.
            </summary>
            <seealso cref="T:MonoAudio.IReadableAudioSource`2" />
        </member>
        <member name="T:MonoAudio.ISampleAggregator">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio filter.
            </summary>
            <seealso cref="T:MonoAudio.IAggregator`3" />
        </member>
        <member name="T:MonoAudio.IWaveSource">
            <summary>
            Defines a base infrastructure of a raw audio data source.
            </summary>
            <seealso cref="T:MonoAudio.IReadableAudioSource`2" />
        </member>
        <member name="T:MonoAudio.IWaveAggregator">
            <summary>
            Defines a base infrastructure of a raw audio data filter.
            </summary>
            <seealso cref="T:MonoAudio.IAggregator`3" />
        </member>
        <member name="T:MonoAudio.MathUtils.Fraction32">
            <summary>
            Represents a 32bit/32bit fractions.
            Supports high-precision arithmetics over fractions.
            Its total size is 64bit.
            </summary>
        </member>
        <member name="F:MonoAudio.MathUtils.Fraction32.Numerator">
            <summary>
            The numerator.
            </summary>
        </member>
        <member name="F:MonoAudio.MathUtils.Fraction32.Denominator">
            <summary>
            The denominator.
            </summary>
        </member>
        <member name="T:MonoAudio.MathUtils.MathHelper">
            <summary>
            Helps some calculations.
            </summary>
        </member>
        <member name="M:MonoAudio.MathUtils.MathHelper.MinimizeDivisor(System.Int32,System.Int32)">
            <summary>
            Minimizes the divisor.
            </summary>
            <param name="mul">The multiplier.</param>
            <param name="div">The divisor.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException">div</exception>
        </member>
        <member name="M:MonoAudio.MathUtils.MathHelper.Gcd(System.Int32,System.Int32)">
            <summary>
            Calculates a greatest common divisor for <paramref name="a"/> and <paramref name="b"/>.
            </summary>
            <param name="a">a.</param>
            <param name="b">The b.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Samples.OffsetSByte">
            <summary>
            Represents a value that is offset 128 inside 8-bit PCM.
            </summary>
        </member>
        <member name="M:MonoAudio.Samples.OffsetSByte.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Samples.OffsetSByte"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:MonoAudio.Samples.OffsetSByte.op_Implicit(MonoAudio.Samples.OffsetSByte)~System.SByte">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.Samples.OffsetSByte"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="T:MonoAudio.SoundOut.ISoundOut">
            <summary>
            Defines a base infrastructure of a sound output.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:MonoAudio.SoundOut.ISoundOut.Play">
            <summary>
            Starts the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.SoundOut.ISoundOut.Pause">
            <summary>
            Pauses the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.SoundOut.ISoundOut.Resume">
            <summary>
            Resumes the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.SoundOut.ISoundOut.Stop">
            <summary>
            Stops the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.SoundOut.ISoundOut.Initialize(MonoAudio.IWaveSource)">
            <summary>
            Initializes the <see cref="T:MonoAudio.SoundOut.ISoundOut"/> for playing a <paramref name="source"/>.
            </summary>
            <param name="source">The source to play.</param>
        </member>
        <member name="P:MonoAudio.SoundOut.ISoundOut.PlaybackState">
            <summary>
            Gets the state of the playback.
            </summary>
            <value>
            The state of the playback.
            </value>
        </member>
        <member name="T:MonoAudio.SoundOut.PlaybackState">
            <summary>
            Represents a state of playback.
            </summary>
        </member>
        <member name="F:MonoAudio.SoundOut.PlaybackState.Stopped">
            <summary>
            The playback is stopped.
            </summary>
        </member>
        <member name="F:MonoAudio.SoundOut.PlaybackState.Playing">
            <summary>
            The playback is running.
            </summary>
        </member>
        <member name="F:MonoAudio.SoundOut.PlaybackState.Paused">
            <summary>
            The playback is paused.
            </summary>
        </member>
        <member name="T:System.ThrowHelper">
            <summary>
            Helps throwing exceptions while in-lining aggressively.
            </summary>
        </member>
        <member name="M:System.ThrowHelper.Throw``1(``0)">
            <summary>
            Throws the specified exception.
            </summary>
            <typeparam name="T">The type of exception.</typeparam>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:System.Int24">
            <summary>
            An simple representation of 24bit signed integer.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:System.Int24.MaxValue">
            <summary>
            Represents the largest possible value of an System.Int24. This field is constant.
            </summary>
        </member>
        <member name="F:System.Int24.MinValue">
            <summary>
            Represents the smallest possible value of System.Int24. This field is constant.
            </summary>
        </member>
        <member name="M:System.Int24.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Int24"/> struct.
            </summary>
            <param name="value">The source <see cref="T:System.Int32"/> value. Mask:0x807fffff</param>
        </member>
        <member name="M:System.Int24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Int24"/> struct.
            </summary>
            <param name="head">The head.</param>
            <param name="middle">The middle.</param>
            <param name="tail">The tail.</param>
        </member>
        <member name="M:System.Int24.op_Implicit(System.Int24)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int24"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:System.Int24.op_Explicit(System.Int32)~System.Int24">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:System.Int24"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:System.Int24.op_Equality(System.Int24,System.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.Int24"/> objects are equal.
            </summary>
            <param name="int1">The first <see cref="T:System.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:System.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Int24.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:System.Int24.op_UnaryNegation(System.Int24)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:System.Int24.op_Inequality(System.Int24,System.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:System.Int24"/> objects are not equal.
            </summary>
            <param name="int1">The first <see cref="T:System.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:System.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if int1 and int2 are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Int24.op_LessThan(System.Int24,System.Int24)">
            <summary>
            Determines whether one specified <see cref="T:System.Int24"/> is less than another specified <see cref="T:System.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:System.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Int24.op_GreaterThan(System.Int24,System.Int24)">
            <summary>
            Determines whether one specified <see cref="T:System.Int24"/> is greater than another specified <see cref="T:System.Int24"/> value.
            </summary>
            <param name="left">The first <see cref="T:System.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is greater than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Int24.op_LessThanOrEqual(System.Int24,System.Int24)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:System.Int24"/> is less than or equal to another specified <see cref="T:System.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:System.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than or equal to right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Int24.op_GreaterThanOrEqual(System.Int24,System.Int24)">
            <summary>
            Determines whether one specified <see cref="T:System.Int24"/> is greater than or equal to another specified <see cref="T:System.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:System.Int24"/> to compare.</param>
            <param name="right">The second  <see cref="T:System.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if <see cref="T:System.Int24"/> is greater than or equal to <see cref="T:System.Int24"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Int24.ReverseEndianness(System.Int24)">
            <summary>
            Reverses endianness of the given <see cref="T:System.Int24"/> value.
            </summary>
            <param name="value">The value to reverse endianness.</param>
            <returns></returns>
        </member>
        <member name="M:System.Int24.CompareTo(System.Int24)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:System.Int24"/> value and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified <see cref="T:System.Int24"/> value.
            </summary>
            <param name="other">The <see cref="T:System.Int24"/> to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the other parameter.
            </returns>
        </member>
        <member name="M:System.Int24.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Int24.Equals(System.Int24)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:System.Int24.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
    </members>
</doc>

<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MonoAudio</name>
    </assembly>
    <members>
        <member name="T:MonoAudio.AudioEncoding">
            <summary>
            Defines known encoding types.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Unknown">
            <summary>
            Unknown format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.LinearPcm">
            <summary>
            Microsoft PCM Format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MsAdpcm">
            <summary>
            Microsoft ADPCM Format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IeeeFloat">
            <summary>
            IEEE 754 Single Precision Floating-Point Number
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Vselp">
            <summary>
            Vector sum excited linear prediction Compaq Computer Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IbmCvsd">
            <summary>
            IBM Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Alaw">
            <summary>
            A-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Mulaw">
            <summary>
            Î¼-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.OkiAdpcm">
            <summary>
            OKI ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ImaAdpcm">
            <summary>
            Intel Corporation ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MediaspaceAdpcm">
            <summary>
            Videologic ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.SierraAdpcm">
            <summary>
            Sierra Semiconductor Corp
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G723Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Digistd">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Digifix">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DialogicOkiAdpcm">
            <summary>
            Dialogic Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MediavisionAdpcm">
            <summary>
            Media Vision, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CuCodec">
            <summary>
            Hewlett-Packard Company
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.YamahaAdpcm">
            <summary>
            Yamaha Corporation of America
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Sonarc">
            <summary>
            Speech Compression
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DspgroupTruespeech">
            <summary>
            DSP Group, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Echosc1">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AudiofileAf36">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Aptx">
            <summary>
            Audio Processing Technology
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AudiofileAf10">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Prosody1612">
            <summary>
            Aculab plc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Lrc">
            <summary>
            Merging Technologies S.A.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DolbyAc2">
            <summary>
            Dolby Laboratories
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Gsm610">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Msnaudio">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.AntexAdpcme">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ControlResVqlpc">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Digireal">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Digiadpcm">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ControlResCr10">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.NmsVbxadpcm">
            <summary>
            Natural MicroSystems
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RolandRdac">
            <summary>
            Roland
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Echosc3">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RockwellAdpcm">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RockwellDigitalk">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Xebec">
            <summary>
            Xebec Multimedia Solutions Limited
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G721Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G728Celp">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Msg723">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Mpeg">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Rt24">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Pac">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Mpeglayer3">
            <summary>
            MPEG 3 Layer 1
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.LucentG723">
            <summary>
            Lucent Technologies
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Cirrus">
            <summary>
            Cirrus Logic
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Espcm">
            <summary>
            ESS Technology
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Voxware">
            <summary>
            Voxware Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CanopusAtrac">
            <summary>
            Canopus, Co., Ltd.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G726Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G722Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Dsat">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DsatDisplay">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareByteAligned">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareAc8">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareAc10">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareAc16">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareAc20">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareRt24">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareRt29">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareRt29hw">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareVr12">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareVr18">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxwareTq40">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Softsound">
            <summary>
            Softsound, Ltd.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VoxareTq60">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Msrt24">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.G729a">
            <summary>
            AT&amp;T Laboratories
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.MviMv12">
            <summary>
            Motion Pixels
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DfG726">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DfGsm610">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Onlive">
            <summary>
            OnLive! Technologies, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Sbc24">
            <summary>
            Siemens Business Communications Systems
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DolbyAc3Spdif">
            <summary>
            Sonic Foundry
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.ZyxelAdpcm">
            <summary>
            ZyXEL Communications, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.PhilipsLpcbb">
            <summary>
            Philips Speech Processing
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Packed">
            <summary>
            Studer Professional Audio AG
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.RhetorexAdpcm">
            <summary>
            Rhetorex, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IbmMulaw">
            <summary>
            IBM mu-law format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.IbmAlaw">
            <summary>
            IBM a-law format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Adpcm">
            <summary>
            IBM AVC Adaptive Differential PCM format
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VivoG723">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VivoSiren">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.DigitalG723">
            <summary>
            Digital Equipment Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CreativeAdpcm">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CreativeFastspeech8">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.CreativeFastspeech10">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Quarterdeck">
            <summary>
            Quarterdeck Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.FmTownsSnd">
            <summary>
            Fujitsu Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.BzvDigital">
            <summary>
            Brooktree Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.VmeVmpcm">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Oligsm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Oliadpcm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Olicelp">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Olisbc">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Oliopr">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.LhCodec">
            <summary>
            Lernout &amp; Hauspie
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Norris">
            <summary>
            Norris Communications, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.SoundspaceMusicompress">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Dvm">
            <summary>
            FAST Multimedia AG
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.InterwavVsc112">
            <summary>
            ?????
            </summary>
        </member>
        <member name="F:MonoAudio.AudioEncoding.Extensible">
             <summary>
            
             </summary>
        </member>
        <member name="T:MonoAudio.AudioEncodingAttribute">
            <summary>
            Specifies the properties of audio encoding format.
            </summary>
        </member>
        <member name="T:MonoAudio.BitDepthAttribute">
            <summary>
            Specifies the Bit Depth of an audio encoding format.
            </summary>
        </member>
        <member name="T:MonoAudio.FixedBitDepthAttribute">
            <summary>
            Specifies the audio encoding format supports only fixed bit depth.
            </summary>
        </member>
        <member name="M:MonoAudio.FixedBitDepthAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.FixedBitDepthAttribute"/> class.
            </summary>
        </member>
        <member name="T:MonoAudio.AudioSocket`2">
            <summary>
            The re-pluggable socket receiving audio from <see cref="T:MonoAudio.IReadableAudioSource`2"/>
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <seealso cref="T:MonoAudio.Filters.IAudioFilter`2" />
        </member>
        <member name="P:MonoAudio.AudioSocket`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.AudioSocket`2.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.AudioSocket`2.Source">
            <summary>
            Gets the source to read the samples from.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.AudioSocket`2.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.AudioSocket`2.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.AudioSocket`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.AudioSocket`2"/> class with the specified <paramref name="format"/>.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:MonoAudio.AudioSocket`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.AudioSocket`2.ReplaceSource(MonoAudio.IReadableAudioSource{`0,`1})">
            <summary>
            Replaces the source to the <paramref name="newSource"/>.
            </summary>
            <param name="newSource">The new source.</param>
            <returns>The <see cref="P:MonoAudio.AudioSocket`2.Source"/> that was previously set.</returns>
            <exception cref="T:System.ArgumentException">The Format is not same as newSource's Format!</exception>
        </member>
        <member name="M:MonoAudio.AudioSocket`2.DeplugSource">
            <summary>
            De-plugs the source.
            </summary>
            <returns>The old <see cref="P:MonoAudio.AudioSocket`2.Source"/>.</returns>
        </member>
        <member name="M:MonoAudio.AudioSocket`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MonoAudio.AudioSocket`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.AudioMemory`2">
            <summary>
            Represents an audio buffer.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.#ctor(`1,System.Memory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.AudioMemory`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="memory">The memory.</param>
        </member>
        <member name="P:MonoAudio.AudioMemory`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.AudioMemory`2.Length">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.AudioMemory`2"/> in samples.
            </summary>
            <value>
            The length of this buffer.
            </value>
        </member>
        <member name="P:MonoAudio.AudioMemory`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.AudioMemory`2.Memory">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:MonoAudio.AudioMemory`2.Span">
            <summary>
            Gets the span.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current memory starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <param name="length">The desired length in samples for the slice.</param>
            <returns>A memory that consists of <paramref name="length"/> elements from the current memory starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current memory that begins at a specified index.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <returns>
            A memory that consists of all elements of the current memory from <paramref name="start"/> to the end of the memory.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.CopyTo(MonoAudio.AudioMemory{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:MonoAudio.AudioMemory`2"/> into a destination <see cref="T:MonoAudio.AudioMemory`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.TryCopyTo(MonoAudio.AudioMemory{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:MonoAudio.AudioMemory`2"/> to a destination <see cref="T:MonoAudio.AudioMemory`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:MonoAudio.AudioMemory`2.Empty">
            <summary>
            Returns an empty <see cref="T:MonoAudio.AudioMemory`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:MonoAudio.AudioMemory`2"/> object.
            </value>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.op_Implicit(MonoAudio.AudioMemory{`0,`1})~MonoAudio.ReadOnlyAudioMemory{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.AudioMemory`2"/> to <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/>.
            </summary>
            <param name="memory">The memory.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.op_Inequality(MonoAudio.AudioMemory{`0,`1},MonoAudio.AudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.AudioMemory`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.AudioMemory`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.AudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.op_Equality(MonoAudio.AudioMemory{`0,`1},MonoAudio.AudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.AudioMemory`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.AudioMemory`2"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.AudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.Equals(MonoAudio.AudioMemory{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="memory">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the memory parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioMemory`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:MonoAudio.AudioSpan`2">
            <summary>
            Provides a type-, memory-, and format-safe representation of a contiguous region of arbitrary memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:MonoAudio.AudioSpan`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.AudioSpan`2.Span">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:MonoAudio.AudioSpan`2.Length">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.AudioSpan`2"/>.
            </summary>
            <value>
            The length of this span.
            </value>
        </member>
        <member name="P:MonoAudio.AudioSpan`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.AudioSpan`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/> in the <see cref="T:MonoAudio.AudioSpan`2"/>.
            </summary>
            <value>
            The reference to the element.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.#ctor(`1,System.Span{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.AudioSpan`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <param name="length">The desired length in samples for the slice.</param>
            <returns>A span that consists of <paramref name="length"/> elements from the current span starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.CopyTo(MonoAudio.AudioSpan{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:MonoAudio.AudioSpan`2"/> into a destination <see cref="T:MonoAudio.AudioSpan`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.TryCopyTo(MonoAudio.AudioSpan{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:MonoAudio.AudioSpan`2"/> to a destination <see cref="T:MonoAudio.AudioSpan`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.Fill(`0)">
            <summary>
            Fills the elements of this span with a specified value.
            </summary>
            <param name="value">The value to assign to each element of the span.</param>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.Clear">
            <summary>
            Clears the contents of this <see cref="T:MonoAudio.AudioSpan`2"/> object.
            </summary>
        </member>
        <member name="P:MonoAudio.AudioSpan`2.Empty">
            <summary>
            Returns an empty <see cref="T:MonoAudio.AudioSpan`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:MonoAudio.AudioSpan`2"/> object.
            </value>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.op_Implicit(MonoAudio.AudioSpan{`0,`1})~MonoAudio.ReadOnlyAudioSpan{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.AudioSpan`2"/> to <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/>.
            </summary>
            <param name="span">The span.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.op_Inequality(MonoAudio.AudioSpan{`0,`1},MonoAudio.AudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.AudioSpan`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.AudioSpan`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.AudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.op_Equality(MonoAudio.AudioSpan{`0,`1},MonoAudio.AudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.AudioSpan`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.AudioSpan`2"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.AudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.Equals(MonoAudio.AudioSpan{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="span">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the span parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.AudioSpan`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:MonoAudio.InterleavedAudioMemory`2">
            <summary>
            Represents a contiguous region of channel-interleaved memory that contains audio data.
            </summary>
        </member>
        <member name="P:MonoAudio.InterleavedAudioMemory`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.InterleavedAudioMemory`2.Memory">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:MonoAudio.InterleavedAudioMemory`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.InterleavedAudioMemory`2.SampleLength">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> in samples.
            </summary>
            <value>
            The length of this memory in samples.
            </value>
        </member>
        <member name="P:MonoAudio.InterleavedAudioMemory`2.Length">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> in frames.
            </summary>
            <value>
            The length of this memory in frames.
            </value>
        </member>
        <member name="P:MonoAudio.InterleavedAudioMemory`2.Item(System.Int32)">
            <summary>
            Gets the frame at the specified <paramref name="frame"/> in the <see cref="T:MonoAudio.InterleavedAudioMemory`2"/>.
            </summary>
            <value>
            The memory to the frame.
            </value>
            <param name="frame">The index of frame.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.#ctor(`1,System.Memory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="memory">The memory.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="memory"/> must be aligned with <paramref name="format"/>'s <see cref="P:MonoAudio.IInterleavedAudioFormat`1.BlockSize"/>!</exception>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current memory starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <param name="length">The desired length in frame for the slice.</param>
            <returns>A memory that consists of <paramref name="length"/> elements from the current memory starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current memory that begins at a specified index.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <returns>
            A memory that consists of all elements of the current memory from <paramref name="start"/> to the end of the memory.
            </returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.CopyTo(MonoAudio.InterleavedAudioMemory{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> into a destination <see cref="T:MonoAudio.InterleavedAudioMemory`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.TryCopyTo(MonoAudio.InterleavedAudioMemory{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> to a destination <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:MonoAudio.InterleavedAudioMemory`2.Empty">
            <summary>
            Returns an empty <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> object.
            </value>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.op_Implicit(MonoAudio.InterleavedAudioMemory{`0,`1})~MonoAudio.ReadOnlyInterleavedAudioMemory{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> to <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/>.
            </summary>
            <param name="memory">The memory.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.op_Implicit(MonoAudio.AudioMemory{`0,`1})~MonoAudio.InterleavedAudioMemory{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.AudioMemory`2"/> to <see cref="T:MonoAudio.InterleavedAudioMemory`2"/>.
            </summary>
            <param name="memory">The memory.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.op_Inequality(MonoAudio.InterleavedAudioMemory{`0,`1},MonoAudio.InterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.op_Equality(MonoAudio.InterleavedAudioMemory{`0,`1},MonoAudio.InterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.Equals(MonoAudio.InterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="memory">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the memory parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.InterleavedAudioMemory`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:MonoAudio.Buffers.InterleavedAudioSpan`2">
            <summary>
            Provides a type-, memory-, and format-safe representation of a contiguous region of channel-interleaved memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:MonoAudio.Buffers.InterleavedAudioSpan`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.InterleavedAudioSpan`2.Span">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.InterleavedAudioSpan`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.InterleavedAudioSpan`2.SampleLength">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> in samples.
            </summary>
            <value>
            The length of this span in samples.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.InterleavedAudioSpan`2.Length">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> in frames.
            </summary>
            <value>
            The length of this span in frames.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.InterleavedAudioSpan`2.Item(System.Int32)">
            <summary>
            Gets the frame at the specified <paramref name="frame"/> in the <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/>.
            </summary>
            <value>
            The span to the frame.
            </value>
            <param name="frame">The index of frame.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.#ctor(`1,System.Span{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="span">The span.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="span"/> must be aligned with <paramref name="format"/>'s <see cref="P:MonoAudio.IInterleavedAudioFormat`1.BlockSize"/>!</exception>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <param name="length">The desired length in frame for the slice.</param>
            <returns>A span that consists of <paramref name="length"/> elements from the current span starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.CopyTo(MonoAudio.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> into a destination <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.TryCopyTo(MonoAudio.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> to a destination <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.Fill(`0)">
            <summary>
            Fills the elements of this span with a specified value.
            </summary>
            <param name="value">The value to assign to each element of the span.</param>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.Clear">
            <summary>
            Clears the contents of this <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> object.
            </summary>
        </member>
        <member name="P:MonoAudio.Buffers.InterleavedAudioSpan`2.Empty">
            <summary>
            Returns an empty <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> object.
            </value>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.op_Implicit(MonoAudio.Buffers.InterleavedAudioSpan{`0,`1})~MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> to <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/>.
            </summary>
            <param name="span">The span.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.op_Implicit(MonoAudio.AudioSpan{`0,`1})~MonoAudio.Buffers.InterleavedAudioSpan{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.AudioSpan`2"/> to <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/>.
            </summary>
            <param name="span">The span.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.op_Inequality(MonoAudio.Buffers.InterleavedAudioSpan{`0,`1},MonoAudio.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.op_Equality(MonoAudio.Buffers.InterleavedAudioSpan{`0,`1},MonoAudio.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.Equals(MonoAudio.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="span">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the span parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.InterleavedAudioSpan`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2">
            <summary>
            Provides a read-only type-, memory-, and format-safe representation of a contiguous region of channel-interleaved memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Span">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.SampleLength">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> in samples.
            </summary>
            <value>
            The length of this span in samples.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Length">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> in frames.
            </summary>
            <value>
            The length of this span in frames.
            </value>
        </member>
        <member name="P:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Item(System.Int32)">
            <summary>
            Gets the frame at the specified <paramref name="frame"/> in the <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/>.
            </summary>
            <value>
            The span to the frame.
            </value>
            <param name="frame">The index of frame.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.#ctor(`1,System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="span">The span.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="span"/> must be aligned with <paramref name="format"/>'s <see cref="P:MonoAudio.IInterleavedAudioFormat`1.BlockSize"/>!</exception>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <param name="length">The desired length in frame for the slice.</param>
            <returns>A span that consists of <paramref name="length"/> elements from the current span starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.CopyTo(MonoAudio.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> into a destination <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.TryCopyTo(MonoAudio.Buffers.InterleavedAudioSpan{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to a destination <see cref="T:MonoAudio.Buffers.InterleavedAudioSpan`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Empty">
            <summary>
            Returns an empty <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> object.
            </value>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.op_Implicit(MonoAudio.ReadOnlyAudioSpan{`0,`1})~MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> to <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/>.
            </summary>
            <param name="span">The span.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.op_Inequality(MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1},MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.op_Equality(MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1},MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.Equals(MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="span">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the span parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Buffers.ReadOnlyInterleavedAudioSpan`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:MonoAudio.ReadOnlyAudioMemory`2">
            <summary>
            Represents a read-only audio buffer.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.#ctor(`1,System.ReadOnlyMemory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="memory">The memory.</param>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioMemory`2.Item(System.Int32)">
            <summary>
            Gets the element at the specified <paramref name="index"/> in the <see cref="T:MonoAudio.AudioMemory`2"/>.
            </summary>
            <value>
            The element.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioMemory`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioMemory`2.Length">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.AudioMemory`2"/>.
            </summary>
            <value>
            The length of this buffer.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioMemory`2.Memory">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioMemory`2.Span">
            <summary>
            Gets the span.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioMemory`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current memory starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <param name="length">The desired length in samples for the slice.</param>
            <returns>A memory that consists of <paramref name="length"/> elements from the current memory starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current memory that begins at a specified index.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <returns>
            A memory that consists of all elements of the current memory from <paramref name="start"/> to the end of the memory.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.CopyTo(MonoAudio.AudioMemory{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> into a destination <see cref="T:MonoAudio.AudioMemory`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.TryCopyTo(MonoAudio.AudioMemory{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> to a destination <see cref="T:MonoAudio.AudioMemory`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioMemory`2.Empty">
            <summary>
            Returns an empty <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> object.
            </value>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.op_Inequality(MonoAudio.ReadOnlyAudioMemory{`0,`1},MonoAudio.ReadOnlyAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.op_Equality(MonoAudio.ReadOnlyAudioMemory{`0,`1},MonoAudio.ReadOnlyAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.Equals(MonoAudio.ReadOnlyAudioMemory{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="memory">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the memory parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioMemory`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:MonoAudio.ReadOnlyAudioSpan`2">
            <summary>
            Provides a read-only type-, memory-, and format-safe representation of a contiguous region of arbitrary memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioSpan`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioSpan`2.Span">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The span.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioSpan`2.Length">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/>.
            </summary>
            <value>
            The length of this span.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioSpan`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioSpan`2.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/> in the <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/>.
            </summary>
            <value>
            The reference to the element.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.#ctor(`1,System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current span starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <param name="length">The desired length in samples for the slice.</param>
            <returns>A span that consists of <paramref name="length"/> elements from the current span starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current span that begins at a specified index.
            </summary>
            <param name="start">The index in samples at which to begin this slice.</param>
            <returns>
            A span that consists of all elements of the current span from <paramref name="start"/> to the end of the span.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.CopyTo(MonoAudio.AudioSpan{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> into a destination <see cref="T:MonoAudio.AudioSpan`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.TryCopyTo(MonoAudio.AudioSpan{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> to a destination <see cref="T:MonoAudio.AudioSpan`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:MonoAudio.ReadOnlyAudioSpan`2.Empty">
            <summary>
            Returns an empty <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> object.
            </value>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.op_Inequality(MonoAudio.ReadOnlyAudioSpan{`0,`1},MonoAudio.ReadOnlyAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.op_Equality(MonoAudio.ReadOnlyAudioSpan{`0,`1},MonoAudio.ReadOnlyAudioSpan{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.ReadOnlyAudioSpan`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.Equals(MonoAudio.ReadOnlyAudioSpan{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="span">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the span parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyAudioSpan`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2">
            <summary>
            Provides a read-only type-, memory-, and format-safe representation of a contiguous region of channel-interleaved memory that contains audio data.
            </summary>
            <typeparam name="TSample">The type of audio sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Memory">
            <summary>
            Gets the internal memory region.
            </summary>
            <value>
            The memory.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyInterleavedAudioMemory`2.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyInterleavedAudioMemory`2.SampleLength">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> in samples.
            </summary>
            <value>
            The length of this memory in samples.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Length">
            <summary>
            Gets the length of this <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> in frames.
            </summary>
            <value>
            The length of this memory in frames.
            </value>
        </member>
        <member name="P:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Item(System.Int32)">
            <summary>
            Gets the frame at the specified <paramref name="frame"/> in the <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/>.
            </summary>
            <value>
            The memory to the frame.
            </value>
            <param name="frame">The index of frame.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.#ctor(`1,System.ReadOnlyMemory{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="memory">The memory.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="memory"/> must be aligned with <paramref name="format"/>'s <see cref="P:MonoAudio.IInterleavedAudioFormat`1.BlockSize"/>!</exception>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Slice(System.Int32,System.Int32)">
            <summary>
            Forms a slice out of the current memory starting at a specified index for a specified <paramref name="length"/>.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <param name="length">The desired length in frame for the slice.</param>
            <returns>A memory that consists of <paramref name="length"/> elements from the current memory starting at <paramref name="start"/>.</returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Slice(System.Int32)">
            <summary>
            Forms a slice out of the current memory that begins at a specified index.
            </summary>
            <param name="start">The index in frames at which to begin this slice.</param>
            <returns>
            A memory that consists of all elements of the current memory from <paramref name="start"/> to the end of the memory.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.CopyTo(MonoAudio.InterleavedAudioMemory{`0,`1})">
            <summary>
            Copies the contents of this <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> into a destination <see cref="T:MonoAudio.InterleavedAudioMemory`2"/>.
            </summary>
            <param name="destination">The destination.</param>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.TryCopyTo(MonoAudio.InterleavedAudioMemory{`0,`1})">
            <summary>
            Attempts to copy the current <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> to a destination <see cref="T:MonoAudio.InterleavedAudioMemory`2"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <param name="destination">The destination.</param>
            <returns>true if the copy operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Empty">
            <summary>
            Returns an empty <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> object.
            </summary>
            <value>
            An empty <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> object.
            </value>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.op_Implicit(MonoAudio.ReadOnlyAudioMemory{`0,`1})~MonoAudio.ReadOnlyInterleavedAudioMemory{`0,`1}">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.ReadOnlyAudioMemory`2"/> to <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/>.
            </summary>
            <param name="memory">The memory.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.op_Inequality(MonoAudio.ReadOnlyInterleavedAudioMemory{`0,`1},MonoAudio.ReadOnlyInterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.op_Equality(MonoAudio.ReadOnlyInterleavedAudioMemory{`0,`1},MonoAudio.ReadOnlyInterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.ReadOnlyInterleavedAudioMemory`2"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.Equals(MonoAudio.ReadOnlyInterleavedAudioMemory{`0,`1})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="memory">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the memory parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadOnlyInterleavedAudioMemory`2.GetHashCode">
            <summary>
            Throws a System.NotSupportedException.
            </summary>
            <returns>
            Calls to this method always throw a System.NotSupportedException.
            </returns>
            <exception cref="T:System.NotSupportedException">Always</exception>
        </member>
        <member name="T:MonoAudio.Codecs.CodecUtils">
            <summary>
            Provides some utility functions for <see cref="T:MonoAudio.Codecs.IEncoder"/> and <see cref="T:MonoAudio.Codecs.IDecoder"/>.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.IDecoder">
            <summary>
            Defines a base infrastructure of an audio decoder.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.IDecoder.DetermineDecodabilityAsync(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Determines whether the data from <paramref name="dataSource"/> can be decoded by this decoder asynchronously.<br/>
            The actual decoding stream must be opened after seeking the source <see cref="T:System.IO.Stream"/> to head.
            </summary>
            <param name="dataSource">The <see cref="T:MonoAudio.Data.IDataSource`1"/> to read the data from.</param>
            <returns>
            The whole verification task which returns the value below:<br/>
            <c>true</c> if the data from <paramref name="dataSource"/> can be supported by this decoder, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.IDecoder.TryCreateDecoderAsync(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Tries to create a decoder that asynchronously decodes the data asynchronously read from <paramref name="dataSource"/>.
            </summary>
            <param name="dataSource">The <see cref="T:MonoAudio.Data.IDataSource`1"/> to read the data from.</param>
            <returns>
            success: The value which indicates whether the data is decodable, and the decoder is created.
            decoder: The decoding <see cref="T:MonoAudio.IWaveSource"/>.
            </returns>
        </member>
        <member name="T:MonoAudio.Codecs.IEncoder">
            <summary>
            Defines a base infrastructure of an audio encoder.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.IEncoder.IsEncodable(MonoAudio.WaveFormat)">
            <summary>
            Determines whether the <paramref name="format"/> can be encoded by this codec.
            </summary>
            <param name="format">The input data's format.</param>
            <returns><c>true</c> if the <paramref name="format"/> can be supported by this encoder, otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Codecs.IEncoder.Encode(MonoAudio.IWaveSource,MonoAudio.WriteAction{System.Byte})">
            <summary>
            Encodes <paramref name="source"/> with the given <paramref name="writeAction"/>.
            </summary>
            <param name="source">The <see cref="T:MonoAudio.IWaveSource"/> to read the data to encode from.</param>
            <param name="writeAction">The destination.</param>
        </member>
        <member name="M:MonoAudio.Codecs.IEncoder.Encode``1(MonoAudio.IWaveSource,``0,MonoAudio.WriteWithParameterAction{System.Byte,``0})">
            <summary>
            Encodes <paramref name="source"/> with the given <paramref name="writeAction"/>.
            </summary>
            <param name="source">The <see cref="T:MonoAudio.IWaveSource"/> to read the data to encode from.</param>
            <param name="parameter">The <typeparamref name="TParam"/> value to call the <paramref name="writeAction"/> with.</param>
            <param name="writeAction">The destination.</param>
        </member>
        <member name="M:MonoAudio.Codecs.IEncoder.EncodeAsync(MonoAudio.IAsyncWaveSource,MonoAudio.WriteAsyncFunc{System.Byte})">
            <summary>
            Encodes <paramref name="source"/> with the given <paramref name="writeAsyncFunc"/> asynchronously.
            </summary>
            <param name="source">The <see cref="T:MonoAudio.IAsyncWaveSource"/> to read the data to encode from.</param>
            <param name="writeAsyncFunc">The destination.</param>
            <returns>The whole encoding task.</returns>
        </member>
        <member name="M:MonoAudio.Codecs.IEncoder.EncodeAsync``1(MonoAudio.IAsyncWaveSource,``0,MonoAudio.WriteAsyncFunc{System.Byte})">
            <summary>
            Encodes <paramref name="source"/> with the given <paramref name="writeAsyncFunc"/> asynchronously.
            </summary>
            <param name="source">The <see cref="T:MonoAudio.IAsyncWaveSource"/> to read the data to encode from.</param>
            <param name="parameter">The <typeparamref name="TParam"/> value to call the <paramref name="writeAsyncFunc"/> with.</param>
            <param name="writeAsyncFunc">The destination.</param>
            <returns>The whole encoding task.</returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.ChunkId">
            <summary>
            Represents a chunk ID for waveform file format in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Riff">
            <summary>
            The RIFF chunk "RIFF" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Rf64">
            <summary>
            The RF64 chunk "RF64" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Bw64">
            <summary>
            The BWF chunk "bw64" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Rf64DataSize">
            <summary>
            The RF64/BWF data size chunk "ds64" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Format">
            <summary>
            The format chunk "fmt " read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Fact">
            <summary>
            The fact chunk "fact" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Data">
            <summary>
            The data chunk "data" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.WaveList">
            <summary>
            The Wave List chunk "wavl" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Silent">
            <summary>
            The silent chunk "slnt" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Cue">
            <summary>
            The cue chunk "cue " read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Playlist">
            <summary>
            The playlist chunk "plst" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.AssociatedDataList">
            <summary>
            The associated data list chunk "list" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Label">
            <summary>
            The label chunk "labl" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Note">
            <summary>
            The note chunk "note" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.LabeledText">
            <summary>
            The labeled text chunk "ltxt" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Sampler">
            <summary>
            The sampler chunk "smpl" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.Instrument">
            <summary>
            The instrument chunk "inst" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.JunkLarge">
            <summary>
            The JUNK chunk "JUNK" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.JunkSmall">
            <summary>
            The junk chunk "junk" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.MetadataRawAXml">
            <summary>
            The raw XML metadata chunk "axml" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.MetadataCompressedBinaryXml">
            <summary>
            The compressed binary XML metadata chunk "bxml" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.MetadataSubXmlList">
            <summary>
            The XML list metadata chunk "sxml" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.MetadataAudioDefinitionModel">
            <summary>
            The metadata chunk of ITU-R BS.2076-2 audio definition model "chna" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.AssociatedDataListUpperCase">
            <summary>
            The riff metadata chunk "LIST" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.ChunkId.MetadataId3">
            <summary>
            The id3 metadata chunk "id3 " read in Little Endian.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.ChunkUtils">
            <summary>
            Provides a utility function that manipulates chunks in WAVE file.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ChunkUtils.IsJunkChunk(MonoAudio.Codecs.Waveform.ChunkId)">
            <summary>
            Determines whether the specified <paramref name="chunkId"/> represents JUNK chunk.
            </summary>
            <param name="chunkId">The chunk identifier.</param>
            <returns>
              <c>true</c> if the specified <paramref name="chunkId"/> represents JUNK chunk; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat">
            <summary>
            Represents an "extensible" wave format.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.#ctor(MonoAudio.Codecs.Waveform.StandardWaveFormat,System.UInt16,System.UInt16,MonoAudio.Speakers,System.Guid,System.ReadOnlyMemory{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat"/> struct.
            </summary>
            <param name="format">The format.</param>
            <param name="extensionSize">Size of the extension.</param>
            <param name="validBitsPerSample">The valid bits per sample.</param>
            <param name="channelMask">The channel mask.</param>
            <param name="subFormat">The sub format.</param>
            <param name="extraData">The extra data.</param>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.ExtensionSize">
            <summary>
            Gets the size of the extension.
            </summary>
            <value>
            The size of the extension.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.ValidBitsPerSample">
            <summary>
            Gets the valid bits per sample.
            </summary>
            <value>
            The valid bits per sample.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.ChannelMask">
            <summary>
            Gets the channel mask.
            </summary>
            <value>
            The channel mask.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.SubFormat">
            <summary>
            Gets the sub format.
            </summary>
            <value>
            The sub format.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.SampleSize">
            <summary>
            Gets the size of the frame.
            </summary>
            <value>
            The size of the frame.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.Equals(MonoAudio.Codecs.Waveform.ExtensibleWaveFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.Equals(MonoAudio.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.op_Equality(MonoAudio.Codecs.Waveform.ExtensibleWaveFormat,MonoAudio.Codecs.Waveform.ExtensibleWaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.op_Inequality(MonoAudio.Codecs.Waveform.ExtensibleWaveFormat,MonoAudio.Codecs.Waveform.ExtensibleWaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.ExtensionPart">
            <summary>
            Represents an "extension" part of <see cref="T:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat"/>.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensionPart.#ctor(System.UInt16,System.UInt16,System.UInt32,System.Guid)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.ExtensionPart"/> struct.
            </summary>
            <param name="extensionSize">Size of the extension.</param>
            <param name="validBitsPerSample">The valid bits per sample.</param>
            <param name="channelMask">The channel mask.</param>
            <param name="subFormat">The sub format.</param>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensionPart.ExtensionSize">
            <summary>
            Gets the size of the extension region data.
            </summary>
            <value>
            The size of the extension region data.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensionPart.ValidBitsPerSample">
            <summary>
            Gets the valid bits per sample.
            </summary>
            <value>
            The valid bits per sample.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensionPart.ChannelMask">
            <summary>
            Gets the channel mask.
            </summary>
            <value>
            The channel mask.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.ExtensionPart.SubFormat">
            <summary>
            Gets the sub format.
            </summary>
            <value>
            The sub format.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.ExtensionPart.ReverseEndianness">
            <summary>
            Reverses endianness for all fields, and returns a new value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser">
            <summary>
            Parses n-bit Linear and IEEE 754 floating point PCM data chunk.
            </summary>
            <seealso cref="T:MonoAudio.Codecs.Waveform.Parsing.Chunks.IWaveformChunkParser" />
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.#ctor(MonoAudio.Codecs.Waveform.IChunkReader,MonoAudio.IWaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.ChunkLength">
            <summary>
            Gets the length of this chunk excluding header 8 bytes.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Source">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The source chunk reader.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2" /> is.
            Some implementation could not support this property.
            </summary>
            <value>
            The position.
            </value>
            <exception cref="T:System.NotSupportedException">
            </exception>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            Negative value Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Formats.LinearPcm.ByteAlignedPcmWaveformChunkParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser">
            <summary>
            Parses fmt chunks for PCM-Like files.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.#ctor(MonoAudio.Codecs.Waveform.IChunkReader,MonoAudio.AudioEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser" /> class.
            </summary>
            <param name="source">The source.</param>
            <param name="encoding">The encoding.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.RequireFactChunk">
            <summary>
            Gets a value indicating whether the format requires a fact chunk.
            </summary>
            <value>
              <c>true</c> if the format requires a fact chunk; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.Data">
            <summary>
            Gets the stored data.<br />
            The data must be parsed at initialization.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.ChunkLength">
            <summary>
            Gets the length of this chunk excluding header 8 bytes.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.Source">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The source chunk reader.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.GetWaveformChunkParser(MonoAudio.Codecs.Waveform.IChunkReader,MonoAudio.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer)">
            <summary>
            Gets the waveform chunk parser.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <param name="rf64ChunkSizeContainer">The container of informations about the size of certain chunks.</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.ParseFactChunk(MonoAudio.Codecs.Waveform.IChunkReader)">
            <summary>
            Parses the fact chunk.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Formats.LinearPcm.PcmFormatChunkParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.IChunkReader">
            <summary>
            Defines a base infrastructure of a chunk reader.
            </summary>
            <seealso cref="T:MonoAudio.Data.IDataSource`1" />
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.IChunkReader.ChunkId">
            <summary>
            Gets the current chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.IChunkReader.TotalSize">
            <summary>
            Gets the total size of this chunk excluding the 8 bytes of header.
            </summary>
            <value>
            The total size.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.IChunkReader.RemainingBytes">
            <summary>
            Gets the length of remaining data in bytes.
            </summary>
            <value>
            The remaining bytes.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.IChunkReader.CurrentSubChunk">
            <summary>
            Gets the current sub chunk.
            </summary>
            <value>
            The current sub chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.IChunkReader.CanPubliclyRead">
            <summary>
            Gets a value indicating whether this instance can be read by <see cref="M:MonoAudio.Data.IDataSource`1.Read(System.Span{`0})"/> and <see cref="M:MonoAudio.Data.IDataSource`1.ReadAsync(System.Memory{`0})"/>.
            </summary>
            <value>
              <c>true</c> if this instance can publicly read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.IChunkReader.ReadSubChunk">
            <summary>
            Opens the stream for sub chunk.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.IEndiannessReversible`1">
            <summary>
            Defines a base infrastructure of a chunk of data that is bi-endianed.
            </summary>
            <typeparam name="TImplementation">The type of an implementation of this interface.</typeparam>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.IEndiannessReversible`1.ReverseEndianness">
            <summary>
            Reverses endianness for all fields, and returns a new value.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.InfoSubChunkId">
            <summary>
            Represents a subchunk ID for waveform "LIST" chunk in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.ArchivalLocation">
            <summary>
            The Archival Location subchunk "IARL" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Artist">
            <summary>
            The Artist subchunk "IART" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Commissioned">
            <summary>
            The Commissioned subchunk "ICMS" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Comments">
            <summary>
            The Comments subchunk "ICMT" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Copyright">
            <summary>
            The Copyright subchunk "ICOP" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.CreationDate">
            <summary>
            The Creation Date subchunk "ICRD" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Cropped">
            <summary>
            The Cropped subchunk "ICRP" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Dimensions">
            <summary>
            The Dimensions subchunk "IDIM" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.DotsPerInch">
            <summary>
            The Dots Per Inch subchunk "IDPI" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Engineer">
            <summary>
            The Engineer subchunk "IENG" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Genre">
            <summary>
            The Genre subchunk "IGNR" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Keywords">
            <summary>
            The Keywords subchunk "IKEY" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Lightness">
            <summary>
            The Lightness subchunk "ILGT" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Medium">
            <summary>
            The Medium subchunk "IMED" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Name">
            <summary>
            The Name subchunk "INAM" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.PaletteSetting">
            <summary>
            The Palette Setting subchunk "IPLT" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Product">
            <summary>
            The Product subchunk "IPRD" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Subject">
            <summary>
            The Subject subchunk "ISBJ" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Software">
            <summary>
            The Software subchunk "ISFT" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Sharpness">
            <summary>
            The Sharpness subchunk "ISHP" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Source">
            <summary>
            The Source subchunk "ISRC" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.SourceForm">
            <summary>
            The SourceForm subchunk "ISRF" read in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.InfoSubChunkId.Technician">
            <summary>
            The Technician subchunk "ITCH" read in Little Endian.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.Chunks.IFactChunkParser">
            <summary>
            Defines a base infrastructure of a "fact" chunk parser.
            </summary>
            <seealso cref="T:MonoAudio.Codecs.Waveform.Parsing.IChunkParserWithSingleData`1" />
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser">
            <summary>
            Defines a base infrastructure of a parser for "fmt " chunk.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser.RequireFactChunk">
            <summary>
            Gets a value indicating whether the format requires a fact chunk.
            </summary>
            <value>
              <c>true</c> if the format requires a fact chunk; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser.GetWaveformChunkParser(MonoAudio.Codecs.Waveform.IChunkReader,MonoAudio.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer)">
            <summary>
            Gets the waveform chunk parser.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <param name="rf64ChunkSizeContainer">The container of informations about the size of certain chunks.</param>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:MonoAudio.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser"/> didn't parse a required "fact" chunk.</exception>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.Chunks.IFormatChunkParser.ParseFactChunk(MonoAudio.Codecs.Waveform.IChunkReader)">
            <summary>
            Parses the fact chunk.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.Chunks.IWaveformChunkParser">
            <summary>
            Parses a ".wav" file into waveform data.
            Applicable for chunks like <see cref="F:MonoAudio.Codecs.Waveform.ChunkId.WaveList"/>, <see cref="F:MonoAudio.Codecs.Waveform.ChunkId.Silent"/>, and <see cref="F:MonoAudio.Codecs.Waveform.ChunkId.Data"/>
            </summary>
            <seealso cref="T:MonoAudio.Codecs.Waveform.Parsing.IChunkParser" />
            <seealso cref="T:MonoAudio.IWaveSource" />
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.Chunks.JunkChunkParser">
            <summary>
            Parses "JUNK", "PAD ", and non-supported chunks.
            </summary>
            <seealso cref="T:MonoAudio.Codecs.Waveform.Parsing.IChunkParser" />
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.#ctor(MonoAudio.Codecs.Waveform.ChunkId,System.UInt64,MonoAudio.Codecs.Waveform.IChunkReader)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.Parsing.Chunks.JunkChunkParser"/> class.
            </summary>
            <param name="chunkId">The chunk identifier.</param>
            <param name="chunkLength">Length of the chunk.</param>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.ChunkLength">
            <summary>
            Gets the length of this chunk excluding header 8 bytes.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.Source">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The source chunk reader.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.Chunks.JunkChunkParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.IChunkParser">
            <summary>
            Parses a wave sub-chunk.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IChunkParser.ChunkId">
            <summary>
            Gets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IChunkParser.ChunkLength">
            <summary>
            Gets the length of this chunk excluding header 8 bytes.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IChunkParser.Source">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The source chunk reader.
            </value>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.IChunkParserWithSingleData`1">
            <summary>
            Parses a wave sub-chunk with certain data.
            </summary>
            <typeparam name="T">The type of stored data.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IChunkParserWithSingleData`1.Data">
            <summary>
            Gets the stored data.<br/>
            The data must be parsed at initialization.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.IChunkParserWithMultipleData`1">
            <summary>
            Parses a wave sub-chunk with certain multiple data.
            </summary>
            <typeparam name="T">The type of stored data.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.IChunkParserFactory">
            <summary>
            Defines a base infrastructure of a chunk-parser factory.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.IChunkParserFactory.GetChunkParser(MonoAudio.Codecs.Waveform.ChunkId,MonoAudio.Codecs.Waveform.IChunkReader)">
            <summary>
            Gets the chunk parser for the specified <paramref name="id"/>.
            </summary>
            <param name="id">The identifier.</param>
            <param name="chunkReader">The source chunk reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.IChunkParserFactory.GetFormatChunkParser(MonoAudio.Codecs.Waveform.IChunkReader)">
            <summary>
            Gets the format chunk parser.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer">
            <summary>
            Defines a base structure that contains informations about the size of certain chunks.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.RiffSize">
            <summary>
            Gets the size of the RF64 chunk.
            </summary>
            <value>
            The size of the RF64 chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.DataSize">
            <summary>
            Gets the size of the data chunk.
            </summary>
            <value>
            The size of the data chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.SampleCount">
            <summary>
            Gets the sample count in the fact chunk.
            </summary>
            <value>
            The sample count in the fact chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.ChunkSizeTable">
            <summary>
            Gets the chunk size table.
            </summary>
            <value>
            The chunk size table.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.IRf64ChunkSizeContainer.GetSizeForNextChunk(MonoAudio.Codecs.Waveform.ChunkId)">
            <summary>
            Gets the size for next chunk with specified <paramref name="id"/>.<br/>
            This function must not be called more than once for single chunk.
            </summary>
            <param name="id">The chunk identifier.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.IWaveParser">
            <summary>
            Decodes a ".wav" file from <see cref="T:MonoAudio.Codecs.Waveform.IChunkReader"/>.<br/>
            The instance of <see cref="T:MonoAudio.Codecs.Waveform.Parsing.IWaveParser"/> must be ready to <see cref="M:MonoAudio.IReadableAudioSource`2.Read(System.Span{`0})"/> after the instance is initialized with its constructor.
            </summary>
            <seealso cref="T:MonoAudio.IWaveSource" />
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IWaveParser.ChunkParserFactory">
            <summary>
            Gets the chunk parser factory.
            </summary>
            <value>
            The chunk parser factory.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.IWaveParser.ChunkReader">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The chunk reader.
            </value>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.IRf64Parser">
            <summary>
            Decodes an RF64 ".wav" file from <see cref="T:MonoAudio.Codecs.Waveform.IChunkReader"/>.
            </summary>
            <seealso cref="T:MonoAudio.Codecs.Waveform.Parsing.IWaveParser" />
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.RegisterableChunkParserFactory">
             <summary>
            
             </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.SimpleChunkParserFactory">
            <summary>
            Constructs simple chunk parsers and discards any metadata chunks.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.SimpleChunkParserFactory.GetChunkParser(MonoAudio.Codecs.Waveform.ChunkId,MonoAudio.Codecs.Waveform.IChunkReader)">
            <summary>
            Gets the chunk parser for the specified <paramref name="id" />.
            </summary>
            <param name="id">The identifier.</param>
            <param name="chunkReader">The source chunk reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.SimpleChunkParserFactory.GetFormatChunkParser(MonoAudio.Codecs.Waveform.IChunkReader)">
            <summary>
            Gets the format chunk parser.
            </summary>
            <param name="chunkReader">The chunk reader.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser">
            <summary>
            Parses ".wav" files from <see cref="T:MonoAudio.Codecs.Waveform.IChunkReader"/>
            </summary>
            <seealso cref="T:MonoAudio.Codecs.Waveform.Parsing.IWaveParser" />
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.ChunkParserFactory">
            <summary>
            Gets the chunk parser factory.
            </summary>
            <value>
            The chunk parser factory.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.ChunkReader">
            <summary>
            Gets the source chunk reader.
            </summary>
            <value>
            The chunk reader.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.ChunkSizeTable">
            <summary>
            Gets the chunk size table.
            </summary>
            <value>
            The chunk size table.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.DataSize">
            <summary>
            Gets the size of the data chunk.
            </summary>
            <value>
            The size of the data chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            Negative value Means Infinity.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.RiffSize">
            <summary>
            Gets the size of the RF64 chunk.
            </summary>
            <value>
            The size of the RF64 chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.SampleCount">
            <summary>
            Gets the sample count in the fact chunk.
            </summary>
            <value>
            The sample count in the fact chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.Metadata">
            <summary>
            Gets the metadata.
            </summary>
            <value>
            The metadata.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.#ctor(MonoAudio.Codecs.Waveform.Parsing.IChunkParserFactory,MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser" /> class.
            </summary>
            <param name="chunkParserFactory">The chunk parser factory.</param>
            <param name="dataSource">The data source for whole WAVE file.</param>
            <exception cref="T:System.ArgumentNullException">chunkParserFactory
            or
            chunkReader</exception>
            <exception cref="T:System.NotSupportedException">The \"{chars}\" file is not supported!</exception>
            <exception cref="T:System.IO.InvalidDataException">
            The first chunk wasn't \"ds64\"!
            or
            "fmt " chunk not found!
            or
            "fact" chunk not found!
            or
            The "wavl" and "slnt" chunks are not currently supported!
            </exception>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.GetSizeForNextChunk(MonoAudio.Codecs.Waveform.ChunkId)">
            <summary>
            Gets the size for next chunk with specified <paramref name="id" />.<br />
            This function must not be called more than once for single chunk.
            </summary>
            <param name="id">The chunk identifier.</param>
            <returns></returns>
            <exception cref="T:System.InvalidOperationException">When the parser is nor parsing RF64 data.</exception>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Parsing.SimpleWaveParser.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry">
            <summary>
            Represents a chunk's size entry of RF64.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry.Id">
            <summary>
            The identifier of the corresponding chunk.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry.ChunkSize">
            <summary>
            The chunk size.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry.#ctor(MonoAudio.Codecs.Waveform.ChunkId,System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> struct.
            </summary>
            <param name="id">The identifier.</param>
            <param name="chunkSize">Size of the chunk.</param>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry.Equals(MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry.op_Equality(MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry,MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry.op_Inequality(MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry,MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Codecs.Waveform.Rf64.ChunkSizeTableEntry"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader">
            <summary>
            Parses and reads RF64 Chunks.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.CanPubliclyRead">
            <summary>
            Gets a value indicating whether this instance can be read by <see cref="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.Read(System.Span{System.Byte})"/> and <see cref="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.ReadAsync(System.Memory{System.Byte})"/>.
            </summary>
            <value>
              <c>true</c> if this instance can publicly read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.ChunkId">
            <summary>
            Gets the current chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.CurrentSubChunk">
            <summary>
            Gets the current sub chunk.
            </summary>
            <value>
            The current sub chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.RemainingBytes">
            <summary>
            Gets the length of remaining data in bytes.
            </summary>
            <value>
            The remaining bytes.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.Parser">
            <summary>
            Gets the parser.
            </summary>
            <value>
            The parser.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.Position">
            <summary>
            Gets the current position of this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.TotalSize">
            <summary>
            Gets the total size of this chunk.
            </summary>
            <value>
            The total size.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.#ctor(MonoAudio.Data.IDataSource{System.Byte},MonoAudio.Codecs.Waveform.Parsing.IRf64Parser,MonoAudio.StackOnlyActionContainer{System.UInt64}@)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader" /> class that reads <see cref="F:MonoAudio.Codecs.Waveform.ChunkId.Riff" /> and <see cref="F:MonoAudio.Codecs.Waveform.ChunkId.Rf64" /> chunk.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="parser">The RF64 parser instance.</param>
            <param name="totalSizeSetter">A method to set the <see cref="P:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.TotalSize"/>.</param>
            <exception cref="T:System.ArgumentNullException">dataSource</exception>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.#ctor(MonoAudio.Data.IDataSource{System.Byte},MonoAudio.Codecs.Waveform.Parsing.IRf64Parser)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader" /> class that reads <see cref="F:MonoAudio.Codecs.Waveform.ChunkId.Riff" /> and <see cref="F:MonoAudio.Codecs.Waveform.ChunkId.Rf64" /> chunk.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="parser">The RF64 parser instance.</param>
            <exception cref="T:System.ArgumentNullException">dataSource</exception>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.Read(System.Span{System.Byte})">
            <summary>
            Reads the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.ReadAsync(System.Memory{System.Byte})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte" />s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.ReadSubChunk">
            <summary>
            Opens the stream for sub chunk.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.Skip(System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="numberOfElementsToSkip">The number of elements to skip.</param>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.Rf64.Rf64ChunkReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.RiffChunkHeader">
            <summary>
            Represents a header of RIFF chunks.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkHeader.#ctor(MonoAudio.Codecs.Waveform.ChunkId,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkHeader"/> struct.
            </summary>
            <param name="chunkId">The chunk identifier.</param>
            <param name="length">The length.</param>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkHeader.ChunkId">
            <summary>
            Gets or sets the chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkHeader.Length">
            <summary>
            Gets or sets the length of this chunk.
            </summary>
            <value>
            The length of this chunk.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkHeader.ReverseEndianness">
            <summary>
            Reverses endianness for all fields, and returns a new value.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkHeader.ReadChunkHeader(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads the chunk header from the specified <paramref name="dataSource"/>.
            </summary>
            <param name="dataSource">The data source.</param>
            <returns>The deserialized chunk header.</returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.RiffChunkName">
            <summary>
            Represents a name of a RIFF chunk.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkName.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkName"/> struct.
            </summary>
            <param name="b0">The first byte.</param>
            <param name="b1">The second byte.</param>
            <param name="b2">The third byte.</param>
            <param name="b3">The fourth byte.</param>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkName.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkName"/> struct.
            </summary>
            <param name="valueLittleEndian">The value in little endian.</param>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkName.Value">
            <summary>
            Gets the value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkName.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkName.Equals(MonoAudio.Codecs.Waveform.RiffChunkName)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkName.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkName.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            The fully qualified type name.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkName.op_Equality(MonoAudio.Codecs.Waveform.RiffChunkName,MonoAudio.Codecs.Waveform.RiffChunkName)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkName"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkName"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkName"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkName.op_Inequality(MonoAudio.Codecs.Waveform.RiffChunkName,MonoAudio.Codecs.Waveform.RiffChunkName)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkName"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkName"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkName"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.RiffChunkReader">
            <summary>
            Parses and reads RIFF Chunks.
            </summary>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkReader.CanPubliclyRead">
            <summary>
            Gets a value indicating whether this instance can be read by <see cref="M:MonoAudio.Codecs.Waveform.RiffChunkReader.Read(System.Span{System.Byte})"/> and <see cref="M:MonoAudio.Codecs.Waveform.RiffChunkReader.ReadAsync(System.Memory{System.Byte})"/>.
            </summary>
            <value>
              <c>true</c> if this instance can publicly read; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkReader.ChunkId">
            <summary>
            Gets the current chunk identifier.
            </summary>
            <value>
            The chunk identifier.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkReader.CurrentSubChunk">
            <summary>
            Gets the current sub chunk.
            </summary>
            <value>
            The current sub chunk.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkReader.RemainingBytes">
            <summary>
            Gets the length of remaining data in bytes.
            </summary>
            <value>
            The remaining bytes.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkReader.TotalSize">
            <summary>
            Gets the total size of this chunk.
            </summary>
            <value>
            The total size.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.RiffChunkReader.Position">
            <summary>
            Gets the current position of this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkReader.#ctor(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.RiffChunkReader"/> class that reads <see cref="F:MonoAudio.Codecs.Waveform.ChunkId.Riff"/> chunk.
            </summary>
            <param name="dataSource">The data source.</param>
            <exception cref="T:System.ArgumentNullException">dataSource</exception>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkReader.Read(System.Span{System.Byte})">
            <summary>
            Reads the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkReader.ReadAsync(System.Memory{System.Byte})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte" />s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkReader.ReadSubChunk">
            <summary>
            Opens the stream for sub chunk.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkReader.Skip(System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="numberOfElementsToSkip">The number of elements to skip.</param>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.RiffChunkReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.Riff.RiffSubChunkId">
            <summary>
            Represents a RIFF sub-chunk ID for waveform file format in Little Endian.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.Riff.RiffSubChunkId.Wave">
            <summary>
            The wave sub chunk.
            </summary>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.StandardWaveFormat">
            <summary>
            Represents a standard wave format inside "*.wav" files.
            </summary>
            <seealso cref="T:MonoAudio.IWaveFormat" />
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.StandardWaveFormat.#ctor(MonoAudio.AudioEncoding,System.UInt16,System.UInt32,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Codecs.Waveform.StandardWaveFormat"/> struct.
            </summary>
            <param name="encoding">The encoding.</param>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
            <param name="bytesPerSecond">The bytes per second.</param>
            <param name="blockSize">Size of the block.</param>
            <param name="bitDepth">The bit depth.</param>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.StandardWaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.StandardWaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.StandardWaveFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.StandardWaveFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.StandardWaveFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Codecs.Waveform.StandardWaveFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.Codecs.Waveform.StandardWaveFormat.SampleSize">
            <summary>
            Gets the size of the frame.
            </summary>
            <value>
            The size of the frame.
            </value>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.StandardWaveFormat.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.StandardWaveFormat.Equals(MonoAudio.Codecs.Waveform.StandardWaveFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.StandardWaveFormat.Equals(MonoAudio.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.StandardWaveFormat.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.StandardWaveFormat.op_Equality(MonoAudio.Codecs.Waveform.StandardWaveFormat,MonoAudio.Codecs.Waveform.StandardWaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Codecs.Waveform.StandardWaveFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Codecs.Waveform.StandardWaveFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Codecs.Waveform.StandardWaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.StandardWaveFormat.op_Inequality(MonoAudio.Codecs.Waveform.StandardWaveFormat,MonoAudio.Codecs.Waveform.StandardWaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Codecs.Waveform.StandardWaveFormat"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Codecs.Waveform.StandardWaveFormat"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Codecs.Waveform.StandardWaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.WaveCodec">
            <summary>
            Encodes and decodes some ".wav" files in certain formats.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.WaveCodec.DetermineDecodabilityAsync(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Determines whether the data from <paramref name="dataSource" /> can be decoded by this decoder asynchronously.<br/>
            The actual decoding stream must be opened after seeking the source <see cref="T:System.IO.Stream"/> to head.
            </summary>
            <param name="dataSource">The <see cref="T:MonoAudio.Data.IDataSource`1" /> to read the data from.</param>
            <returns>
            The whole verification task which returns the value below:<br /><c>true</c> if the data from <paramref name="dataSource" /> can be supported by this decoder, otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.WaveCodec.TryCreateDecoderAsync(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Tries to create a decoder that asynchronously decodes the data asynchronously read from <paramref name="dataSource" />.
            </summary>
            <param name="dataSource">The <see cref="T:MonoAudio.Data.IDataSource`1" /> to read the data from.</param>
            <returns>
            success: The value which indicates whether the data is decodable, and the decoder is created.
            decoder: The decoding <see cref="T:MonoAudio.IWaveSource" />.
            </returns>
        </member>
        <member name="T:MonoAudio.Codecs.Waveform.WaveformSubFormats">
            <summary>
            Represents a sub format for <see cref="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.SubFormat"/>.
            </summary>
            <summary>
            Represents a sub format for <see cref="P:MonoAudio.Codecs.Waveform.ExtensibleWaveFormat.SubFormat"/>.
            </summary>
        </member>
        <member name="M:MonoAudio.Codecs.Waveform.WaveformSubFormats.ToGuid(MonoAudio.AudioEncoding)">
            <summary>
            Converts specified <paramref name="encoding"/> to GUID.
            </summary>
            <param name="encoding">The encoding.</param>
            <returns></returns>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Mpeg1Packet">
            <summary>
            MPEG-1 audio payload.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Mpeg1Payload">
            <summary>
            MPEG1 audio packet.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Unknown">
            <summary>
            Unknown format
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.LinearPcm">
            <summary>
            Microsoft PCM Format
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.MsAdpcm">
            <summary>
            Microsoft ADPCM Format
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.IeeeFloat">
            <summary>
            IEEE 754 Single Precision Floating-Point Number
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Vselp">
            <summary>
            Vector sum excited linear prediction Compaq Computer Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.IbmCvsd">
            <summary>
            IBM Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Alaw">
            <summary>
            A-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Mulaw">
            <summary>
            Î¼-law format by Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.OkiAdpcm">
            <summary>
            OKI ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.ImaAdpcm">
            <summary>
            Intel Corporation ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.MediaspaceAdpcm">
            <summary>
            Videologic ADPCM
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.SierraAdpcm">
            <summary>
            Sierra Semiconductor Corp
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.G723Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Digistd">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Digifix">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.DialogicOkiAdpcm">
            <summary>
            Dialogic Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.MediavisionAdpcm">
            <summary>
            Media Vision, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.CuCodec">
            <summary>
            Hewlett-Packard Company
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.YamahaAdpcm">
            <summary>
            Yamaha Corporation of America
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Sonarc">
            <summary>
            Speech Compression
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.DspgroupTruespeech">
            <summary>
            DSP Group, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Echosc1">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.AudiofileAf36">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Aptx">
            <summary>
            Audio Processing Technology
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.AudiofileAf10">
            <summary>
            Audiofile, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Prosody1612">
            <summary>
            Aculab plc
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Lrc">
            <summary>
            Merging Technologies S.A.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.DolbyAc2">
            <summary>
            Dolby Laboratories
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Gsm610">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Msnaudio">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.AntexAdpcme">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.ControlResVqlpc">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Digireal">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Digiadpcm">
            <summary>
            DSP Solutions, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.ControlResCr10">
            <summary>
            Control Resources Limited
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.NmsVbxadpcm">
            <summary>
            Natural MicroSystems
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.RolandRdac">
            <summary>
            Roland
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Echosc3">
            <summary>
            Echo Speech Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.RockwellAdpcm">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.RockwellDigitalk">
            <summary>
            Rockwell International
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Xebec">
            <summary>
            Xebec Multimedia Solutions Limited
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.G721Adpcm">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.G728Celp">
            <summary>
            Antex Electronics Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Msg723">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Mpeg">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Rt24">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Pac">
            <summary>
            InSoft Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Mpeglayer3">
            <summary>
            MPEG 3 Layer 1
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.LucentG723">
            <summary>
            Lucent Technologies
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Cirrus">
            <summary>
            Cirrus Logic
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Espcm">
            <summary>
            ESS Technology
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Voxware">
            <summary>
            Voxware Inc
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.CanopusAtrac">
            <summary>
            Canopus, Co., Ltd.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.G726Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.G722Adpcm">
            <summary>
            APICOM
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Dsat">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.DsatDisplay">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareByteAligned">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareAc8">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareAc10">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareAc16">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareAc20">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareRt24">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareRt29">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareRt29hw">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareVr12">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareVr18">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxwareTq40">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Softsound">
            <summary>
            Softsound, Ltd.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VoxareTq60">
            <summary>
            Voxware Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Msrt24">
            <summary>
            Microsoft Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.G729a">
            <summary>
            AT&amp;T Laboratories
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.MviMv12">
            <summary>
            Motion Pixels
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.DfG726">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.DfGsm610">
            <summary>
            DataFusion Systems (Pty) (Ltd)
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Onlive">
            <summary>
            OnLive! Technologies, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Sbc24">
            <summary>
            Siemens Business Communications Systems
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.DolbyAc3Spdif">
            <summary>
            Sonic Foundry
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.ZyxelAdpcm">
            <summary>
            ZyXEL Communications, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.PhilipsLpcbb">
            <summary>
            Philips Speech Processing
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Packed">
            <summary>
            Studer Professional Audio AG
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.RhetorexAdpcm">
            <summary>
            Rhetorex, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.IbmMulaw">
            <summary>
            IBM mu-law format
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.IbmAlaw">
            <summary>
            IBM a-law format
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Adpcm">
            <summary>
            IBM AVC Adaptive Differential PCM format
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VivoG723">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VivoSiren">
            <summary>
            Vivo Software
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.DigitalG723">
            <summary>
            Digital Equipment Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.CreativeAdpcm">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.CreativeFastspeech8">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.CreativeFastspeech10">
            <summary>
            Creative Labs, Inc
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Quarterdeck">
            <summary>
            Quarterdeck Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.FmTownsSnd">
            <summary>
            Fujitsu Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.BzvDigital">
            <summary>
            Brooktree Corporation
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.VmeVmpcm">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Oligsm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Oliadpcm">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Olicelp">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Olisbc">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Oliopr">
            <summary>
            Ing C. Olivetti &amp; C., S.p.A.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.LhCodec">
            <summary>
            Lernout &amp; Hauspie
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Norris">
            <summary>
            Norris Communications, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.SoundspaceMusicompress">
            <summary>
            AT&amp;T Labs, Inc.
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.Dvm">
            <summary>
            FAST Multimedia AG
            </summary>
        </member>
        <member name="F:MonoAudio.Codecs.Waveform.WaveformSubFormats.InterwavVsc112">
            <summary>
            ?????
            </summary>
        </member>
        <member name="T:MonoAudio.Concepts.ConceptKind">
            <summary>
            Represents a kind of concepts.
            </summary>
        </member>
        <member name="F:MonoAudio.Concepts.ConceptKind.None">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:MonoAudio.Concepts.ConceptKind.Unit">
            <summary>
            The concept of Units.
            </summary>
        </member>
        <member name="T:MonoAudio.Concepts.ConceptAttribute">
            <summary>
            Defines a concept.
            </summary>
        </member>
        <member name="M:MonoAudio.Concepts.ConceptAttribute.#ctor(MonoAudio.Concepts.ConceptKind)">
            <summary>
            Initializes a new instance of <see cref="T:MonoAudio.Concepts.ConceptAttribute"/>.
            </summary>
            <param name="kind">The kind of concept.</param>
        </member>
        <member name="P:MonoAudio.Concepts.ConceptAttribute.Kind">
            <summary>
            The kind of concept.
            </summary>
        </member>
        <member name="T:MonoAudio.Units">
            <summary>
            The concepts for Units.
            </summary>
        </member>
        <member name="P:MonoAudio.Units.Frame">
            <summary>
            The <see cref="P:MonoAudio.Units.Frame"/> is a packed unit of multiple audio <see cref="P:MonoAudio.Units.Sample"/>s.<br/>
            A single <see cref="P:MonoAudio.Units.Frame"/> contains the same number of samples as the channel of the stream.<br/>
            For example, the length of frames in the 2ch <see cref="F:MonoAudio.AudioEncoding.IeeeFloat"/> audio data in bytes is <c>sizeof(float) * 4</c>, which is 16.<br/>
            </summary>
        </member>
        <member name="P:MonoAudio.Units.Sample">
            <summary>
            The <see cref="P:MonoAudio.Units.Sample"/> is a smallest unit of the multi-channel discrete(digital) audio data.<br/>
            The <see cref="P:MonoAudio.Units.Sample"/> besides channel-by-channel, so the length of frame in bytes is the size of the sample itself, multiplied by the number of channels.
            </summary>
        </member>
        <member name="T:MonoAudio.Conversion.IAudioConverter`4">
            <summary>
            The base definition of some audio converters.
            </summary>
            <typeparam name="TFrom">The type to convert from.</typeparam>
            <typeparam name="TFromFormat"></typeparam>
            <typeparam name="TTo">The type to convert data to.</typeparam>
            <typeparam name="TToFormat"></typeparam>
        </member>
        <member name="P:MonoAudio.Conversion.IAudioConverter`4.Source">
            <summary>
            Gets the source to read the samples from.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="T:MonoAudio.Conversion.Resampling.Sample.ResamplerBase">
            <summary>
            The base of resampler.
            </summary>
            <seealso cref="T:MonoAudio.Filters.IAudioFilter`2" />
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value>
              <c>true</c> if this instance can seek; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Channels">
            <summary>
            Gets the channels of output.
            </summary>
            <value>
            The channels of output.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.ChannelsDivisor">
            <summary>
            Gets the divisor for dividing a number by <see cref="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Channels"/>.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateDivDivisor">
            <summary>
            Gets the divisor for converting source sample rate to destination sample rate.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateDiv">
            <summary>
            Gets the rate source sample rate.
            </summary>
            <value>
            The number to divide with.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateDivInverse">
            <summary>
            Gets the divisor source sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateMulDivisor">
            <summary>
            Gets the divisor for converting destination sample rate to source sample rate.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateMul">
            <summary>
            Gets the rate destination sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.RateMulInverse">
            <summary>
            Gets the divisor destination sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.Resampling.Sample.ResamplerBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destinationSampleRate">The destination sample rate.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">destinationSampleRate</exception>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetCeiledInputPosition(System.Int32)">
            <summary>
            Gets the rounded input position further than -inf.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetFlooredOutputPosition(System.Int32)">
            <summary>
            Gets the rounded output position further than +inf.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetConversionGradient(System.Int32)">
            <summary>
            Calculates the conversion gradient a little precisely.
            </summary>
            <param name="outputPosition">The output position that is not multiplied by <see cref="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Channels"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetConversionPosition(System.Int32)">
            <summary>
            Calculates the conversion gradient.
            </summary>
            <param name="outputPosition">The output position that is not multiplied by <see cref="P:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Channels"/>.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Int32)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Int64)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetInputPosition(System.Single)">
            <summary>
            Gets the input buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="outputPosition">The output position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Int32)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Int64)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.GetOutputPosition(System.Single)">
            <summary>
            Gets the output buffer position.
            Supports Lighter rate conversion.
            </summary>
            <param name="inputPosition">The input position.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose">
            <summary>
            Releases all resource used by the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> object.
            </summary>
            <remarks>Call <see cref="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose"/> when you are finished using the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/>. The <see cref="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose"/>
            method leaves the <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> in an
            unusable state. After calling <see cref="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose"/>, you must release all references to the
            <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/> so the garbage collector can
            reclaim the memory that the <see cref="T:MonoAudio.Conversion.Resampling.SampleResampler.ResamplerBase"/>
            was occupying.</remarks>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.ActualDispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.ResamplerBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.Resampling.Sample.SplineResampler">
             <summary>
             Performs up-sampling using Catmull-Rom Spline interpolation.
            
             </summary>
             <seealso cref="T:MonoAudio.Conversion.Resampling.Sample.ResamplerBase" />
        </member>
        <member name="F:MonoAudio.Conversion.Resampling.Sample.SplineResampler.CachedDirectStereoResampler.preCalculatedCatmullRomCoefficents">
            <summary>
            The pre calculated catmull-rom coefficents.<br/>
            X: The coefficent for value1 ((-xP3 + 2 * xP2 - x) * 0.5f)<br/>
            Y: The coefficent for value2 (((3 * xP3) - (5 * xP2) + 2) * 0.5f)<br/>
            Z: The coefficent for value3 ((-(3 * xP3) + 4 * xP2 + x) * 0.5f)<br/>
            W: The coefficent for value4 ((xP3 - xP2) * 0.5f)<br/>
            </summary>
        </member>
        <member name="F:MonoAudio.Conversion.Resampling.Sample.SplineResampler.preCalculatedCatmullRomCoefficents">
            <summary>
            The pre calculated catmull-rom coefficents.<br/>
            X: The coefficent for value1 ((-xP3 + 2 * xP2 - x) * 0.5f)<br/>
            Y: The coefficent for value2 (((3 * xP3) - (5 * xP2) + 2) * 0.5f)<br/>
            Z: The coefficent for value3 ((-(3 * xP3) + 4 * xP2 + x) * 0.5f)<br/>
            W: The coefficent for value4 ((xP3 - xP2) * 0.5f)<br/>
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.SplineResampler.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.Resampling.Sample.SplineResampler"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="destinationSampleRate">The destination sample rate.</param>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.SplineResampler.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Conversion.Resampling.Sample.SplineResampler.ActualDispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.SplineResampler.InternalResampler.ChannelsDivisor">
            <summary>
            Gets the divisor for dividing a number by Channels.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.SplineResampler.InternalResampler.RateDivDivisor">
            <summary>
            Gets the divisor for converting source sample rate to destination sample rate.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.SplineResampler.InternalResampler.RateDiv">
            <summary>
            Gets the rate source sample rate.
            </summary>
            <value>
            The number to divide with.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.SplineResampler.InternalResampler.RateDivInverse">
            <summary>
            Gets the divisor source sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.SplineResampler.InternalResampler.RateMulDivisor">
            <summary>
            Gets the divisor for converting destination sample rate to source sample rate.
            </summary>
            <value>
            The divisor object.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.SplineResampler.InternalResampler.RateMul">
            <summary>
            Gets the rate destination sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.Resampling.Sample.SplineResampler.InternalResampler.RateMulInverse">
            <summary>
            Gets the divisor destination sample rate.
            </summary>
            <value>
            The number to multiply.
            </value>
        </member>
        <member name="F:MonoAudio.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.Direct">
            <summary>
            Calculate on demand
            </summary>
        </member>
        <member name="F:MonoAudio.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.CachedDirect">
            <summary>
            Pre-Calculated
            </summary>
        </member>
        <member name="F:MonoAudio.Conversion.Resampling.Sample.SplineResampler.ResampleStrategy.CachedWrappedOdd">
            <summary>
            Pre-Calculated and Wrapped
            </summary>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter">
            <summary>
            Converts Sample to 32-bit IeeeFloat PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToFloat32Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter">
            <summary>
            Converts samples to 16-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter"/> does the 16-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm16Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter">
            <summary>
            Converts samples to 24-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter"/> does the 24-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm24Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter">
            <summary>
            Converts samples to 32-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Boolean,MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.AccuracyMode"/> when <c>true</c>.</param>
            <param name="endianness">The destination endianness.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter"/> does the 32-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Endianness">
            <summary>
            Gets the endianness.
            </summary>
            <value>
            The endianness.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPcm32Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter">
            <summary>
            Converts samples to 8-bit PCM.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="accuracyNeeded">Turns on <see cref="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.AccuracyMode"/> when <c>true</c>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.AccuracyMode">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter"/> does the 8-bit Delta-Sigma modulation.
            </summary>
            <value>
              <c>true</c> if the accuracy mode is turned on; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToPCM8Converter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase">
            <summary>
            Converts samples to wave data.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2" /> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2" /> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2" /> lasts in samples.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="F:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},MonoAudio.IWaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.SampleToWaveConverters.SampleToWaveConverterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.ALawToSampleConverter">
            <summary>
            Converts 8-bit A-Law PCM to Sample.
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.ALawToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.IWaveFormat},MonoAudio.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.ALawToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.ALawToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.ALawToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.ALawToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter">
            <summary>
            Converts 32-bit IeeeFloat PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Float32ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter">
            <summary>
            Converts 16-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter">
            <summary>
            Converts 24-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm24ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter">
            <summary>
            Converts 32-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Endianness">
            <summary>
            Gets the endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </summary>
            <value>
            The endianness of <see cref="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source"/>.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.IWaveFormat},MonoAudio.Endianness)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm16ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="endianness">The endianness of <paramref name="source"/>.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm32ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter">
            <summary>
            Converts 8-bit PCM to Sample.
            </summary>
            <seealso cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase" />
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.IWaveFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter"/> class.
            </summary>
            <param name="source">The source.</param>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.Pcm8ToSampleConverter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase">
            <summary>
            Converts wave data to samples.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2" /> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.BytesPerSample">
            <summary>
            Gets the bytes consumed per sample.
            </summary>
            <value>
            The bytes consumed per sample.
            </value>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2" /> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2" /> lasts in samples.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.#ctor(MonoAudio.IReadableAudioSource{System.Byte,MonoAudio.IWaveFormat},MonoAudio.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">
            source
            or
            format
            </exception>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="F:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.disposedValue">
            <summary>
            The disposed value
            </summary>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Conversion.WaveToSampleConverters.WaveToSampleConverterBase.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Data.Binary.DataReaderExtensions">
            <summary>
            Provides some functions that helps you to analyze data input binary.
            </summary>
            <seealso cref="T:MonoAudio.Data.IDataSource`1" />
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadByte(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single <see cref="T:System.Byte"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadSignedByte(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single <see cref="T:System.SByte"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadUInt16LittleEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadUInt16BigEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadInt16LittleEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.Int16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadInt16BigEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.Int16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadUInt32LittleEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadUInt32BigEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadInt32LittleEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.Int32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadInt32BigEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.Int32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadUInt64LittleEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadUInt64BigEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadInt64LittleEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single little-endianed <see cref="T:System.Int64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadInt64BigEndian(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single big-endianed <see cref="T:System.Int64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadStruct``1(MonoAudio.Data.IDataSource{System.Byte})">
            <summary>
            Reads single <typeparamref name="TStruct"/> value from <paramref name="dataReader"/>.
            </summary>
            <typeparam name="TStruct">The type to read.</typeparam>
            <param name="dataReader">The data reader.</param>
            <returns>The deserialized <typeparamref name="TStruct"/> value.</returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadByte(MonoAudio.Data.IDataSource{System.Byte},System.Byte@)">
            <summary>
            Reads single <see cref="T:System.Byte"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadSignedByte(MonoAudio.Data.IDataSource{System.Byte},System.SByte@)">
            <summary>
            Reads single <see cref="T:System.SByte"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns>The value read.</returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadUInt16LittleEndian(MonoAudio.Data.IDataSource{System.Byte},System.UInt16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadUInt16BigEndian(MonoAudio.Data.IDataSource{System.Byte},System.UInt16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadInt16LittleEndian(MonoAudio.Data.IDataSource{System.Byte},System.Int16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadInt16BigEndian(MonoAudio.Data.IDataSource{System.Byte},System.Int16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int16"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadUInt32LittleEndian(MonoAudio.Data.IDataSource{System.Byte},System.UInt32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadUInt32BigEndian(MonoAudio.Data.IDataSource{System.Byte},System.UInt32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadInt32LittleEndian(MonoAudio.Data.IDataSource{System.Byte},System.Int32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadInt32BigEndian(MonoAudio.Data.IDataSource{System.Byte},System.Int32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int32"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadUInt64LittleEndian(MonoAudio.Data.IDataSource{System.Byte},System.UInt64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadUInt64BigEndian(MonoAudio.Data.IDataSource{System.Byte},System.UInt64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadInt64LittleEndian(MonoAudio.Data.IDataSource{System.Byte},System.Int64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.TryReadInt64BigEndian(MonoAudio.Data.IDataSource{System.Byte},System.Int64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int64"/> from <paramref name="dataReader"/>.
            </summary>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ReadAll``1(MonoAudio.Data.IDataSource{``0},System.Span{``0})">
            <summary>
            Reads some data from <paramref name="dataSource"/> to fill <paramref name="buffer"/>.
            </summary>
            <typeparam name="T">Type of buffer data.</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.CheckRead``1(MonoAudio.Data.IDataSource{``0},System.Span{``0})">
            <summary>
            Reads some data from <paramref name="dataSource"/> to <paramref name="buffer"/>.
            </summary>
            <typeparam name="T">Type of buffer data.</typeparam>
            <param name="dataSource">The data source.</param>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Binary.DataReaderExtensions.ThrowWhenInsufficient(MonoAudio.ReadResult,System.Int32,System.String)">
            <summary>
            Throws an exception when the read data is insufficient.
            </summary>
            <param name="readResult">The read result.</param>
            <param name="lengthRequired">The least length required.</param>
            <param name="situation">The situation of reading some required data.</param>
        </member>
        <member name="T:MonoAudio.Data.BufferingException">
            <summary>
            The exception that is thrown when a reader of <see cref="T:MonoAudio.Data.IDataSource`1"/> has ran out of buffered data.
            </summary>
            <seealso cref="T:System.IO.IOException" />
        </member>
        <member name="M:MonoAudio.Data.BufferingException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Data.BufferingException"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.Data.BufferingException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Data.BufferingException"/> class.
            </summary>
            <param name="message">A <see cref="T:System.String"></see> that describes the error. The content of message is intended to be understood by humans. The caller of this constructor is required to ensure that this string has been localized for the current system culture.</param>
        </member>
        <member name="M:MonoAudio.Data.BufferingException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Data.BufferingException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="inner">The inner.</param>
        </member>
        <member name="M:MonoAudio.Data.BufferingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Data.BufferingException"/> class.
            </summary>
            <param name="info">The data for serializing or deserializing the object.</param>
            <param name="context">The source and destination for the object.</param>
        </member>
        <member name="T:MonoAudio.Data.DataCache`1">
            <summary>
            Caches data into managed memory region.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.BufferInstance.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:MonoAudio.Data.DataCache`1.BytesWritten">
            <summary>
            Gets the bytes written inside internal buffer.
            </summary>
            <value>
            The bytes written.
            </value>
        </member>
        <member name="P:MonoAudio.Data.DataCache`1.ReadPosition">
            <summary>
            Gets or sets the current reading position.
            </summary>
            <value>
            The read position.
            </value>
        </member>
        <member name="P:MonoAudio.Data.DataCache`1.MonoAudio#Data#IDataSource{TSample}#Position">
            <summary>
            Gets the READING position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Data.DataCache`1"/> class.
            </summary>
            <param name="allocationUnit">The allocation unit.</param>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <typeparamref name="TSample"/>s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.ReadAsync(System.Memory{`0})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte" />s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.Write(System.ReadOnlySpan{`0})">
            <summary>
            Writes the data inside specified buffer to this instance.
            </summary>
            <param name="buffer">The data buffer.</param>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.WriteAsync(System.ReadOnlyMemory{`0})">
            <summary>
            Asynchronously writes the data inside specified buffer to this instance.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks the specified offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.SeekTo(System.UInt64)">
            <summary>
            Seeks this data source to the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.Skip(System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="numberOfElementsToSkip">The number of elements to skip.</param>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Data.DataCache`1"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.Data.DataCache`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Data.DataUtils">
            <summary>
            Provides some extensions for <see cref="T:MonoAudio.Data.IDataSource`1"/>s.
            </summary>
        </member>
        <member name="M:MonoAudio.Data.DataUtils.SkipWithFallback``1(MonoAudio.Data.IDataSource{``0},System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="dataSource"></param>
            <param name="numberOfElementsToSkip">The number of elements to skip.</param>
        </member>
        <member name="T:MonoAudio.Data.IDataSource`1">
            <summary>
            Defines a base infrastructure of a source of binary data.
            </summary>
        </member>
        <member name="M:MonoAudio.Data.IDataSource`1.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>The number of <typeparamref name="TSample"/>s read from this <see cref="T:MonoAudio.Data.IDataSource`1"/>.</returns>
        </member>
        <member name="M:MonoAudio.Data.IDataSource`1.ReadAsync(System.Memory{`0})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>The number of <typeparamref name="TSample"/>s read from this <see cref="T:MonoAudio.Data.IDataSource`1"/>.</returns>
        </member>
        <member name="P:MonoAudio.Data.IDataSource`1.Position">
            <summary>
            Gets the current position of this <see cref="T:MonoAudio.Data.IDataSource`1"/>.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="T:MonoAudio.Data.ISkippableDataSource`1">
            <summary>
            Defines a base infrastructure of a source of binary data, which supports skipping.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <seealso cref="T:MonoAudio.Data.IDataSource`1" />
        </member>
        <member name="M:MonoAudio.Data.ISkippableDataSource`1.Skip(System.UInt64)">
            <summary>
            Skips this data source the specified number of elements to skip.
            </summary>
            <param name="numberOfElementsToSkip">The number of elements to skip.</param>
        </member>
        <member name="T:MonoAudio.Data.ISeekableDataSource`1">
            <summary>
            Defines a base infrastructure of a source of binary data, which supports seeking.
            </summary>
            <seealso cref="T:MonoAudio.Data.IDataSource`1" />
        </member>
        <member name="M:MonoAudio.Data.ISeekableDataSource`1.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks this data source with the specified offset.
            </summary>
            <param name="offset">The offset.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="M:MonoAudio.Data.ISeekableDataSource`1.SeekTo(System.UInt64)">
            <summary>
            Seeks this data source to the specified index.
            </summary>
            <param name="index">The index.</param>
        </member>
        <member name="T:MonoAudio.Data.IDataSink`1">
            <summary>
            Defines a base infrastructure for writing data.
            </summary>
            <typeparam name="TSample">The type of writing data.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:MonoAudio.Data.IDataSink`1.WriteAsync(System.ReadOnlyMemory{`0})">
            <summary>
            Writes the specified <paramref name="data"/> asynchronously.
            </summary>
            <param name="data">The writing data.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.IDataSink`1.Write(System.ReadOnlySpan{`0})">
            <summary>
            Writes the specified data.
            </summary>
            <param name="data">The writing data.</param>
        </member>
        <member name="T:MonoAudio.Data.IDataWriter`1">
            <summary>
            Defines a base infrastructure for writing data, with seek functionality.
            </summary>
        </member>
        <member name="M:MonoAudio.Data.IDataWriter`1.SeekTo(System.UInt64)">
            <summary>
            Seeks this data writer to the specified index.
            </summary>
            <param name="position">The position to seek to, from the very first written <typeparamref name="TSample"/>.</param>
        </member>
        <member name="M:MonoAudio.Data.IDataWriter`1.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks this data writer with the specified offset and origin.
            </summary>
            <param name="offset">The offset.</param>
            <param name="origin">The origin.</param>
        </member>
        <member name="T:MonoAudio.Data.Parsing.BufferedBinaryParser">
            <summary>
            Parses binary data with internal buffer.<br/>
            It is more efficient than <see cref="T:MonoAudio.Data.Binary.DataReaderExtensions"/>'s methods.<br/>
            The <see cref="T:MonoAudio.Data.Parsing.BufferedBinaryParser"/> won't <see cref="M:System.IDisposable.Dispose"/> the <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source"/> even if the parser gets disposed.
            </summary>
            <seealso cref="T:MonoAudio.Data.IDataSource`1" />
        </member>
        <member name="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Position">
            <summary>
            Gets the current position of this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="F:MonoAudio.Data.Parsing.BufferedBinaryParser.MinimumBufferLength">
            <summary>
            The minimum buffer length
            </summary>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.#ctor(MonoAudio.Data.IDataSource{System.Byte},System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Data.Parsing.BufferedBinaryParser"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="bufferLength">The length of internal buffer, which must be larger than or equals to <see cref="F:MonoAudio.Data.Parsing.BufferedBinaryParser.MinimumBufferLength"/>.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.Read(System.Span{System.Byte})">
            <summary>
            Reads the data to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte"/>s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.ReadAsync(System.Memory{System.Byte})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <see cref="T:System.Byte"/>s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseByte(System.Byte@)">
            <summary>
            Reads single <see cref="T:System.Byte" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseInt16BigEndian(System.Int16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int16" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseInt16LittleEndian(System.Int16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int16" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseInt32BigEndian(System.Int32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int32" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseInt32LittleEndian(System.Int32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int32" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseInt64BigEndian(System.Int64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int64" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseInt64LittleEndian(System.Int64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int64" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseSignedByte(System.SByte@)">
            <summary>
            Reads single <see cref="T:System.SByte" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseUInt16BigEndian(System.UInt16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt16" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseUInt16LittleEndian(System.UInt16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt16" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseUInt32BigEndian(System.UInt32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt32" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseUInt32LittleEndian(System.UInt32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt32" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseUInt64BigEndian(System.UInt64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt64" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseUInt64LittleEndian(System.UInt64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt64" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseDoubleLittleEndian(System.Double@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Double" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseDoudleBigEndian(System.Double@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Double" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseSingleLittleEndian(System.Single@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Single" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.BufferedBinaryParser.TryParseSingleBigEndian(System.Single@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Single" /> from <see cref="P:MonoAudio.Data.Parsing.BufferedBinaryParser.Source" />.
            </summary>
            <param name="read"></param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Data.Parsing.IBinaryParser">
            <summary>
            Defines a base infrastructure to parse binary data from <see cref="T:MonoAudio.Data.IDataSource`1"/>.
            </summary>
        </member>
        <member name="P:MonoAudio.Data.Parsing.IBinaryParser.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseByte(System.Byte@)">
            <summary>
            Reads single <see cref="T:System.Byte"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseSignedByte(System.SByte@)">
            <summary>
            Reads single <see cref="T:System.SByte"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseUInt16LittleEndian(System.UInt16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt16"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseUInt16BigEndian(System.UInt16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt16"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseInt16LittleEndian(System.Int16@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int16"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseInt16BigEndian(System.Int16@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int16"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseUInt32LittleEndian(System.UInt32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt32"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseUInt32BigEndian(System.UInt32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt32"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseInt32LittleEndian(System.Int32@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int32"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseInt32BigEndian(System.Int32@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int32"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseUInt64LittleEndian(System.UInt64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.UInt64"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseUInt64BigEndian(System.UInt64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.UInt64"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseInt64LittleEndian(System.Int64@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Int64"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseInt64BigEndian(System.Int64@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Int64"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseDoubleLittleEndian(System.Double@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Double"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseDoudleBigEndian(System.Double@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Double"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseSingleLittleEndian(System.Single@)">
            <summary>
            Reads single little-endianed <see cref="T:System.Single"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Data.Parsing.IBinaryParser.TryParseSingleBigEndian(System.Single@)">
            <summary>
            Reads single big-endianed <see cref="T:System.Single"/> from <see cref="P:MonoAudio.Data.Parsing.IBinaryParser.Source"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Data.PreloadDataBuffer`1">
            <summary>
            Buffers the data asynchronously like YouTube does.<br/>
            It reads a little more than required, and prevents waiting for IOs.
            </summary>
        </member>
        <member name="P:MonoAudio.Data.PreloadDataBuffer`1.Position">
            <summary>
            Gets the current position of this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="M:MonoAudio.Data.PreloadDataBuffer`1.#ctor(MonoAudio.Data.IDataSource{`0},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Data.PreloadDataBuffer`1"/> class.
            </summary>
            <param name="dataSource">The data source.</param>
            <param name="initialBlockSize">
            The size of initial buffer in Frames(independent on the number of channel and the type of sample).<br/>
            The buffer is automatically extended if the internal buffer is smaller than the size of reading buffers.
            </param>
            <param name="internalBufferNumber">The number of internal buffer.</param>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialBlockSize"/> should be larger than or equals to 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="internalBufferNumber"/> should be larger than or equals to 2.</exception>
        </member>
        <member name="M:MonoAudio.Data.PreloadDataBuffer`1.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified buffer.
            </summary>
            <param name="destination">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Data.PreloadDataBuffer`1.ReadAsync(System.Memory{`0})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <typeparamref name="TSample" />s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Data.PreloadDataBuffer`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Data.PreloadDataBuffer`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Data.SampleDataSource`2">
            <summary>
            Translates calls between <see cref="T:MonoAudio.Data.IDataSource`1"/> and <see cref="T:MonoAudio.IReadableAudioSource`2"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
        </member>
        <member name="M:MonoAudio.Data.SampleDataSource`2.#ctor(MonoAudio.IReadableAudioSource{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Data.SampleDataSource`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:MonoAudio.Data.SampleDataSource`2.Position">
            <summary>
            Gets the current position of this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="M:MonoAudio.Data.SampleDataSource`2.Read(System.Span{`0})">
            <summary>
            Reads the data to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <typeparamref name="TSample" />s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Data.SampleDataSource`2.ReadAsync(System.Memory{`0})">
            <summary>
            Reads the data asynchronously to the specified destination.
            </summary>
            <param name="destination">The destination.</param>
            <returns>
            The number of <typeparamref name="TSample" />s read from this <see cref="T:MonoAudio.Data.IDataSource`1" />.
            </returns>
        </member>
        <member name="M:MonoAudio.Data.SampleDataSource`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.ReadAsyncFunc`1">
            <summary>
            Encapsulates a method that asynchronously fills given <see cref="T:System.Memory`1"/> and returns how many <typeparamref name="TSample"/>s are filled.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <param name="buffer">The destination buffer.</param>
            <returns>The reading task that returns the length of buffer filled.</returns>
        </member>
        <member name="T:MonoAudio.ReadFunc`1">
            <summary>
            Encapsulates a method that fills given <see cref="T:System.Span`1"/> and returns how many <typeparamref name="TSample"/>s are filled.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <param name="buffer">The destination buffer.</param>
            <returns>The length of buffer filled.</returns>
        </member>
        <member name="T:MonoAudio.ReadWithParameterAsyncFunc`2">
            <summary>
            Encapsulates a method that asynchronously fills given <see cref="T:System.Memory`1"/> and returns how many <typeparamref name="TSample"/>s are filled.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <typeparam name="TParam">The type of parameter to call the method with.</typeparam>
            <param name="buffer">The destination buffer.</param>
            <param name="parameter">The parameter to call the method with.</param>
            <returns>The reading task that returns the length of buffer filled.</returns>
        </member>
        <member name="T:MonoAudio.ReadWithParameterFunc`2">
            <summary>
            Encapsulates a method that fills given <see cref="T:System.Span`1"/> and returns how many <typeparamref name="TSample"/>s are filled.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <typeparam name="TParam">The type of parameter to call the method with.</typeparam>
            <param name="buffer">The destination buffer.</param>
            <param name="parameter">The parameter to call the method with.</param>
            <returns>The length of buffer filled.</returns>
        </member>
        <member name="T:MonoAudio.WriteAction`1">
            <summary>
            Encapsulates a method that writes the given <see cref="T:System.ReadOnlySpan`1"/> into the destination.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <param name="data">The data to write.</param>
        </member>
        <member name="T:MonoAudio.WriteAsyncFunc`1">
            <summary>
            Encapsulates a method that asynchronously writes the given <see cref="T:System.ReadOnlyMemory`1"/> into the destination.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <param name="data">The data to write.</param>
            <returns>The writing task.</returns>
        </member>
        <member name="T:MonoAudio.WriteWithParameterAction`2">
            <summary>
            Encapsulates a method that writes the given <see cref="T:System.ReadOnlySpan`1"/> into the destination.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <typeparam name="TParam">The type of parameter to call the method with.</typeparam>
            <param name="data">The data to write.</param>
            <param name="parameter">The parameter to call the method with.</param>
        </member>
        <member name="T:MonoAudio.WriteWithParameterAsyncFunc`2">
            <summary>
            Encapsulates a method that asynchronously writes the given <see cref="T:System.ReadOnlyMemory`1"/> into the destination.
            </summary>
            <typeparam name="TSample">The type of Sample.</typeparam>
            <typeparam name="TParam">The type of parameter to call the method with.</typeparam>
            <param name="data">The data to write.</param>
            <param name="parameter">The parameter to call the method with.</param>
            <returns>The reading task that returns the length of buffer filled.</returns>
        </member>
        <member name="T:MonoAudio.Endianness">
            <summary>
            Represents an endianness.
            </summary>
        </member>
        <member name="F:MonoAudio.Endianness.Little">
            <summary>
            The little endian
            </summary>
        </member>
        <member name="F:MonoAudio.Endianness.Big">
            <summary>
            The big endian
            </summary>
        </member>
        <member name="T:MonoAudio.Extensions.EndiannessExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="F:MonoAudio.Extensions.EndiannessExtensions.EnvironmentEndianness">
            <summary>
            Gets the environment's endianness.
            </summary>
            <value>
            The environment endianness.
            </value>
        </member>
        <member name="T:MonoAudio.Filters.Attenuator">
            <summary>
            Modifies the velocity of <see cref="P:MonoAudio.Filters.Attenuator.Source"/>
            </summary>
            <seealso cref="T:MonoAudio.Filters.IAudioFilter`2" />
        </member>
        <member name="M:MonoAudio.Filters.Attenuator.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.Attenuator"/> class.
            </summary>
            <param name="source">The source.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Scale">
            <summary>
            Gets or sets the scale.
            </summary>
            <value>
            The scale.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value>
              <c>true</c> if this instance can seek; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Attenuator.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.Attenuator.Read(System.Span{System.Single})">
            <summary>
            Reads the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.Attenuator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.Attenuator.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.BiQuadFilter">
            <summary>
            Provides a function of filtering with Digital BiQuad Filter.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.#ctor(MonoAudio.IReadableAudioSource{System.Single,MonoAudio.SampleFormat},MonoAudio.Filters.BiQuadParameter)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.BiQuadFilter"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="parameter">The parameter.</param>
            <exception cref="T:System.ArgumentNullException">source</exception>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Parameter">
            <summary>
            Gets the parameter.
            </summary>
            <value>
            The parameter.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.CanSeek">
            <summary>
            Gets a value indicating whether this instance can seek.
            </summary>
            <value>
              <c>true</c> if this instance can seek; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Format">
            <summary>
            Gets the format.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Position">
            <summary>
            Gets or sets the position.
            </summary>
            <value>
            The position.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.BiQuadFilter.Length">
            <summary>
            Gets the length.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Filters.BiQuadFilter"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadFilter.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.BiQuadParameter">
            <summary>
            Represents a BiQuad filter parameters.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.BiQuadParameter"/> struct.
            </summary>
            <param name="b0">The b0.</param>
            <param name="b1">The b1.</param>
            <param name="b2">The b2.</param>
            <param name="a0">The a0.</param>
            <param name="a1">The a1.</param>
            <param name="a2">The a2.</param>
        </member>
        <member name="F:MonoAudio.Filters.BiQuadParameter.B">
            <summary>
            The normalized B parameters.
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.BiQuadParameter.A">
            <summary>
            The normalized A parameters.
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.BiQuadParameter.HalfLn2">
            <summary>
            The half Math.Log10(2)/Math.Log10(Math.E) with Bit-Exact representation.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateLPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the LPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateHPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the HPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateAPFParameter(System.Double,System.Double,System.Double)">
            <summary>
            Creates the APF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="quality">The quality of LPF.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateBPFParameterFromQuality(System.Double,System.Double,System.Double,MonoAudio.Filters.BpfGainKind)">
            <summary>
            Creates the BPF parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="gainKind">Kind of the gain.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The kind of gain is invalid! - gainKind</exception>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateBPFParameterFromBandWidth(System.Double,System.Double,System.Double,MonoAudio.Filters.BpfGainKind)">
            <summary>
            Creates the BPF parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth in Octaves.</param>
            <param name="gainKind">Kind of the gain.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">The kind of gain is invalid! - gainKind</exception>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateNotchFilterParameterFromQuality(System.Double,System.Double,System.Double)">
            <summary>
            Creates the notch filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateNotchFilterParameterFromBandWidth(System.Double,System.Double,System.Double)">
            <summary>
            Creates the notch filter parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreatePeakingEqualizerParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the peaking equalizer parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreatePeakingEqualizerParameterFromBandWidth(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the peaking equalizer parameter from specified bandwidth.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="bandWidth">The bandwidth in Octaves.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateLowShelfFilterParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the low shelf filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateLowShelfFilterParameterFromSlope(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the low shelf filter parameter from specified slope.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="slope">The slope in dB/Oct.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateHighShelfFilterParameterFromQuality(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the High shelf filter parameter from specified quality.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="centerFrequency">The center frequency.</param>
            <param name="quality">The quality.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Filters.BiQuadParameter.CreateHighShelfFilterParameterFromSlope(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates the High shelf filter parameter from specified slope.
            </summary>
            <param name="samplingFrequency">The sampling frequency.</param>
            <param name="cutOffFrequency">The cut off frequency.</param>
            <param name="slope">The slope in dB/Oct.</param>
            <param name="dBGain">The peak gain in dB.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Filters.BpfGainKind">
            <summary>
            Represents a BPF gain kind.
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.BpfGainKind.ConstSkirt">
            <summary>
            Constant skirt gain.
            Peak gain = Q
            </summary>
        </member>
        <member name="F:MonoAudio.Filters.BpfGainKind.ZeroDBPeakGain">
            <summary>
            Constant 0 dB peak gain.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.StreamBuffer`2">
            <summary>
            Buffers the samples like YouTube does.<br/>
            It reads a little more than required, and prevents waiting for IOs / decoding.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.StreamBuffer`2.Source">
            <summary>
            Gets the source.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.#ctor(MonoAudio.IReadableAudioSource{`0,`1},System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Filters.StreamBuffer`2"/> class.
            </summary>
            <param name="source">The source.</param>
            <param name="initialBlockSize">
            The size of initial buffer in Frames(independent on the number of channel and the type of sample).<br/>
            The buffer is automatically extended if the internal buffer is smaller than the size of reading buffers.
            </param>
            <param name="internalBufferNumber">The number of internal buffer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="source"/> should not be <c>null</c>.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="initialBlockSize"/> should be larger than or equals to 0.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="internalBufferNumber"/> should be larger than or equals to 2.</exception>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.StreamBuffer`2.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Filters.StreamBuffer`2"/> class.
            </summary>
        </member>
        <member name="T:MonoAudio.Filters.IAudioFilter`2">
            <summary>
            Defines a base infrastructure of an audio filter.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The format of the sample.</typeparam>
            <seealso cref="T:MonoAudio.Conversion.IAudioConverter`4" />
        </member>
        <member name="T:MonoAudio.Filters.Mixing.Advanced.AdvancedMixer">
             <summary>
            
             </summary>
        </member>
        <member name="T:MonoAudio.Filters.Mixing.MixerItem">
            <summary>
            Represents an item of <see cref="T:MonoAudio.Filters.Mixing.SimpleMixer"/> and <see cref="T:MonoAudio.Filters.Mixing.Advanced.AdvancedMixer"/>.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.Mixing.MixerItem.Source">
            <summary>
            Gets the source of this <see cref="T:MonoAudio.Filters.Mixing.MixerItem"/>.
            </summary>
            <value>
            The source.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Mixing.MixerItem.Volume">
            <summary>
            Gets the volume of this <see cref="T:MonoAudio.Filters.Mixing.MixerItem"/>.
            </summary>
            <value>
            The volume.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Mixing.MixerItem.Buffer">
            <summary>
            Gets or sets the input buffer for this <see cref="T:MonoAudio.Filters.Mixing.MixerItem"/>.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="T:MonoAudio.Filters.Mixing.SimpleMixer">
            <summary>
            Mixes down two signal into one signal.
            </summary>
            <seealso cref="T:MonoAudio.ISampleSource" />
        </member>
        <member name="P:MonoAudio.Filters.Mixing.SimpleMixer.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.Mixing.SimpleMixer.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Mixing.SimpleMixer.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.Mixing.SimpleMixer.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="P:MonoAudio.Filters.Mixing.SimpleMixer.ItemA">
            <summary>
            Gets the item A.
            </summary>
            <value>
            The item A.
            </value>
        </member>
        <member name="P:MonoAudio.Filters.Mixing.SimpleMixer.ItemB">
            <summary>
            Gets the item B.
            </summary>
            <value>
            The item B.
            </value>
        </member>
        <member name="M:MonoAudio.Filters.Mixing.SimpleMixer.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Filters.Mixing.SimpleMixer.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Filters.Mixing.SimpleMixer.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.ChannelMaskUtils">
            <summary>
            Provides several utilities for manipulating <see cref="T:MonoAudio.Speakers"/>.
            </summary>
        </member>
        <member name="M:MonoAudio.ChannelMaskUtils.GetChannelMasks``1(MonoAudio.IAudioFormat{``0})">
            <summary>
            Gets the value which indicates how the speakers are used.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <param name="format">The format.</param>
            <returns>The matching <see cref="T:MonoAudio.Speakers"/> combination.</returns>
        </member>
        <member name="T:MonoAudio.DoublePrecisionSampleFormat">
            <summary>
            Represents a format of a double-precision sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.DoublePrecisionSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.DoublePrecisionSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.DoublePrecisionSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.DoublePrecisionSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.DoublePrecisionSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.DoublePrecisionSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.DoublePrecisionSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Double"/> values are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.DoublePrecisionSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Double"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.DoublePrecisionSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Double"/>s.
            </value>
        </member>
        <member name="M:MonoAudio.DoublePrecisionSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.DoublePrecisionSampleFormat.Equals(MonoAudio.DoublePrecisionSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.DoublePrecisionSampleFormat.Equals(MonoAudio.IAudioFormat{System.Double})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.DoublePrecisionSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.DoublePrecisionSampleFormat.op_Equality(MonoAudio.DoublePrecisionSampleFormat,MonoAudio.DoublePrecisionSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.DoublePrecisionSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.DoublePrecisionSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.DoublePrecisionSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.DoublePrecisionSampleFormat.op_Inequality(MonoAudio.DoublePrecisionSampleFormat,MonoAudio.DoublePrecisionSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.DoublePrecisionSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.DoublePrecisionSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.DoublePrecisionSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.FormatUtils">
            <summary>
            Provides some utilities for <see cref="T:MonoAudio.IAudioFormat`1"/>.
            </summary>
        </member>
        <member name="M:MonoAudio.FormatUtils.GetFrameSizeInBytes``1(MonoAudio.IAudioFormat{``0})">
            <summary>
            Gets the value which indicates how long the <see cref="P:MonoAudio.Units.Frame"/> is, in bytes.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <param name="format">The format to calculate the length of frame.</param>
            <returns><c>sizeof(TSample) * <see cref="P:MonoAudio.IAudioFormat`1.Channels"/></c></returns>
        </member>
        <member name="M:MonoAudio.FormatUtils.GetBufferSizeRequired``1(MonoAudio.IAudioFormat{``0},System.TimeSpan)">
            <summary>
            Gets the value which indicates how long the <see cref="T:System.Byte"/>[] buffer should be.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <param name="format">The format.</param>
            <param name="length">The length.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.Formats.HalfPrecisionSampleFormat">
            <summary>
            Represents a format of a half-precision sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.Formats.HalfPrecisionSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Formats.HalfPrecisionSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.Formats.HalfPrecisionSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.HalfPrecisionSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.HalfPrecisionSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Formats.HalfPrecisionSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.HalfPrecisionSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Half"/> values are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Formats.HalfPrecisionSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Half"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.Formats.HalfPrecisionSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Half"/>s.
            </value>
        </member>
        <member name="M:MonoAudio.Formats.HalfPrecisionSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Formats.HalfPrecisionSampleFormat.Equals(MonoAudio.Formats.HalfPrecisionSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Formats.HalfPrecisionSampleFormat.Equals(MonoAudio.IAudioFormat{System.Half})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Formats.HalfPrecisionSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.Formats.HalfPrecisionSampleFormat.op_Equality(MonoAudio.Formats.HalfPrecisionSampleFormat,MonoAudio.Formats.HalfPrecisionSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Formats.HalfPrecisionSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Formats.HalfPrecisionSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Formats.HalfPrecisionSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Formats.HalfPrecisionSampleFormat.op_Inequality(MonoAudio.Formats.HalfPrecisionSampleFormat,MonoAudio.Formats.HalfPrecisionSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Formats.HalfPrecisionSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Formats.HalfPrecisionSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Formats.HalfPrecisionSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Formats.IChannelMaskedFormat">
            <summary>
            Defines a base structure of an <see cref="T:MonoAudio.IAudioFormat`1"/> that has an information of channel masks.
            </summary>
        </member>
        <member name="P:MonoAudio.Formats.IChannelMaskedFormat.ChannelCombination">
            <summary>
            Gets the value which indicates how the speakers are used.
            </summary>
        </member>
        <member name="T:MonoAudio.IAudioFormat`1">
            <summary>
            Defines a base structure of audio formats.<br/>
            <typeparamref name="TSample"/> must not be affected by the number of <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
        </member>
        <member name="P:MonoAudio.IAudioFormat`1.Channels">
            <summary>
            Gets the number of channels.<br/>
            It does not describe how these loudspeakers of each channels are placed in the room.<br/>
            It does not affect the type of <typeparamref name="TSample"/>.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.IAudioFormat`1.SampleRate">
             <summary>
             Gets the average number of samples contained in one second.<br/>
            
             </summary>
             <value>
             The sample rate.
             </value>
        </member>
        <member name="P:MonoAudio.IAudioFormat`1.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.<br/>
            -1 means the bit depth is variable in the whole stream.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="T:MonoAudio.IInterleavedAudioFormat`1">
            <summary>
            Defines a base structure of audio formats.<br/>
            <typeparamref name="TSample"/> must not be affected by the number of <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
        </member>
        <member name="P:MonoAudio.IInterleavedAudioFormat`1.BlockSize">
            <summary>
            Gets the value indicates how many <typeparamref name="TSample"/>s are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of frame.
            </value>
        </member>
        <member name="P:MonoAudio.IInterleavedAudioFormat`1.SampleSize">
            <summary>
            Gets the value indicates how many <typeparamref name="TSample"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.<br/>
            </summary>
            <value>
            The size of a sample in <typeparamref name="TSample"/>s.
            </value>
        </member>
        <member name="T:MonoAudio.IWaveFormat">
            <summary>
            Defines a base infrastructure of a wave format.
            </summary>
        </member>
        <member name="P:MonoAudio.IWaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="T:MonoAudio.Int16LinearPcmSampleFormat">
            <summary>
            Represents a format of a 16-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.Int16LinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Int16LinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.Int16LinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Int16LinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Int16LinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Int16LinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.Int16LinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int16"/> values are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Int16LinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int16"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.Int16LinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Int16"/>s.
            </value>
        </member>
        <member name="M:MonoAudio.Int16LinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int16LinearPcmSampleFormat.Equals(MonoAudio.Int16LinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int16LinearPcmSampleFormat.Equals(MonoAudio.IAudioFormat{System.Int16})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int16LinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.Int16LinearPcmSampleFormat.op_Equality(MonoAudio.Int16LinearPcmSampleFormat,MonoAudio.Int16LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int16LinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int16LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int16LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int16LinearPcmSampleFormat.op_Inequality(MonoAudio.Int16LinearPcmSampleFormat,MonoAudio.Int16LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int16LinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int16LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int16LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Int24LinearPcmSampleFormat">
            <summary>
            Represents a format of a 24-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.Int24LinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Int24LinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.Int24LinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Int24LinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Int24LinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Int24LinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.Int24LinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:MonoAudio.Int24"/> values are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Int24LinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:MonoAudio.Int24"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.Int24LinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:MonoAudio.Int24"/>s.
            </value>
        </member>
        <member name="M:MonoAudio.Int24LinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int24LinearPcmSampleFormat.Equals(MonoAudio.Int24LinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int24LinearPcmSampleFormat.Equals(MonoAudio.IAudioFormat{MonoAudio.Int24})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int24LinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.Int24LinearPcmSampleFormat.op_Equality(MonoAudio.Int24LinearPcmSampleFormat,MonoAudio.Int24LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int24LinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int24LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24LinearPcmSampleFormat.op_Inequality(MonoAudio.Int24LinearPcmSampleFormat,MonoAudio.Int24LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int24LinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int24LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Int32LinearPcmSampleFormat">
            <summary>
            Represents a format of a 32-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.Int32LinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Int32LinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.Int32LinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Int32LinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Int32LinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Int32LinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.Int32LinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int32"/> values are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Int32LinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int32"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.Int32LinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Int32"/>s.
            </value>
        </member>
        <member name="M:MonoAudio.Int32LinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int32LinearPcmSampleFormat.Equals(MonoAudio.Int32LinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int32LinearPcmSampleFormat.Equals(MonoAudio.IAudioFormat{System.Int32})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int32LinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.Int32LinearPcmSampleFormat.op_Equality(MonoAudio.Int32LinearPcmSampleFormat,MonoAudio.Int32LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int32LinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int32LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int32LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int32LinearPcmSampleFormat.op_Inequality(MonoAudio.Int32LinearPcmSampleFormat,MonoAudio.Int32LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int32LinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int32LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int32LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Int64LinearPcmSampleFormat">
            <summary>
            Represents a format of a 64-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.Int64LinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Int64LinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.Int64LinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.Int64LinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.Int64LinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.Int64LinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.Int64LinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int64"/> values are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.Int64LinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Int64"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.Int64LinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Int64"/>s.
            </value>
        </member>
        <member name="M:MonoAudio.Int64LinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int64LinearPcmSampleFormat.Equals(MonoAudio.Int64LinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int64LinearPcmSampleFormat.Equals(MonoAudio.IAudioFormat{System.Int64})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.Int64LinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.Int64LinearPcmSampleFormat.op_Equality(MonoAudio.Int64LinearPcmSampleFormat,MonoAudio.Int64LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int64LinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int64LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int64LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int64LinearPcmSampleFormat.op_Inequality(MonoAudio.Int64LinearPcmSampleFormat,MonoAudio.Int64LinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int64LinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int64LinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int64LinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.OffsetSByteLinearPcmSampleFormat">
            <summary>
            Represents a format of an 8-bit Linear PCM sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.OffsetSByteLinearPcmSampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.OffsetSByteLinearPcmSampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.OffsetSByteLinearPcmSampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.OffsetSByteLinearPcmSampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.OffsetSByteLinearPcmSampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.OffsetSByteLinearPcmSampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.OffsetSByteLinearPcmSampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:MonoAudio.OffsetSByte"/> values are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.OffsetSByteLinearPcmSampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:MonoAudio.OffsetSByte"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.OffsetSByteLinearPcmSampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:MonoAudio.OffsetSByte"/>s.
            </value>
        </member>
        <member name="M:MonoAudio.OffsetSByteLinearPcmSampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.OffsetSByteLinearPcmSampleFormat.Equals(MonoAudio.OffsetSByteLinearPcmSampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.OffsetSByteLinearPcmSampleFormat.Equals(MonoAudio.IAudioFormat{MonoAudio.OffsetSByte})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.OffsetSByteLinearPcmSampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.OffsetSByteLinearPcmSampleFormat.op_Equality(MonoAudio.OffsetSByteLinearPcmSampleFormat,MonoAudio.OffsetSByteLinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.OffsetSByteLinearPcmSampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.OffsetSByteLinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.OffsetSByteLinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of left is the same as the value of right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByteLinearPcmSampleFormat.op_Inequality(MonoAudio.OffsetSByteLinearPcmSampleFormat,MonoAudio.OffsetSByteLinearPcmSampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.OffsetSByteLinearPcmSampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.OffsetSByteLinearPcmSampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.OffsetSByteLinearPcmSampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.SampleFormat">
            <summary>
            Represents a format of a 32-bit IEEE 754 Floating-Point sample source.
            </summary>
        </member>
        <member name="M:MonoAudio.SampleFormat.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.SampleFormat"/> struct.
            </summary>
            <param name="channels">The channels.</param>
            <param name="sampleRate">The sample rate.</param>
        </member>
        <member name="P:MonoAudio.SampleFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.SampleFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.SampleFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.SampleFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.SampleFormat.BlockSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Single"/> values are required per whole frame.<br/>
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.SampleFormat.SampleSize">
            <summary>
            Gets the value indicates how many <see cref="T:System.Single"/>s are required per 1-channel sample.<br/>
            Does not depend on the number of <see cref="P:MonoAudio.SampleFormat.Channels"/>.<br/>
            </summary>
            <value>
            The size of a frame in <see cref="T:System.Single"/>s.
            </value>
        </member>
        <member name="M:MonoAudio.SampleFormat.Equals(System.Object)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.Equals(MonoAudio.SampleFormat)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.Equals(MonoAudio.IAudioFormat{System.Single})">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.GetHashCode">
            <summary>Returns a hash code for this instance.</summary>
            <returns>A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.</returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.op_Equality(MonoAudio.SampleFormat,MonoAudio.SampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.SampleFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.SampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.SampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.SampleFormat.op_Inequality(MonoAudio.SampleFormat,MonoAudio.SampleFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.SampleFormat"/> objects are different.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.SampleFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.SampleFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is not the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Speakers">
            <summary>
            Represents a mask of channels' combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.None">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.FrontLeft">
            <summary>
            The speaker placed in left front of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.FrontRight">
            <summary>
            The speaker placed in right front of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.FrontCenter">
            <summary>
            The speaker placed in front of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.FrontLowFrequency">
            <summary>
            The subwoofer speaker placed in front of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.RearLeft">
            <summary>
            The speaker placed in left rear of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.RearRight">
            <summary>
            The speaker placed in right rear of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.FrontLeftOfCenter">
            <summary>
            The speaker placed between <see cref="F:MonoAudio.Speakers.FrontCenter"/> and <see cref="F:MonoAudio.Speakers.FrontLeft"/>, of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.FrontRightOfCenter">
            <summary>
            The speaker placed between <see cref="F:MonoAudio.Speakers.FrontCenter"/> and <see cref="F:MonoAudio.Speakers.FrontRight"/>, of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.RearCenter">
            <summary>
            The speaker placed behind the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.SideLeft">
            <summary>
            The speaker placed to the left of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.SideRight">
            <summary>
            The speaker placed to the right of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.RearLowFrequency">
            <summary>
            The subwoofer speaker placed behind the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopFrontLeft">
            <summary>
            The speaker placed at the upper left front of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopFrontCenter">
            <summary>
            The speaker placed at the upper front of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopFrontRight">
            <summary>
            The speaker placed at the upper right front of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopRearLeft">
            <summary>
            The speaker placed at the upper left rear of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopRearCenter">
            <summary>
            The speaker placed at the upper rear of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopRearRight">
            <summary>
            The speaker placed at the upper right rear of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopSideLeft">
            <summary>
            The speaker placed at the upper left of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopSideCenter">
            <summary>
            The speaker placed above the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopSideRight">
            <summary>
            The speaker placed at the upper right of the listener.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.Monaural">
            <summary>
            The representation of single speaker.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.FrontStereo">
            <summary>
            The ordinal Stereo combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.SideStereo">
            <summary>
            The side Stereo combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.RearStereo">
            <summary>
            The rear Stereo combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopFrontStereo">
            <summary>
            The top front Stereo combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopSideStereo">
            <summary>
            The top side Stereo combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.TopRearStereo">
            <summary>
            The top rear Stereo combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.ThreePointOne">
            <summary>
            The 3.1ch combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.FivePointOne">
            <summary>
            The 5.1ch combination.
            </summary>
        </member>
        <member name="F:MonoAudio.Speakers.SevenPointOne">
            <summary>
            The 7.1ch combination.
            </summary>
        </member>
        <member name="T:MonoAudio.WaveFormat">
            <summary>
            Represents a wave format.
            </summary>
            <seealso cref="T:MonoAudio.IAudioFormat`1" />
        </member>
        <member name="M:MonoAudio.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,MonoAudio.AudioEncoding)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.WaveFormat"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="channels">The channels.</param>
            <param name="encoding">The encoding.</param>
        </member>
        <member name="M:MonoAudio.WaveFormat.#ctor(System.Int32,System.Int32,System.Int32,MonoAudio.AudioEncoding,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.WaveFormat"/> struct.
            </summary>
            <param name="sampleRate">The sample rate.</param>
            <param name="bitDepth">The bit depth.</param>
            <param name="channels">The channels.</param>
            <param name="encoding">The encoding.</param>
            <param name="extraSize">Size of the extra.</param>
        </member>
        <member name="P:MonoAudio.WaveFormat.BlockSize">
            <summary>
            Gets the value indicates how many bytes are required per whole sample.
            It depends on <see cref="P:MonoAudio.IAudioFormat`1.Channels"/>.
            </summary>
            <value>
            The size of block.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.Encoding">
            <summary>
            Gets the value indicates how the samples are encoded.
            </summary>
            <value>
            The sample encoding.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.Channels">
            <summary>
            Gets the number of channels.
            It does not describe how these loudspeakers of each channels are placed in the room.
            </summary>
            <value>
            The number of channels.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.SampleRate">
            <summary>
            Gets the number indicates how many times the audio signal is sampled.
            </summary>
            <value>
            The sample rate.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.BitDepth">
            <summary>
            Gets the number indicates how many bits are consumed per every single 1-channel sample.
            Does not depend on the number of <see cref="P:MonoAudio.WaveFormat.Channels"/>.
            </summary>
            <value>
            The bit depth.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.ExtraSize">
            <summary>
            Gets the size of the extra information.
            </summary>
            <value>
            The size of the extra information.
            </value>
        </member>
        <member name="P:MonoAudio.WaveFormat.SampleSize">
            <summary>
            Gets the size of the frame.
            </summary>
            <value>
            The size of the frame.
            </value>
        </member>
        <member name="M:MonoAudio.WaveFormat.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.Equals(MonoAudio.WaveFormat)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.Equals(MonoAudio.IAudioFormat{System.Byte})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.op_Equality(MonoAudio.WaveFormat,MonoAudio.WaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.WaveFormat"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.WaveFormat"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.WaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.WaveFormat.op_Inequality(MonoAudio.WaveFormat,MonoAudio.WaveFormat)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.WaveFormat"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.WaveFormat"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.WaveFormat"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.IAggregator`3">
            <summary>
            Defines a base infrastructure of a filter.
            </summary>
            <typeparam name="TSample"></typeparam>
            <typeparam name="TSource">The type of the aggregator.</typeparam>
            <typeparam name="TDestinationFormat">The format of output audio.</typeparam>
        </member>
        <member name="P:MonoAudio.IAggregator`3.BaseSource">
            <summary>
            Gets the base source.
            </summary>
            <value>
            The base source.
            </value>
        </member>
        <member name="T:MonoAudio.IAudioSource`2">
            <summary>
            Defines a base infrastructure for all audio sources.
            </summary>
            <typeparam name="TSample">The type of sample.</typeparam>
            <typeparam name="TFormat">The type of audio format.</typeparam>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            The implementation which doesn't support this property entirely(without depending on source) must have an <see cref="T:System.ObsoleteAttribute"/> and cause an compile-time error.
            </summary>
        </member>
        <member name="P:MonoAudio.IAudioSource`2.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            Negative value Means Infinity.
            </summary>
        </member>
        <member name="T:MonoAudio.InternalExtensions">
            <summary>
            Provides some functions that supports implementing some functions.
            </summary>
        </member>
        <member name="M:MonoAudio.InternalExtensions.ThrowIfDisposed``1(``0,System.Boolean)">
            <summary>
            Throws if the specified <paramref name="instance"/> is disposed.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="instance">The instance of <typeparamref name="T"/>.</param>
            <param name="isDisposed">if set to <c>true</c> it throws.</param>
            <exception cref="T:System.ObjectDisposedException">This instance of <typeparamref name="T"/> is disposed!</exception>
        </member>
        <member name="T:MonoAudio.IO.DataAvailableEventHandler">
            <summary>
            Represents an event handler that holds recorded audio data.
            </summary>
            <param name="sender">The sender.</param>
            <param name="e">The <see cref="T:MonoAudio.IO.DataAvailableEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="T:MonoAudio.IO.DataAvailableEventArgs">
            <summary>
            Represents an event arguments that holds recorded audio data.<br/>
            It is a <c>struct</c> which has <c>ref</c> and <c>readonly</c> modifier because the event occurs frequently and has a <see cref="T:System.Span`1"/> to deliver a raw buffer.<br/>
            <b>CAUTION! REF STRUCT! IT CANNOT BE STORED ON HEAPS!</b>
            </summary>
        </member>
        <member name="M:MonoAudio.IO.DataAvailableEventArgs.#ctor(System.Span{System.Byte},MonoAudio.WaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.IO.DataAvailableEventArgs" /> struct.
            </summary>
            <param name="data">The data.</param>
            <param name="format">The format.</param>
        </member>
        <member name="P:MonoAudio.IO.DataAvailableEventArgs.Data">
            <summary>
            Gets the data.
            </summary>
            <value>
            The data.
            </value>
        </member>
        <member name="P:MonoAudio.IO.DataAvailableEventArgs.Format">
            <summary>
            Gets the format of the available <see cref="P:MonoAudio.IO.DataAvailableEventArgs.Data"/>.
            </summary>
            <value>
            The format.
            </value>
        </member>
        <member name="T:MonoAudio.IO.DataFlow">
            <summary>
            Represents a flow kind of audio data.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.DataFlow.None">
            <summary>
            Invalid.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.DataFlow.Render">
            <summary>
            Output.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.DataFlow.Capture">
            <summary>
            Input.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.FormatSupportStatus">
            <summary>
            Indicates how the <see cref="T:MonoAudio.IWaveFormat"/> is supported by the <see cref="N:MonoAudio"/>.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.FormatSupportStatus.Unchecked">
            <summary>
            The value which indicates the <see cref="T:MonoAudio.IO.IAudioDevice"/> has no ability to check the support status currently.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.FormatSupportStatus.NotSupported">
            <summary>
            The value which indicates the <see cref="T:MonoAudio.IWaveFormat"/> is not supported by the <see cref="T:MonoAudio.IO.IAudioDevice"/>.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.FormatSupportStatus.SupportedBySoftware">
            <summary>
            The value which indicates the <see cref="T:MonoAudio.IWaveFormat"/> is supported by the <see cref="T:MonoAudio.IO.IAudioDevice"/>, by converting the audio into some different format.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.FormatSupportStatus.SupportedByHardware">
            <summary>
            The value which indicates the <see cref="T:MonoAudio.IWaveFormat"/> is supported by the <see cref="T:MonoAudio.IO.IAudioDevice"/> natively, without converting the audio into some different format.
            </summary>
        </member>
        <member name="P:MonoAudio.IO.FormatSupportStatus.IsChecked">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.IWaveFormat"/> has been checked the availability on the device.
            </summary>
            <value>
              <c>true</c> if this instance is checked; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.IO.FormatSupportStatus.IsSupported">
            <summary>
            Gets a value indicating whether the format is supported.
            </summary>
            <value>
              <c>true</c> if this instance is supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.IO.FormatSupportStatus.IsNativelySupported">
            <summary>
            Gets a value indicating whether the <see cref="T:MonoAudio.IWaveFormat"/> is natively supported.
            </summary>
            <value>
              <c>true</c> if this instance is natively supported; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoAudio.IO.FormatSupportStatus.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            true if <paramref name="obj">obj</paramref> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.IO.FormatSupportStatus.Equals(MonoAudio.IO.FormatSupportStatus)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.IO.FormatSupportStatus.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:MonoAudio.IO.FormatSupportStatus.op_Equality(MonoAudio.IO.FormatSupportStatus,MonoAudio.IO.FormatSupportStatus)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.IO.FormatSupportStatus"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.IO.FormatSupportStatus"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.IO.FormatSupportStatus"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.IO.FormatSupportStatus.op_Inequality(MonoAudio.IO.FormatSupportStatus,MonoAudio.IO.FormatSupportStatus)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.IO.FormatSupportStatus"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.IO.FormatSupportStatus"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.IO.FormatSupportStatus"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.IO.IAudioDevice">
            <summary>
            Defines a base structure of an audio device.<br/>
            </summary>
        </member>
        <member name="P:MonoAudio.IO.IAudioDevice.Name">
            <summary>
            Gets the name of this audio device.
            </summary>
            <value>
            The name of this audio device.
            </value>
        </member>
        <member name="T:MonoAudio.IO.IAudioDeviceEnumerator">
            <summary>
            Defines a base infrastructure of an audio device enumerator.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.IAudioDeviceEnumerator.EnumerateDevices(MonoAudio.IO.DataFlow)">
            <summary>
            Enumerates devices of specified <paramref name="dataFlow"/>.
            </summary>
            <param name="dataFlow">The <see cref="T:MonoAudio.IO.DataFlow"/> kind to enumerate devices of.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of audio devices.</returns>
        </member>
        <member name="T:MonoAudio.IO.IAudioInputDevice">
            <summary>
            Defines a base structure of audio input device.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.IAudioInputDevice.IsFormatSupported(MonoAudio.WaveFormat)">
            <summary>
            Indicates whether the audio input device supports a particular stream format.
            </summary>
            <param name="format">The format to judge the availability.</param>
            <returns><c>true</c> if succeeded and the audio device supports the specified stream format.</returns>
        </member>
        <member name="T:MonoAudio.IO.IAudioOutputDevice`1">
            <summary>
            Defines a base structure of audio output device.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.IAudioOutputDevice`1.CheckSupportStatus(MonoAudio.IWaveFormat,MonoAudio.IO.IOExclusivity)">
            <summary>
            Indicates whether the audio output device supports a particular stream format.
            </summary>
            <param name="format">The format to judge the availability.</param>
            <param name="mode">The share mode.</param>
            <returns>The value which indicates how the <see cref="T:MonoAudio.IWaveFormat"/> can be supported by <see cref="N:MonoAudio"/>.</returns>
        </member>
        <member name="M:MonoAudio.IO.IAudioOutputDevice`1.CreateSoundOut(System.TimeSpan)">
            <summary>
            Creates the <see cref="T:MonoAudio.IO.ISoundOut"/> that outputs audio to this device.
            </summary>
            <param name="latency">The desired latency for output.</param>
            <returns>The <typeparamref name="TSoundOut"/> instance.</returns>
        </member>
        <member name="M:MonoAudio.IO.IAudioOutputDevice`1.CreateSoundOut(System.TimeSpan,MonoAudio.IO.IOExclusivity)">
            <summary>
            Creates the <see cref="T:MonoAudio.IO.ISoundOut"/> that outputs audio to this device with the specified <paramref name="mode"/>.
            </summary>
            <param name="latency">The latency.</param>
            <param name="mode">The share mode.</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.IO.IOExclusivity">
            <summary>
            Represents an exclusivity of audio IO.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.IOExclusivity.Shared">
            <summary>
            The <see cref="T:MonoAudio.IO.ISoundOut"/> will be opened under some sharing system.<br/>
            The other applications will be able to access the device.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.IOExclusivity.Exclusive">
            <summary>
            The <see cref="T:MonoAudio.IO.ISoundOut"/> will be created exclusively.<br/>
            The other applications can't access the device anymore.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.ISoundIn">
            <summary>
            Defines a base infrastructure of a sound input.<br/>
            CAUTION! IT HAS SOME EVENT HANDLERS! IMPLEMENTERS MUST NOT FORGET TO RELEASE THEM!
            </summary>
        </member>
        <member name="E:MonoAudio.IO.ISoundIn.DataAvailable">
            <summary>
            Occurs when some data are available.
            </summary>
        </member>
        <member name="E:MonoAudio.IO.ISoundIn.Stopped">
            <summary>
            Occurs when the recording stopped.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundIn.Start">
            <summary>
            Starts recording.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundIn.Stop">
            <summary>
            Stops recording.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundIn.Initialize">
            <summary>
            Initializes the recorder.
            </summary>
        </member>
        <member name="P:MonoAudio.IO.ISoundIn.RecordingState">
            <summary>
            Gets the state of the recording.
            </summary>
            <value>
            The state of the recording.
            </value>
        </member>
        <member name="T:MonoAudio.IO.ISoundOut">
            <summary>
            Defines a base infrastructure of a sound output.
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Play">
            <summary>
            Starts the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Pause">
            <summary>
            Pauses the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Resume">
            <summary>
            Resumes the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Stop">
            <summary>
            Stops the audio playback.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.ISoundOut.Initialize(MonoAudio.IWaveSource)">
            <summary>
            Initializes the <see cref="T:MonoAudio.IO.ISoundOut"/> for playing a <paramref name="source"/>.
            </summary>
            <param name="source">The source to play.</param>
        </member>
        <member name="P:MonoAudio.IO.ISoundOut.PlaybackState">
            <summary>
            Gets the state of the playback.
            </summary>
            <value>
            The state of the playback.
            </value>
        </member>
        <member name="T:MonoAudio.IO.ISoundOutputDevice">
            <summary>
            Defines a base structure of an audio output device.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.PlaybackState">
            <summary>
            Represents a state of playback.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.PlaybackState.NotInitialized">
            <summary>
            The output is not initialized
            </summary>
        </member>
        <member name="F:MonoAudio.IO.PlaybackState.Stopped">
            <summary>
            The playback is stopped.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.PlaybackState.Playing">
            <summary>
            The playback is running.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.PlaybackState.Paused">
            <summary>
            The playback is paused.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.RecordingState">
            <summary>
            Represents a state of recording.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.RecordingState.Stopped">
            <summary>
            The recording is stopped.
            </summary>
        </member>
        <member name="F:MonoAudio.IO.RecordingState.Recording">
            <summary>
            The recording is in progress.
            </summary>
        </member>
        <member name="T:MonoAudio.IO.RecordingStoppedEventArgs">
            <summary>
            Represents an event arguments that tells you that the recording has (been) stopped and holds why.<br/>
            </summary>
            <seealso cref="T:MonoAudio.StoppedEventArgs" />
        </member>
        <member name="M:MonoAudio.IO.RecordingStoppedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.IO.RecordingStoppedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.IO.RecordingStoppedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.IO.RecordingStoppedEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:MonoAudio.IReadableAudioSource`2">
            <summary>
            Defines a base infrastructure of a readable audio source.
            </summary>
            <typeparam name="TSample">The type of audio data.</typeparam>
            <typeparam name="TFormat">The format of audio data.</typeparam>
            <seealso cref="T:MonoAudio.IAudioSource`2" />
        </member>
        <member name="M:MonoAudio.IReadableAudioSource`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:MonoAudio.IAsyncReadableAudioSource`2">
            <summary>
            Defines a base infrastructure of an asynchronously readable audio source.
            </summary>
            <typeparam name="TSample">The type of audio data.</typeparam>
            <typeparam name="TFormat">The format of audio data.</typeparam>
            <seealso cref="T:MonoAudio.IAudioSource`2" />
        </member>
        <member name="M:MonoAudio.IAsyncReadableAudioSource`2.ReadAsync(System.Memory{`0})">
            <summary>
            Reads the audio to the specified buffer asynchronously.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:MonoAudio.ISampleSource">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio source.
            </summary>
            <seealso cref="T:MonoAudio.IReadableAudioSource`2" />
        </member>
        <member name="T:MonoAudio.ISampleAggregator">
            <summary>
            Defines a base infrastructure of a IEEE 754 Floating-Point PCM audio f     </member>
        <member name="M:MonoAudio.DataLength.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.DataLength" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:MonoAudio.DataLength.Infinity">
            <summary>
            Represents the fact that the source stream is infinitely long.
            </summary>
        </member>
        <member name="P:MonoAudio.DataLength.Length">
            <summary>
            Gets the actual length available.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoAudio.DataLength.IsInfinity">
            <summary>
            Gets a value indicating whether the available length of data is infinity.
            </summary>
            <value>
              <c>true</c> if this <see cref="P:MonoAudio.DataLength.Length"/> is infinity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoAudio.DataLength.Cast``2">
            <summary>
            Casts the size value of this instance.
            </summary>
            <typeparam name="TFrom">The type of from.</typeparam>
            <typeparam name="TTo">The type of to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Division(MonoAudio.DataLength,System.UInt64)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Multiply(MonoAudio.DataLength,System.UInt64)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Implicit(System.UInt64)~MonoAudio.DataLength">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64" /> to <see cref="T:MonoAudio.DataLength" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Explicit(MonoAudio.DataLength)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:MonoAudio.DataLength"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.CompareTo(MonoAudio.DataLength)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.DataLength.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.Equals(MonoAudio.DataLength)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
    mmary>
            Defines a base infrastructure of an audio pipeline output.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <seealso cref="T:MonoAudio.Pipeline.IAudioPipelineComponent`2" />
        </member>
        <member name="P:MonoAudio.Pipeline.IAudioPipelineProducer`2.CanPreProcess">
            <summary>
            Gets a value indicating whether this instance can pre-process.
            </summary>
            <value>
              <c>true</c> if this instance can pre-process; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MonoAudio.Pipeline.IAudioPipelineSource`2">
            <summary>
            Defines a base infrastructure of a readable audio pipeline component.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <seealso cref="T:MonoAudio.Pipeline.IAudioPipelineComponent`2" />
            <seealso cref="T:MonoAudio.IAsyncReadableAudioSource`2" />
            <seealso cref="T:MonoAudio.IReadableAudioSource`2" />
        </member>
        <member name="T:MonoAudio.Pipeline.IAudioPipelineTarget`2">
            <summary>
            Defines a base infrastructure of an audio pipeline input.
            </summary>
        </member>
        <member name="T:MonoAudio.Pipeline.PipelineExtensions">
             <summary>
            
             </summary>
        </member>
        <member name="T:MonoAudio.DataLength">
            <summary>
            Represents a length of some data.
            </summary>
        </member>
        <member name="M:MonoAudio.DataLength.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.DataLength" /> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:MonoAudio.DataLength.Infinity">
            <summary>
            Represents the fact that the source stream is infinitely long.
            </summary>
        </member>
        <member name="P:MonoAudio.DataLength.Length">
            <summary>
            Gets the actual length available.
            </summary>
            <value>
            The length.
            </value>
        </member>
        <member name="P:MonoAudio.DataLength.IsInfinity">
            <summary>
            Gets a value indicating whether the available length of data is infinity.
            </summary>
            <value>
              <c>true</c> if this <see cref="P:MonoAudio.DataLength.Length"/> is infinity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:MonoAudio.DataLength.Cast``2">
            <summary>
            Casts the size value of this instance.
            </summary>
            <typeparam name="TFrom">The type of from.</typeparam>
            <typeparam name="TTo">The type of to.</typeparam>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Division(MonoAudio.DataLength,System.UInt64)">
            <summary>
            Implements the operator /.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Multiply(MonoAudio.DataLength,System.UInt64)">
            <summary>
            Implements the operator *.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Implicit(System.UInt64)~MonoAudio.DataLength">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int64" /> to <see cref="T:MonoAudio.DataLength" />.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Explicit(MonoAudio.DataLength)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:MonoAudio.DataLength"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.CompareTo(MonoAudio.DataLength)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.DataLength.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.Equals(MonoAudio.DataLength)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Equality(MonoAudio.DataLength,MonoAudio.DataLength)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.DataLength" /> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.DataLength" /> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.DataLength" /> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_Inequality(MonoAudio.DataLength,MonoAudio.DataLength)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.DataLength"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.DataLength"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.DataLength"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_LessThan(MonoAudio.DataLength,MonoAudio.DataLength)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_LessThanOrEqual(MonoAudio.DataLength,MonoAudio.DataLength)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_GreaterThan(MonoAudio.DataLength,MonoAudio.DataLength)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.DataLength.op_GreaterThanOrEqual(MonoAudio.DataLength,MonoAudio.DataLength)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="T:MonoAudio.Primitives.DisposableArray`1">
            <summary>
            Provides a disposable array.
            </summary>
        </member>
        <member name="M:MonoAudio.Primitives.DisposableArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Primitives.DisposableArray`1"/> class.
            </summary>
            <param name="length">The length.</param>
        </member>
        <member name="P:MonoAudio.Primitives.DisposableArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the <typeparamref name="T"/> value at the specified index.
            </summary>
            <value>
            The <typeparamref name="T"/> value.
            </value>
            <param name="index">The index.</param>
            <returns></returns>
        </member>
        <member name="P:MonoAudio.Primitives.DisposableArray`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="P:MonoAudio.Primitives.DisposableArray`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
        </member>
        <member name="M:MonoAudio.Primitives.DisposableArray`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
        </member>
        <member name="M:MonoAudio.Primitives.DisposableArray`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
        </member>
        <member name="M:MonoAudio.Primitives.DisposableArray`1.CompareTo(System.Object,System.Collections.IComparer)">
            <summary>
            Compares to.
            </summary>
            <param name="other">The other.</param>
            <param name="comparer">The comparer.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Primitives.DisposableArray`1.Contains(`0)">
            <summary>
            Determines whether this instance contains the object.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if <paramref name="item">item</paramref> is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.Primitives.DisposableArray`1.CopyTo(`0       Represents the largest possible value of <see cref="T:MonoAudio.OffsetSByte"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:MonoAudio.Fixed16.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:MonoAudio.OffsetSByte"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:MonoAudio.Fixed16.Zero">
            <summary>
            Represents the number zero (0).
            </summary>
        </member>
        <member name="F:MonoAudio.Fixed16.Epsilon">
            <summary>
            Represents the smallest positive <see cref="T:MonoAudio.Fixed16"/> value that is greater than zero. This field is constant and read-only.
            </summary>
        </member>
        <member name="M:MonoAudio.Fixed16.#ctor(System.Int16)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Fixed16"/> struct.
            </summary>
            <param name="internalValue">The internal value stored in memory.</param>
        </member>
        <member name="P:MonoAudio.Fixed16.FloatValue">
            <summary>
            Gets the value represented in <see cref="T:System.Single"/>.
            </summary>
            <value>
            The float value.
            </value>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Addition(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Adds two specified <see cref="T:MonoAudio.Fixed16"/> values.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Subtraction(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Subtracts two specified <see cref="T:MonoAudio.Fixed16"/> values.
            </summary>
            <param name="left">The minuend.</param>
            <param name="right">The subtrahend.</param>
            <returns>
            The result of subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Multiply(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Multiplies two specified <see cref="T:MonoAudio.Fixed16"/> values.
            </summary>
            <param name="left">The first value to multiply.</param>
            <param name="right">The second value to multiply.</param>
            <returns>
            The result of multiplying <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Division(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Divides two specified <see cref="T:MonoAudio.Fixed16"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The result of dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Modulus(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Returns the remainder resulting from dividing two specified <see cref="T:MonoAudio.Fixed16"/> values.
            </summary>
            <param name="left">The dividend.</param>
            <param name="right">The divisor.</param>
            <returns>
            The remainder resulting from dividing <paramref name="left"/> by <paramref name="right"/>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_UnaryPlus(MonoAudio.Fixed16)">
            <summary>
            Returns the value of the <see cref="T:MonoAudio.Fixed16"/> operand (the sign of the operand is unchanged).
            </summary>
            <param name="value">The operand to return.</param>
            <returns>
            The value of the operand, <paramref name="value"/>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Increment(MonoAudio.Fixed16)">
            <summary>
            Increments the <see cref="T:MonoAudio.Fixed16"/> operand by <see cref="F:MonoAudio.Fixed16.Epsilon"/>.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>
            The value of <paramref name="value"/> incremented by <see cref="F:MonoAudio.Fixed16.Epsilon"/>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_UnaryNegation(MonoAudio.Fixed16)">
            <summary>
            Negates the value of the specified <see cref="T:MonoAudio.Fixed16"/> operand.
            </summary>
            <param name="value">The value to negate.</param>
            <returns>
            The result of <paramref name="value"/> multiplied by negative one (-1).
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Decrement(MonoAudio.Fixed16)">
            <summary>
            Decrements the <see cref="T:MonoAudio.Fixed16"/> operand by <see cref="F:MonoAudio.Fixed16.Epsilon"/>.
            </summary>
            <param name="value">The value to decrement.</param>
            <returns>
            The value of <paramref name="value"/> decremented by <see cref="F:MonoAudio.Fixed16.Epsilon"/>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Implicit(MonoAudio.Fixed16)~System.Single">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.Fixed16"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Explicit(MonoAudio.Fixed16)~System.Double">
            <summary>
            Performs an explicit conversion from <see cref="T:MonoAudio.Fixed16"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Explicit(System.Single)~MonoAudio.Fixed16">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Single"/> to <see cref="T:MonoAudio.Fixed16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Explicit(System.Double)~MonoAudio.Fixed16">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Double"/> to <see cref="T:MonoAudio.Fixed16"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.CompareTo(MonoAudio.Fixed16)">
            <summary>
            Compares this instance to a specified 16-bit signed fixed-point number and returns an indication of their relative values.
            </summary>
            <param name="other">An number to compare.</param>
            <returns>A signed number indicating the relative values of this instance and <paramref name="other"/>.</returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_LessThan(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.Fixed16"/> is less than another specified <see cref="T:MonoAudio.Fixed16"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_LessThanOrEqual(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.Fixed16"/> is less than or equal to another specified <see cref="T:MonoAudio.Fixed16"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_GreaterThan(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.Fixed16"/> is greater than another specified <see cref="T:MonoAudio.Fixed16"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_GreaterThanOrEqual(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.Fixed16"/> is greater than or equal to another specified <see cref="T:MonoAudio.Fixed16"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.Equals(MonoAudio.Fixed16)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Equality(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Fixed16"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Fixed16"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Fixed16"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Fixed16.op_Inequality(MonoAudio.Fixed16,MonoAudio.Fixed16)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Fixed16"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Fixed16"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Fixed16"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.Int24">
            <summary>
            An simple representation of 24bit signed integer.
            </summary>
            <seealso cref="T:System.IEquatable`1" />
        </member>
        <member name="F:MonoAudio.Int24.MaxValue">
            <summary>
            Represents the largest possible value of an System.Int24. This field is constant.
            </summary>
        </member>
        <member name="F:MonoAudio.Int24.MinValue">
            <summary>
            Represents the smallest possible value of System.Int24. This field is constant.
            </summary>
        </member>
        <member name="M:MonoAudio.Int24.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Int24"/> struct.
            </summary>
            <param name="value">The source <see cref="T:System.Int32"/> value. Mask:0x807fffff</param>
        </member>
        <member name="M:MonoAudio.Int24.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Int24"/> struct.
            </summary>
            <param name="head">The head.</param>
            <param name="middle">The middle.</param>
            <param name="tail">The tail.</param>
        </member>
        <member name="M:MonoAudio.Int24.op_Implicit(MonoAudio.Int24)~System.Int32">
            <summary>
            Performs an implicit conversion from <see cref="T:MonoAudio.Int24"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_Explicit(System.Int32)~MonoAudio.Int24">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:MonoAudio.Int24"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_Equality(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int24"/> objects are equal.
            </summary>
            <param name="int1">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if the value of int1 is the same as the value of int2; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.ToString">
            <summary>
            Converts to string.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_UnaryNegation(MonoAudio.Int24)">
            <summary>
            Implements the operator -.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the operator.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_Inequality(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.Int24"/> objects are not equal.
            </summary>
            <param name="int1">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="int2">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if int1 and int2 are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_LessThan(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Determines whether one specified <see cref="T:MonoAudio.Int24"/> is less than another specified <see cref="T:MonoAudio.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_GreaterThan(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Determines whether one specified <see cref="T:MonoAudio.Int24"/> is greater than another specified <see cref="T:MonoAudio.Int24"/> value.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is greater than right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_LessThanOrEqual(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Returns a value that indicates whether a specified <see cref="T:MonoAudio.Int24"/> is less than or equal to another specified <see cref="T:MonoAudio.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if left is less than or equal to right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.op_GreaterThanOrEqual(MonoAudio.Int24,MonoAudio.Int24)">
            <summary>
            Determines whether one specified <see cref="T:MonoAudio.Int24"/> is greater than or equal to another specified <see cref="T:MonoAudio.Int24"/>.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.Int24"/> to compare.</param>
            <returns>
              <c>true</c> if <see cref="T:MonoAudio.Int24"/> is greater than or equal to <see cref="T:MonoAudio.Int24"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.ReverseEndianness(MonoAudio.Int24)">
            <summary>
            Reverses endianness of the given <see cref="T:MonoAudio.Int24"/> value.
            </summary>
            <param name="value">The value to reverse endianness.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Int24.CompareTo(MonoAudio.Int24)">
            <summary>
            Compares the value of this instance to a specified <see cref="T:MonoAudio.Int24"/> value and returns an integer that indicates whether this instance is less than, equal to, or greater than the specified <see cref="T:MonoAudio.Int24"/> value.
            </summary>
            <param name="other">The <see cref="T:MonoAudio.Int24"/> to compare to the current instance.</param>
            <returns>
            A signed number indicating the relative values of this instance and the other parameter.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object" />, is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object" /> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object" /> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.Equals(MonoAudio.Int24)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the <paramref name="other">other</paramref> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:MonoAudio.Int24.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:MonoAudio.OffsetSByte">
            <summary>
            Represents a value that is offset 128 inside 8-bit PCM.
            </summary>
        </member>
        <member name="F:MonoAudio.OffsetSByte.MaxValue">
            <summary>
            Represents the largest possible value of <see cref="T:MonoAudio.OffsetSByte"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:MonoAudio.OffsetSByte.MinValue">
            <summary>
            Represents the smallest possible value of <see cref="T:MonoAudio.OffsetSByte"/>. This field is constant and read-only.
            </summary>
        </member>
        <member name="F:MonoAudio.OffsetSByte.Zero">
            <summary>
            Represents the number zero (0).
            </summary>
        </member>
        <member name="F:MonoAudio.OffsetSByte.One">
            <summary>
            Represents the number one (1).
            </summary>
        </member>
        <member name="F:MonoAudio.OffsetSByte.MinusOne">
            <summary>
            Represents the number negative one (-1).
            </summary>
        </member>
        <member name="M:MonoAudio.OffsetSByte.#ctor(System.SByte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.OffsetSByte"/> struct.
            </summary>
            <param name="value">The represented value.</param>
        </member>
        <member name="M:MonoAudio.OffsetSByte.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.OffsetSByte"/> struct.
            </summary>
            <param name="value">The stored value.</param>
        </member>
        <member name="M:MonoAudio.OffsetSByte.CompareTo(MonoAudio.OffsetSByte)">
            <summary>
            Compares this instance to a specified 32-bit signed integer and returns an indication of their relative values.
            </summary>
            <param name="other">An integer to compare.</param>
            <returns>
            A signed number indicating the relative values of this instance and value.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.Equals(MonoAudio.OffsetSByte)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_Equality(MonoAudio.OffsetSByte,MonoAudio.OffsetSByte)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.OffsetSByte"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.OffsetSByte"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.OffsetSByte"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_Inequality(MonoAudio.OffsetSByte,MonoAudio.OffsetSByte)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.OffsetSByte"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.OffsetSByte"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.OffsetSByte"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_Explicit(MonoAudio.OffsetSByte)~System.SByte">
            <summary>
            Performs an explicit conversion from <see cref="T:MonoAudio.OffsetSByte"/> to <see cref="T:System.SByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_Explicit(MonoAudio.OffsetSByte)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:MonoAudio.OffsetSByte"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_Explicit(System.SByte)~MonoAudio.OffsetSByte">
            <summary>
            Performs an explicit conversion from <see cref="T:System.SByte"/> to <see cref="T:MonoAudio.OffsetSByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_Explicit(System.Int32)~MonoAudio.OffsetSByte">
            <summary>
            Performs an explicit conversion from <see cref="T:System.Int32"/> to <see cref="T:MonoAudio.OffsetSByte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.ToString">
            <summary>
            Converts the numeric value of this instance to its equivalent string representation.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents the value of this instance.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.Parse(System.String)">
            <summary>
            Converts the string representation of a number to its <see cref="T:MonoAudio.OffsetSByte"/> equivalent.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <returns>The equivalent to the number contained in <paramref name="s"/>.</returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.TryParse(System.String,MonoAudio.OffsetSByte@)">
            <summary>
            Converts the string representation of a number to its <see cref="T:MonoAudio.OffsetSByte"/> equivalent.<br/>
            A return value indicates whether the conversion succeeded or failed.
            </summary>
            <param name="s">The string representation of the number to convert.</param>
            <param name="result">When this method returns, contains the <see cref="T:MonoAudio.OffsetSByte"/> number that is equivalent to the numeric value contained in <paramref name="s"/>, if the conversion succeeded, or zero if the conversion failed.
            The conversion fails if the <paramref name="s"/> parameter is <c>null</c> or <see cref="F:System.String.Empty"/>, is not a number in a valid format, or represents a number less than <see cref="F:MonoAudio.OffsetSByte.MinValue"/> or greater than <see cref="F:MonoAudio.OffsetSByte.MaxValue"/>.
            This parameter is passed uninitialized; any value originally supplied in result is overwritten.</param>
            <returns>
            <c>true</c> if <paramref name="s"/> was converted successfully; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_LessThan(MonoAudio.OffsetSByte,MonoAudio.OffsetSByte)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.OffsetSByte"/> is less than another specified <see cref="T:MonoAudio.OffsetSByte"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_LessThanOrEqual(MonoAudio.OffsetSByte,MonoAudio.OffsetSByte)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.OffsetSByte"/> is less than or equal to another specified <see cref="T:MonoAudio.OffsetSByte"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_GreaterThan(MonoAudio.OffsetSByte,MonoAudio.OffsetSByte)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.OffsetSByte"/> is greater than another specified <see cref="T:MonoAudio.OffsetSByte"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.OffsetSByte.op_GreaterThanOrEqual(MonoAudio.OffsetSByte,MonoAudio.OffsetSByte)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.OffsetSByte"/> is greater than or equal to another specified <see cref="T:MonoAudio.OffsetSByte"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.ReadResult">
            <summary>
            Represents a result of <see cref="M:MonoAudio.IReadableAudioSource`2.Read(System.Span{`0})"/> operation.
            </summary>
        </member>
        <member name="P:MonoAudio.ReadResult.EndOfStream">
            <summary>
            Represents the fact that the source stream is empty right now.
            </summary>
        </member>
        <member name="P:MonoAudio.ReadResult.WaitingForSource">
            <summary>
            Represents the fact that the source stream is waiting for source's IO.
            </summary>
        </member>
        <member name="M:MonoAudio.ReadResult.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.ReadResult"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:MonoAudio.ReadResult.IsEndOfStream">
            <summary>
            Gets a value indicating whether the source has already reached the end of stream.
            </summary>
            <value>
              <c>true</c> if the source has already reached the end of stream; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.ReadResult.HasData">
            <summary>
            Gets a value indicating whether the buffer has data.
            </summary>
            <value>
              <c>true</c> if the buffer has data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.ReadResult.HasNoData">
            <summary>
            Gets a value indicating whether the buffer has no data.
            </summary>
            <value>
              <c>true</c> if the buffer has no data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:MonoAudio.ReadResult.Length">
            <summary>
            Gets the actual length read.
            </summary>
            <value>
            The actual length read.
            </value>
        </member>
        <member name="M:MonoAudio.ReadResult.op_Explicit(MonoAudio.ReadResult)~System.UInt32">
            <summary>
            Performs an explicit conversion from <see cref="T:MonoAudio.ReadResult"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_Explicit(MonoAudio.ReadResult)~System.Int32">
            <summary>
            Performs an explicit conversion from <see cref="T:MonoAudio.ReadResult"/> to <see cref="T:System.Int32"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_Implicit(System.Int32)~MonoAudio.ReadResult">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:MonoAudio.ReadResult"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.Equals(MonoAudio.ReadResult)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.CompareTo(MonoAudio.ReadResult)">
            <summary>
            Compares this instance to a specified <see cref="T:MonoAudio.ReadResult"/> and returns an indication of their relative values.
            </summary>
            <param name="other">An <see cref="T:MonoAudio.ReadResult"/>  to compare.</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_Equality(MonoAudio.ReadResult,MonoAudio.ReadResult)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.ReadResult"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.ReadResult"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.ReadResult"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_Inequality(MonoAudio.ReadResult,MonoAudio.ReadResult)">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.ReadResult"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.ReadResult"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.ReadResult"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_LessThan(MonoAudio.ReadResult,MonoAudio.ReadResult)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.ReadResult"/> is less than another specified <see cref="T:MonoAudio.ReadResult"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_LessThanOrEqual(MonoAudio.ReadResult,MonoAudio.ReadResult)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.ReadResult"/> is less than or equal to another specified <see cref="T:MonoAudio.ReadResult"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is less than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_GreaterThan(MonoAudio.ReadResult,MonoAudio.ReadResult)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.ReadResult"/> is greater than another specified <see cref="T:MonoAudio.ReadResult"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_GreaterThanOrEqual(MonoAudio.ReadResult,MonoAudio.ReadResult)">
            <summary>
            Returns a value indicating whether a specified <see cref="T:MonoAudio.ReadResult"/> is greater than or equal to another specified <see cref="T:MonoAudio.ReadResult"/>.
            </summary>
            <param name="left">The first value to compare.</param>
            <param name="right">The second value to compare.</param>
            <returns>
            <c>true</c> if <paramref name="left"/> is greater than or equal to <paramref name="right"/>; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.ReadResult.op_Addition(MonoAudio.ReadResult,System.Int32)">
            <summary>
            Adds specified <see cref="T:MonoAudio.ReadResult"/> value and <see cref="T:System.Int32"/> value.
            </summary>
            <param name="left">The first value to add.</param>
            <param name="right">The second value to add.</param>
            <returns>
            The result of adding <paramref name="left"/> and <paramref name="right"/>.
            </returns>
        </member>
        <member name="T:MonoAudio.StackOnlyActionContainer`1">
            <summary>
            Stores <see cref="T:System.Action`1"/> that cannot leave the stack.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MonoAudio.StackOnlyActionContainer`1.#ctor(System.Action{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.StackOnlyActionContainer`1"/> struct.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:MonoAudio.StackOnlyActionContainer`1.Invoke(`0)">
            <summary>
            Invokes this instance with specified parameter.
            </summary>
            <param name="parameter">The first parameter.</param>
        </member>
        <member name="M:MonoAudio.StackOnlyActionContainer`1.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.StackOnlyActionContainer`1.Equals(MonoAudio.StackOnlyActionContainer{`0})">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="value">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.StackOnlyActionContainer`1.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="M:MonoAudio.StackOnlyActionContainer`1.op_Equality(MonoAudio.StackOnlyActionContainer{`0},MonoAudio.StackOnlyActionContainer{`0})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.StackOnlyActionContainer`1"/> objects are equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.StackOnlyActionContainer`1"/> to compare.</param>
            <param name="right">The second <see cref="T:MonoAudio.StackOnlyActionContainer`1"/> to compare.</param>
            <returns>
              <c>true</c> if the left is the same as the right; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:MonoAudio.StackOnlyActionContainer`1.op_Inequality(MonoAudio.StackOnlyActionContainer{`0},MonoAudio.StackOnlyActionContainer{`0})">
            <summary>
            Indicates whether the values of two specified <see cref="T:MonoAudio.StackOnlyActionContainer`1"/> objects are not equal.
            </summary>
            <param name="left">The first <see cref="T:MonoAudio.StackOnlyActionContainer`1"/> to compare.</param>
            <param name="right">The second  <see cref="T:MonoAudio.StackOnlyActionContainer`1"/> to compare.</param>
            <returns>
              <c>true</c> if left and right are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:MonoAudio.StoppedEventArgs">
            <summary>
            Represents an event arguments that tells you that something has (been) stopped and holds why.<br/>
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="M:MonoAudio.StoppedEventArgs.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.StoppedEventArgs"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.StoppedEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.StoppedEventArgs"/> class.
            </summary>
            <param name="exception">The exception.</param>
        </member>
        <member name="P:MonoAudio.StoppedEventArgs.Exception">
            <summary>
            Gets the exception.
            </summary>
            <value>
            The exception.
            </value>
        </member>
        <member name="P:MonoAudio.StoppedEventArgs.HasError">
            <summary>
            Gets a value indicating whether this instance has error.
            </summary>
            <value>
              <c>true</c> if this instance has error; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase">
            <summary>
            Defines a base infrastructure of the source generates a deterministic pseudo-monaural wave with specified frequency.
            </summary>
            <seealso cref="T:MonoAudio.ISampleSource" />
        </member>
        <member name="M:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.#ctor(MonoAudio.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Synthesis.SinusoidSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="P:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.GenerateMonauralSample(System.Double)">
            <summary>
            Generates the monaural sample.
            </summary>
            <param name="theta">The theta(from -pi to pi).</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.DisposeInternal(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Synthesis.PseudoMonauralSignalSourceBase.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Synthesis.SilenceSource`2">
            <summary>
            Generates a silence.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <typeparam name="TFormat">The type of the format.</typeparam>
            <seealso cref="T:MonoAudio.IReadableAudioSource`2" />
        </member>
        <member name="P:MonoAudio.Synthesis.SilenceSource`2.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2" /> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.SilenceSource`2.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Synthesis.SilenceSource`2.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2" /> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.SilenceSource`2.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2" /> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="M:MonoAudio.Synthesis.SilenceSource`2.#ctor(`1)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Synthesis.SilenceSource`2"/> class.
            </summary>
            <param name="format">The format.</param>
        </member>
        <member name="M:MonoAudio.Synthesis.SilenceSource`2.Read(System.Span{`0})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>
            The length of the data written.
            </returns>
        </member>
        <member name="M:MonoAudio.Synthesis.SilenceSource`2.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:MonoAudio.Synthesis.SilenceSource`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="T:MonoAudio.Synthesis.SilenceWaveSource">
            <summary>
            Generates a silence.
            </summary>
            <seealso cref="T:MonoAudio.IWaveSource" />
        </member>
        <member name="M:MonoAudio.Synthesis.SilenceWaveSource.#ctor(MonoAudio.IWaveFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Synthesis.SilenceWaveSource"/> class.
            </summary>
            <param name="format">The format.</param>
            <exception cref="T:System.ArgumentNullException">format</exception>
        </member>
        <member name="P:MonoAudio.Synthesis.SilenceWaveSource.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.SilenceWaveSource.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Synthesis.SilenceWaveSource.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.SilenceWaveSource.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Synthesis.SilenceWaveSource.Read(System.Span{System.Byte})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Synthesis.SilenceWaveSource.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Synthesis.SinusoidSource">
            <summary>
            Generates a sinusoid wave with specified frequency.
            </summary>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.#ctor(MonoAudio.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Synthesis.SinusoidSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.CanSeek">
            <summary>
            Gets or sets whether the <see cref="T:MonoAudio.IAudioSource`2"/> supports seeking or not.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.Format">
            <summary>
            Gets the format of the audio data.
            </summary>
            <value>
            The format of the audio data.
            </value>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.Frequency">
            <summary>
            Gets or sets the frequency.
            </summary>
            <value>
            The frequency.
            </value>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.Position">
            <summary>
            Gets or sets where the <see cref="T:MonoAudio.IAudioSource`2"/> is.
            Some implementation could not support this property.
            </summary>
        </member>
        <member name="P:MonoAudio.Synthesis.SinusoidSource.Length">
            <summary>
            Gets how long the <see cref="T:MonoAudio.IAudioSource`2"/> lasts in specific types.
            -1 Means Infinity.
            </summary>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.Read(System.Span{System.Single})">
            <summary>
            Reads the audio to the specified buffer.
            </summary>
            <param name="buffer">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.GenerateMonauralSample(System.Double)">
            <summary>
            Generates the monaural sample.
            </summary>
            <param name="theta">The theta(from -pi to pi).</param>
            <returns></returns>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Synthesis.SinusoidSource.Dispose">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Synthesis.SquareWaveSource">
            <summary>
            Generates a square wave with specified frequency.
            </summary>
            <seealso cref="T:MonoAudio.ISampleSource" />
        </member>
        <member name="M:MonoAudio.Synthesis.SquareWaveSource.#ctor(MonoAudio.SampleFormat)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Synthesis.SquareWaveSource"/> class.
            </summary>
            <param name="format">The output format.</param>
        </member>
        <member name="M:MonoAudio.Synthesis.SquareWaveSource.DisposeInternal(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Synthesis.SquareWaveSource.GenerateMonauralSample(System.Double)">
            <summary>
            Generates the monaural sample.
            </summary>
            <param name="theta">The theta(from 0 to 2*pi).</param>
            <returns></returns>
        </member>
        <member name="T:MonoAudio.AudioSourceExtensions">
            <summary>
            Contains some utility functions about <see cref="T:MonoAudio.IAudioSource`2"/>
            </summary>
        </member>
        <member name="M:MonoAudio.AudioSourceExtensions.ReadAsAsync``2(MonoAudio.IReadableAudioSource{``0,``1},System.Memory{``0})">
            <summary>
            Reads the audio to the specified buffer asynchronously if possible.
            </summary>
            <param name="source"></param>
            <param name="destination">The buffer.</param>
            <returns>The length of the data written.</returns>
        </member>
        <member name="T:MonoAudio.BinaryExtensions">
            <summary>
            Provides some functions that helps you about binary things.
            </summary>
        </member>
        <member name="P:MonoAudio.BinaryExtensions.SystemEndianness">
            <summary>
            Gets the system endianness.
            </summary>
            <value>
            The system endianness.
            </value>
        </member>
        <member name="M:MonoAudio.BinaryExtensions.ReverseEndianness(System.Guid)">
            <summary>
            Reverses internal primitive values by performing an endianness swap of the specified <see cref="T:System.Guid"/> <paramref name="value"/>.
            </summary>
            <param name="value">The value to reverse.</param>
            <returns>The reversed value.</returns>
        </member>
        <member name="M:MonoAudio.BinaryExtensions.TryReadDoubleLittleEndian(System.ReadOnlySpan{System.Byte},System.Double@)">
            <summary>
            Reads a <see cref="T:System.Double"/> from the beginning of a read-only span of bytes, as little endian.<br/>
            This method poly-fills the <see cref="T:System.Buffers.Binary.BinaryPrimitives"/>.ReadDoubleLittleEndian(ReadOnlySpan{byte}) method for non-supported frameworks.
            </summary>
            <param name="source">The read-only span of bytes to read.</param>
            <param name="value">When this method returns, contains the value read out of the read-only span of bytes, as little endian.</param>
            <returns><c>true</c> if the span is large enough to contain a <see cref="T:System.Double"/>; otherwise, <c>false</c>.</returns>
            /// <seealso cref="T:System.Buffers.Binary.BinaryPrimitives"/>
        </member>
        <member name="M:MonoAudio.BinaryExtensions.TryReadDoubleBigEndian(System.ReadOnlySpan{System.Byte},System.Double@)">
            <summary>
            Reads a <see cref="T:System.Double"/> from the beginning of a read-only span of bytes, as big endian.<br/>
            This method poly-fills the <see cref="T:System.Buffers.Binary.BinaryPrimitives"/>.ReadDoubleLittleEndian(ReadOnlySpan{byte}) method for non-supported frameworks.
            </summary>
            <param name="source">The read-only span of bytes to read.</param>
            <param name="value">When this method returns, contains the value read out of the read-only span of bytes, as big endian.</param>
            <returns><c>true</c> if the span is large enough to contain a <see cref="T:System.Double"/>; otherwise, <c>false</c>.</returns>
            /// <seealso cref="T:System.Buffers.Binary.BinaryPrimitives"/>
        </member>
        <member name="M:MonoAudio.BinaryExtensions.TryReadSingleLittleEndian(System.ReadOnlySpan{System.Byte},System.Single@)">
            <summary>
            Reads a <see cref="T:System.Single"/> from the beginning of a read-only span of bytes, as little endian.
            </summary>
            <param name="source">The read-only span of bytes to read.</param>
            <param name="value">When this method returns, contains the value read out of the read-only span of bytes, as little endian.</param>
            <returns><c>true</c> if the span is large enough to contain a <see cref="T:System.Single"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:MonoAudio.BinaryExtensions.TryReadSingleBigEndian(System.ReadOnlySpan{System.Byte},System.Single@)">
            <summary>
            Reads a <see cref="T:System.Single"/> from the beginning of a read-only span of bytes, as big endian.
            </summary>
            <param name="source">The read-only span of bytes to read.</param>
            <param name="value">When this method returns, contains the value read out of the read-only span of bytes, as big endian.</param>
            <returns><c>true</c> if the span is large enough to contain a <see cref="T:System.Single"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:MonoAudio.Utils.BufferInstance`1">
            <summary>
            Provides a simple internal buffer instancing.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:MonoAudio.Utils.ResizableBufferWrapper`1">
            <summary>
            Provides a Buffer wrapper.
            </summary>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Utils.ResizableBufferWrapper`1"/> class.
            </summary>
        </member>
        <member name="P:MonoAudio.Utils.ResizableBufferWrapper`1.CurrentSizeInBytes">
            <summary>
            Gets the current size in bytes.
            </summary>
            <value>
            The current size in bytes.
            </value>
        </member>
        <member name="P:MonoAudio.Utils.ResizableBufferWrapper`1.ActualBuffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="P:MonoAudio.Utils.ResizableBufferWrapper`1.Buffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.Resize(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in <typeparamref name="T"/>.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.ResizeInternal(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in bytes.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.DisposeInternal(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:MonoAudio.Utils.ResizableBufferWrapper`1"/> class.
            </summary>
        </member>
        <member name="M:MonoAudio.Utils.ResizableBufferWrapper`1.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:MonoAudio.Utils.ResizablePooledBufferWrapper`1">
            <summary>
            Provides a Buffer wrapper.
            </summary>
            <typeparam name="T"></typeparam>
            <seealso cref="T:MonoAudio.Utils.ResizableBufferWrapper`1" />
        </member>
        <member name="M:MonoAudio.Utils.ResizablePooledBufferWrapper`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Utils.ResizablePooledBufferWrapper`1"/> class.
            </summary>
            <param name="initialSize">The initial size in <typeparamref name="T"/>.</param>
        </member>
        <member name="P:MonoAudio.Utils.ResizablePooledBufferWrapper`1.ActualBuffer">
            <summary>
            Gets the buffer.
            </summary>
            <value>
            The buffer.
            </value>
        </member>
        <member name="M:MonoAudio.Utils.ResizablePooledBufferWrapper`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing"><c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.</param>
        </member>
        <member name="M:MonoAudio.Utils.ResizablePooledBufferWrapper`1.ResizeInternal(System.Int32)">
            <summary>
            Resizes the buffer to the specified new size.
            </summary>
            <param name="newSize">The new size in bytes.</param>
        </member>
        <member name="T:MonoAudio.Utils.ContentSwapper`1">
            <summary>
            Swaps two <typeparamref name="T"/> instances.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:MonoAudio.Utils.ContentSwapper`1.#ctor(`0,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:MonoAudio.Utils.ContentSwapper`1"/> class.
            </summary>
            <param name="initialVisibleValue">The value initial visible.</param>
            <param name="initiallyHiddenValue">The value initially hidden.</param>
        </member>
        <member name="M:MonoAudio.Utils.ContentSwapper`1.Swap">
            <summary>
            Swaps two values of this instance.
            </summary>
        </member>
        <member name="P:MonoAudio.Utils.ContentSwapper`1.Value">
            <summary>
            Gets the current value.
            </summary>
            <value>
            The value.
            </value>
        </member>
        <member name="T:MonoAudio.OptimizationUtils">
            <summary>
            Contains some utility for optimization.
            </summary>
        </member>
        <member name="F:MonoAudio.OptimizationUtils.AggressiveOptimizationIfPossible">
            <summary>
            Returns 0 when the target framework doesn't support <see cref="T:System.Runtime.CompilerServices.MethodImplOptions"/>.AggressiveOptimization.
            </summary>
        </member>
        <member name="F:MonoAudio.OptimizationUtils.InlineAndOptimizeIfPossible">
            <summary>
            Returns <see cref="F:System.Runtime.CompilerServices.MethodImplOptions.AggressiveInlining"/> when the target framework doesn't support <see cref="T:System.Runtime.CompilerServices.MethodImplOptions"/>.AggressiveOptimization.
            </summary>
        </member>
        <member name="T:System.ThrowHelper">
            <summary>
            Helps throwing exceptions while in-lining aggressively.
            </summary>
        </member>
        <member name="M:System.ThrowHelper.Throw``1(``0)">
            <summary>
            Throws the specified exception.
            </summary>
            <typeparam name="T">The type of exception.</typeparam>
            <param name="exception">The exception.</param>
        </member>
        <member name="T:System.MathI">
            <summary>
            Provides constants and static methods for bitwise, arithmetic, and other common mathematical functions.
            </summary>
            <summary>
            Provides constants and static methods for bitwise, arithmetic, and other common mathematical functions.
            </summary>
        </member>
        <member name="M:System.MathI.FloorStep(System.Int32,System.Int32)">
            <summary>
            Aligns the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathI.FloorStepRem(System.Int32,System.Int32)">
            <summary>
            Aligns the specified value.
            </summary>
            <param name="value">The value.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathI.Rectify(System.Int32)">
            <summary>
            Rectifies the specified <paramref name="value"/>.
            </summary>
            <param name="value">The value to rectify.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathI.CountConsecutiveZeros(System.UInt32)">
            <summary>
            Counts the consecutive zero bits on the right.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathI.LogBase2(System.UInt32)">
            <summary>
            Finds last 1's position from LSB.<br/>
            When the value is 0, it returns 0.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="M:System.MathI.LargestPowerOfTwoLessThanOrEqualsTo(System.UInt32)">
            <summary>
            Returns the largest power-of-two number less than or equals to <paramref name="value"/>.
            </summary>
            <param name="value">The value.</param>
            <returns></returns>
        </member>
        <member name="T:System.SpanExtensions">
            <summary>
            Provides some extension functions.
            </summary>
            <summary>
            Provides some extension functions.
            </summary>
        </member>
        <member name="M:System.SpanExtensions.FastAdd(System.ReadOnlySpan{System.Single},System.Span{System.Single})">
            <summary>
            Adds the <paramref name="samplesToAdd"/> to <paramref name="buffer"/>.
            </summary>
            <param name="samplesToAdd">The samples to add.</param>
            <param name="buffer">The buffer.</param>
            <exception cref="T:System.ArgumentException">samplesToAdd</exception>
        </member>
        <member name="M:System.SpanExtensions.FastScalarMultiply(System.Span{System.Single},System.Single)">
            <summary>
            Multiplies the specified samples faster, with the given <paramref name="scale"/>.
            </summary>
            <param name="span">The span to multiply.</param>
            <param name="scale">The value to be multiplied.</param>
        </member>
        <member name="M:System.SpanExtensions.FastMix(System.ReadOnlySpan{System.Single},System.Span{System.Single},System.Single)">
            <summary>
            Mixes the <paramref name="samplesToMix"/> to <paramref name="buffer"/>.
            </summary>
            <param name="samplesToMix">The samples to add.</param>
            <param name="buffer">The buffer.</param>
            <param name="scale">The scale to scale <paramref name="samplesToMix"/>.</param>
            <exception cref="T:System.ArgumentException">samplesToMix</exception>
        </member>
        <member name="M:System.SpanExtensions.FastMix(System.Span{System.Single},System.ReadOnlySpan{System.Single},System.Single,System.ReadOnlySpan{System.Single},System.Single)">
            <summary>
            Mixes the <paramref name="samplesA"/> and <paramref name="samplesB"/> to <paramref name="buffer"/>.
            </summary>
            <param name="buffer">The output buffer.</param>
            <param name="samplesA">The samples a.</param>
            <param name="volumeA">The volume of <paramref name="samplesA"/>.</param>
            <param name="samplesB">The samples b.</param>
            <param name="volumeB">The volume of <paramref name="samplesB"/>.</param>
            <exception cref="T:System.ArgumentException">
            buffer must not be shorter than samplesA or samplesB! - buffer
            or
            samplesA must be as long as samplesB! - samplesA
            </exception>
        </member>
        <member name="M:System.SpanExtensions.QuickFill``1(System.Span{``0},``0)">
            <summary>
            Quickly (but slower than <see cref="M:System.SpanExtensions.FastFill(System.Span{System.Single},System.Single)"/>) fills the specified memory region, with the given <paramref name="value"/>.
            </summary>
            <typeparam name="TSample">The type of the sample.</typeparam>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.Skip``1(System.Span{``0},System.Int32)">
            <summary>
            Skips the specified step.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="step">The step.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhileIfLongerThan``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the specified <paramref name="span"/> to the specified <paramref name="maxLength"/> if the <paramref name="span"/> is longer than the <paramref name="maxLength"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The span.</param>
            <param name="maxLength">The maximum length.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Single},System.Single)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Double},System.Double)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Byte},System.Byte)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.UInt16},System.UInt16)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.UInt32},System.UInt32)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.UInt64},System.UInt64)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.SByte},System.SByte)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Int16},System.Int16)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Int32},System.Int32)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.FastFill(System.Span{System.Int64},System.Int64)">
            <summary>
            Fills the specified memory region faster, with the given <paramref name="value"/>.
            </summary>
            <param name="span">The span to fill.</param>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the <paramref name="span"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.Span{``0},DivideSharp.UInt32Divisor)">
            <summary>
            Slices the <paramref name="span"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhile``1(System.Span{``0},System.Int32)">
            <summary>
            Slices the <paramref name="span"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Span{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Span{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Span{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="span"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Span`1"/></typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.Memory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="memory"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.Memory{``0},DivideSharp.UInt32Divisor)">
            <summary>
            Slices the <paramref name="memory"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhile``1(System.Memory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="memory"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Memory{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Memory{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.Memory{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="memory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.Memory`1"/></typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlySpan"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.ReadOnlySpan{``0},DivideSharp.UInt32Divisor)">
            <summary>
            Slices the <paramref name="readOnlySpan"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhile``1(System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlySpan{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="readOnlySpan"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlySpan`1"/></typeparam>
            <param name="readOnlySpan">The <see cref="T:System.ReadOnlySpan`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.ReadOnlyMemory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="channels">The align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceAlign``1(System.ReadOnlyMemory{``0},DivideSharp.UInt32Divisor)">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> aligned with the multiple of <paramref name="channels"/>.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="channelsDivisor">The divisor set to align width.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.SliceWhile``1(System.ReadOnlyMemory{``0},System.Int32)">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the specified length.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="length">The length to read.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.Memory{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.ReadOnlySpan{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.AlignWith``1(System.ReadOnlyMemory{``0},System.ReadOnlyMemory{``0})">
            <summary>
            Slices the <paramref name="readOnlyMemory"/> with the length of specified <paramref name="criterion"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.ReadOnlyMemory`1"/></typeparam>
            <param name="readOnlyMemory">The <see cref="T:System.ReadOnlyMemory`1"/> to slice.</param>
            <param name="criterion">The criterion.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.CopyTo``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.Memory`1"/> into a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.Memory`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.CopyTo``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.ReadOnlyMemory`1"/> into a destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlyMemory`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.CopyTo``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.Span`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.CopyTo``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Copies the contents of this <see cref="T:System.ReadOnlySpan`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to copy from.</param>
            <param name="destination">The destination <see cref="T:System.Memory`1"/> object.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.TryCopyTo``1(System.Memory{``0},System.Span{``0})">
            <summary>
            Attempts to copy the current <see cref="T:System.Memory`1"/> to a destination <see cref="T:System.Span`1"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.Memory`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns><c>true</c> if the copy operation succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.SpanExtensions.TryCopyTo``1(System.ReadOnlyMemory{``0},System.Span{``0})">
            <summary>
            Attempts to copy the current <see cref="T:System.ReadOnlyMemory`1"/> to a destination <see cref="T:System.Span`1"/> and returns a value that indicates whether the copy operation succeeded.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Span`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlyMemory`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns><c>true</c> if the copy operation succeeded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:System.SpanExtensions.TryCopyTo``1(System.Span{``0},System.Memory{``0})">
            <summary>
            Copies the contents of current <see cref="T:System.Span`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.Span`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns></returns>
        </member>
        <member name="M:System.SpanExtensions.TryCopyTo``1(System.ReadOnlySpan{``0},System.Memory{``0})">
            <summary>
            Copies the contents of current <see cref="T:System.ReadOnlySpan`1"/> into a destination <see cref="T:System.Memory`1"/>.
            </summary>
            <typeparam name="T">The type of destination <see cref="T:System.Memory`1"/></typeparam>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to copy from.</param>
            <param name="destination">The target of the copy operation.</param>
            <returns></returns>
        </member>
        <member name="T:System.Numerics.Vector5">
            <summary>
            Represents a vector that has 5 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector5.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector5.front">
            <summary>
            The front 4 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector5.back">
            <summary>
            The back value
            </summary>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
        </member>
        <member name="M:System.Numerics.Vector5.#ctor(System.Numerics.Vector4,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector5"/> struct.
            </summary>
            <param name="four">The front four values.</param>
            <param name="last">The lase value.</param>
        </member>
        <member name="M:System.Numerics.Vector5.op_UnaryNegation(System.Numerics.Vector5)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Addition(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Subtraction(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Division(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Numerics.Vector5,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Multiply(System.Single,System.Numerics.Vector5)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Division(System.Numerics.Vector5,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Equality(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.op_Inequality(System.Numerics.Vector5,System.Numerics.Vector5)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector5"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.Equals(System.Numerics.Vector5)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector5.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector6">
            <summary>
            Represents a vector that has 6 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector6.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector6.front">
            <summary>
            The front 3 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector6.back">
            <summary>
            The back 3 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
        </member>
        <member name="M:System.Numerics.Vector6.#ctor(System.Numerics.Vector4,System.Numerics.Vector2)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector6"/> struct.
            </summary>
            <param name="front">The front four values.</param>
            <param name="back">The back two values.</param>
        </member>
        <member name="M:System.Numerics.Vector6.op_UnaryNegation(System.Numerics.Vector6)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Addition(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Subtraction(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Division(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Numerics.Vector6,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Multiply(System.Single,System.Numerics.Vector6)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Division(System.Numerics.Vector6,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Equality(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.op_Inequality(System.Numerics.Vector6,System.Numerics.Vector6)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector6"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.Equals(System.Numerics.Vector6)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector6.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector7">
            <summary>
            Represents a vector that has 7 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector7.Value7">
            <summary>
            The seventh value
            </summary>
        </member>
        <member name="F:System.Numerics.Vector7.front">
            <summary>
            The front 3 values
            </summary>
        </member>
        <member name="F:System.Numerics.Vector7.back">
            <summary>
            The back 4 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
        </member>
        <member name="M:System.Numerics.Vector7.#ctor(System.Numerics.Vector4,System.Numerics.Vector3)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector7"/> struct.
            </summary>
            <param name="front">The front four values.</param>
            <param name="back">The back three values.</param>
        </member>
        <member name="M:System.Numerics.Vector7.op_UnaryNegation(System.Numerics.Vector7)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Addition(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Subtraction(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Division(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Numerics.Vector7,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Multiply(System.Single,System.Numerics.Vector7)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Division(System.Numerics.Vector7,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Equality(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.op_Inequality(System.Numerics.Vector7,System.Numerics.Vector7)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector7"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.Equals(System.Numerics.Vector7)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector7.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.Numerics.Vector8">
            <summary>
            Represents a vector that has 8 IEEE754-single-precision-floating-point numbers.
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value3">
            <summary>
            The third value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value4">
            <summary>
            The fourth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value5">
            <summary>
            The fifth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value6">
            <summary>
            The sixth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value7">
            <summary>
            The seventh value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Value8">
            <summary>
            The eighth value
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Front">
            <summary>
            The front 4 values
            </summary>
        </member>
        <member name="P:System.Numerics.Vector8.Back">
            <summary>
            The back 4 values
            </summary>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="value">The value to fill with.</param>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="v1">The v1.</param>
            <param name="v2">The v2.</param>
            <param name="v3">The v3.</param>
            <param name="v4">The v4.</param>
            <param name="v5">The v5.</param>
            <param name="v6">The v6.</param>
            <param name="v7">The v7.</param>
            <param name="v8">The v8.</param>
        </member>
        <member name="M:System.Numerics.Vector8.#ctor(System.Numerics.Vector4,System.Numerics.Vector4)">
            <summary>
            Initializes a new instance of the <see cref="T:System.Numerics.Vector8"/> struct.
            </summary>
            <param name="front">The front four values.</param>
            <param name="back">The back four values.</param>
        </member>
        <member name="M:System.Numerics.Vector8.op_UnaryNegation(System.Numerics.Vector8)">
            <summary>
            Negates the specified vector.
            </summary>
            <param name="value">The vector to negate.</param>
            <returns>
            The negated vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Addition(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Adds two vectors together.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>
            The summed vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Subtraction(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Division(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Numerics.Vector8,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Single,System.Numerics.Vector8)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Division(System.Numerics.Vector8,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Equality(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Inequality(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.Equals(System.Numerics.Vector8)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.PointerExtensions">
            <summary>
            Provides some extensions for <code>ref T</code>s,  <code>void*</code>s, and <see cref="T:System.IntPtr"/>s.
            </summary>
        </member>
        <member name="M:System.PointerExtensions.Increment(System.IntPtr)">
            <summary>
            Increments the specified <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>The incremented <see cref="T:System.IntPtr"/> value.</returns>
        </member>
        <member name="M:System.PointerExtensions.Increment(System.UIntPtr)">
            <summary>
            Increments the specified <see cref="T:System.UIntPtr"/> value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>The incremented <see cref="T:System.UIntPtr"/> value.</returns>
        </member>
    </members>
</doc>
<member name="M:System.Numerics.Vector8.op_Subtraction(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Subtracts the second vector from the first.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from subtracting <paramref name="right"/> from <paramref name="left"/>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a new vector whose values are the product of each pair of elements in two specified vectors.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The element-wise product vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Division(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Divides the first vector by the second.
            </summary>
            <param name="left">The first vector.</param>
            <param name="right">The second vector.</param>
            <returns>
            The vector that results from dividing left by right.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Numerics.Vector8,System.Single)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Multiply(System.Single,System.Numerics.Vector8)">
            <summary>
            Multiples the specified vector by the specified scalar value.
            </summary>
            <param name="left">The scalar value.</param>
            <param name="right">The vector.</param>
            <returns>
            The scaled vector.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Division(System.Numerics.Vector8,System.Single)">
            <summary>
            Divides the specified vector by a specified scalar value.
            </summary>
            <param name="left">The vector.</param>
            <param name="right">The scalar value.</param>
            <returns>
            The result of the division.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Equality(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a value that indicates whether each pair of elements in two specified vectors are equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.op_Inequality(System.Numerics.Vector8,System.Numerics.Vector8)">
            <summary>
            Returns a value that indicates whether two specified vectors are not equal.
            </summary>
            <param name="left">The first <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <param name="right">The second <see cref="T:System.Numerics.Vector8"/> to compare.</param>
            <returns>
              <c>true</c> if the <paramref name="left"/> and <paramref name="right"/> are not equal; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.Equals(System.Object)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="obj">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the obj parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.Equals(System.Numerics.Vector8)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
              <c>true</c> if the current object is equal to the other parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:System.Numerics.Vector8.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="T:System.PointerExtensions">
            <summary>
            Provides some extensions for <code>ref T</code>s,  <code>void*</code>s, and <see cref="T:System.IntPtr"/>s.
            </summary>
        </member>
        <member name="M:System.PointerExtensions.Increment(System.IntPtr)">
            <summary>
            Increments the specified <see cref="T:System.IntPtr"/> value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>The incremented <see cref="T:System.IntPtr"/> value.</returns>
        </member>
        <member name="M:System.PointerExtensions.Increment(System.UIntPtr)">
            <summary>
            Increments the specified <see cref="T:System.UIntPtr"/> value.
            </summary>
            <param name="value">The value to increment.</param>
            <returns>The incremented <see cref="T:System.UIntPtr"/> value.</returns>
        </member>
    </members>
</doc>
